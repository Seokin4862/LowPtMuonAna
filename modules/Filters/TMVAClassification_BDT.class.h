// Class: ReadBDT
// Automatically generated by MethodBase::MakeClass
//

/* configuration options =====================================================

#GEN -*-*-*-*-*-*-*-*-*-*-*- general info -*-*-*-*-*-*-*-*-*-*-*-

Method         : BDT::BDT
TMVA Release   : 4.2.0         [262656]
ROOT Release   : 5.34/26       [336410]
Creator        : jdb12
Date           : Mon Jul 17 12:51:51 2017
Host           : Darwin macfrank.rice.edu 14.1.0 Darwin Kernel Version 14.1.0: Thu Feb 26 19:26:47 PST 2015; root:xnu-2782.10.73~1/RELEASE_X86_64 x86_64
Dir            : /home/jdb12/work/MtdMuonPidMva/bin
Training events: 4001737
Analysis type  : [Classification]


#OPT -*-*-*-*-*-*-*-*-*-*-*-*- options -*-*-*-*-*-*-*-*-*-*-*-*-

# Set by User:
V: "False" [Verbose output (short form of "VerbosityLevel" below - overrides the latter one)]
H: "False" [Print method-specific help message]
NTrees: "850" [Number of trees in the forest]
MaxDepth: "3" [Max depth of the decision tree allowed]
MinNodeSize: "2.5%" [Minimum percentage of training events required in a leaf node (default: Classification: 5%, Regression: 0.2%)]
nCuts: "20" [Number of grid points in variable range used in finding optimal cut in node splitting]
BoostType: "AdaBoost" [Boosting type for the trees in the forest (note: AdaCost is still experimental)]
UseBaggedBoost: "True" [Use only a random subsample of all events for growing the trees in each boost iteration.]
AdaBoostBeta: "5.000000e-01" [Learning rate  for AdaBoost algorithm]
BaggedSampleFraction: "5.000000e-01" [Relative size of bagged event sample to original size of the data sample (used whenever bagging is used (i.e. UseBaggedBoost, Bagging,)]
SeparationType: "giniindex" [Separation criterion for node splitting]
# Default:
VerbosityLevel: "Default" [Verbosity level]
VarTransform: "None" [List of variable transformations performed before training, e.g., "D_Background,P_Signal,G,N_AllClasses" for: "Decorrelation, PCA-transformation, Gaussianisation, Normalisation, each for the given class of events ('AllClasses' denotes all events of all classes, if no class indication is given, 'All' is assumed)"]
CreateMVAPdfs: "False" [Create PDFs for classifier outputs (signal and background)]
IgnoreNegWeightsInTraining: "False" [Events with negative weights are ignored in the training (but are included for testing and performance evaluation)]
AdaBoostR2Loss: "quadratic" [Type of Loss function in AdaBoostR2]
Shrinkage: "1.000000e+00" [Learning rate for GradBoost algorithm]
UseRandomisedTrees: "False" [Determine at each node splitting the cut variable only as the best out of a random subset of variables (like in RandomForests)]
UseNvars: "3" [Size of the subset of variables used with RandomisedTree option]
UsePoissonNvars: "True" [Interpret "UseNvars" not as fixed number but as mean of a Possion distribution in each split with RandomisedTree option]
UseYesNoLeaf: "True" [Use Sig or Bkg categories, or the purity=S/(S+B) as classification of the leaf node -> Real-AdaBoost]
NegWeightTreatment: "inverseboostnegweights" [How to treat events with negative weights in the BDT training (particular the boosting) : IgnoreInTraining;  Boost With inverse boostweight; Pair events with negative and positive weights in traning sample and *annihilate* them (experimental!)]
Css: "1.000000e+00" [AdaCost: cost of true signal selected signal]
Cts_sb: "1.000000e+00" [AdaCost: cost of true signal selected bkg]
Ctb_ss: "1.000000e+00" [AdaCost: cost of true bkg    selected signal]
Cbb: "1.000000e+00" [AdaCost: cost of true bkg    selected bkg ]
NodePurityLimit: "5.000000e-01" [In boosting/pruning, nodes with purity > NodePurityLimit are signal; background otherwise.]
DoBoostMonitor: "False" [Create control plot with ROC integral vs tree number]
UseFisherCuts: "False" [Use multivariate splits using the Fisher criterion]
MinLinCorrForFisher: "8.000000e-01" [The minimum linear correlation between two variables demanded for use in Fisher criterion in node splitting]
UseExclusiveVars: "False" [Variables already used in fisher criterion are not anymore analysed individually for node splitting]
DoPreselection: "False" [and and apply automatic pre-selection for 100% efficient signal (bkg) cuts prior to training]
SigToBkgFraction: "1.000000e+00" [Sig to Bkg ratio used in Training (similar to NodePurityLimit, which cannot be used in real adaboost]
PruneMethod: "nopruning" [Note: for BDTs use small trees (e.g.MaxDepth=3) and NoPruning:  Pruning: Method used for pruning (removal) of statistically insignificant branches ]
PruneStrength: "0.000000e+00" [Pruning strength]
PruningValFraction: "5.000000e-01" [Fraction of events to use for optimizing automatic pruning.]
nEventsMin: "0" [deprecated: Use MinNodeSize (in % of training events) instead]
UseBaggedGrad: "False" [deprecated: Use *UseBaggedBoost* instead:  Use only a random subsample of all events for growing the trees in each iteration.]
GradBaggingFraction: "5.000000e-01" [deprecated: Use *BaggedSampleFraction* instead: Defines the fraction of events to be used in each iteration, e.g. when UseBaggedGrad=kTRUE. ]
UseNTrainEvents: "0" [deprecated: Use *BaggedSampleFraction* instead: Number of randomly picked training events used in randomised (and bagged) trees]
NNodesMax: "0" [deprecated: Use MaxDepth instead to limit the tree size]
##


#VAR -*-*-*-*-*-*-*-*-*-*-*-* variables *-*-*-*-*-*-*-*-*-*-*-*-

NVar 10
(MtdPidTraits_mDeltaY)        dY                            dY                            MTD DeltaY                    cm                                'F'    [-63.8596534729,63.7977485657]
MtdPidTraits_mDeltaZ          dZ                            dZ                            MTD DeltaZ                    cm                                'F'    [-97.0185775757,97.4098968506]
Tracks_mNSigmaPion            nSigmaPi                      nSigmaPi                      n #sigma #pi                                                    'F'    [-4.23999977112,17.2299995422]
Tracks_mNHitsFit              nh                            nh                            N Hits Fit                                                      'I'    [15,45]
Tracks_mDCA                   dca                           dca                           DCA                           cm                                'F'    [0,65.4779968262]
MtdPidTraits_mCell            Cell                          Cell                          MTD Cell                                                        'I'    [0,11]
MtdPidTraits_mModule          Module                        Module                        MTD Module                                                      'I'    [0,4]
MtdPidTraits_mBL              BL                            BL                            MTD BL                                                          'I'    [0,29]
Tracks_mPt                    pT                            pT                            p_{T}                         GeV/c                             'F'    [1.00030076504,153.730804443]
Tracks_mCharge                charge                        charge                        q                                                               'I'    [-1,1]
NSpec 0


============================================================================ */

#include <vector>
#include <cmath>
#include <string>
#include <iostream>

#define NN new BDTNode
   
#ifndef BDTNode__def
#define BDTNode__def
   
class BDTNode {
   
public:
   
   // constructor of an essentially "empty" node floating in space
   BDTNode ( BDTNode* left,BDTNode* right,
                          int selector, double cutValue, bool cutType, 
                          int nodeType, double purity, double response ) :
   fLeft         ( left         ),
   fRight        ( right        ),
   fSelector     ( selector     ),
   fCutValue     ( cutValue     ),
   fCutType      ( cutType      ),
   fNodeType     ( nodeType     ),
   fPurity       ( purity       ),
   fResponse     ( response     ){
   }

   virtual ~BDTNode();

   // test event if it decends the tree at this node to the right
   virtual bool GoesRight( const std::vector<double>& inputValues ) const;
   BDTNode* GetRight( void )  {return fRight; };

   // test event if it decends the tree at this node to the left 
   virtual bool GoesLeft ( const std::vector<double>& inputValues ) const;
   BDTNode* GetLeft( void ) { return fLeft; };   

   // return  S/(S+B) (purity) at this node (from  training)

   double GetPurity( void ) const { return fPurity; } 
   // return the node type
   int    GetNodeType( void ) const { return fNodeType; }
   double GetResponse(void) const {return fResponse;}

private:

   BDTNode*   fLeft;     // pointer to the left daughter node
   BDTNode*   fRight;    // pointer to the right daughter node
   int                     fSelector; // index of variable used in node selection (decision tree)   
   double                  fCutValue; // cut value appplied on this node to discriminate bkg against sig
   bool                    fCutType;  // true: if event variable > cutValue ==> signal , false otherwise
   int                     fNodeType; // Type of node: -1 == Bkg-leaf, 1 == Signal-leaf, 0 = internal 
   double                  fPurity;   // Purity of node from training
   double                  fResponse; // Regression response value of node
}; 
   
//_______________________________________________________________________
   BDTNode::~BDTNode()
{
   if (fLeft  != NULL) delete fLeft;
   if (fRight != NULL) delete fRight;
}; 
   
//_______________________________________________________________________
bool BDTNode::GoesRight( const std::vector<double>& inputValues ) const
{
   // test event if it decends the tree at this node to the right
   bool result;
     result = (inputValues[fSelector] > fCutValue );
   if (fCutType == true) return result; //the cuts are selecting Signal ;
   else return !result;
}
   
//_______________________________________________________________________
bool BDTNode::GoesLeft( const std::vector<double>& inputValues ) const
{
   // test event if it decends the tree at this node to the left
   if (!this->GoesRight(inputValues)) return true;
   else return false;
}
   
#endif
   
#ifndef IClassifierReader__def
#define IClassifierReader__def

class IClassifierReader {

 public:

   // constructor
   IClassifierReader() : fStatusIsClean( true ) {}
   virtual ~IClassifierReader() {}

   // return classifier response
   virtual double GetMvaValue( const std::vector<double>& inputValues ) const = 0;

   // returns classifier status
   bool IsStatusClean() const { return fStatusIsClean; }

 protected:

   bool fStatusIsClean;
};

#endif

class ReadBDT : public IClassifierReader {

 public:

   // constructor
   ReadBDT( std::vector<std::string>& theInputVars ) 
      : IClassifierReader(),
        fClassName( "ReadBDT" ),
        fNvars( 10 ),
        fIsNormalised( false )
   {      
      // the training input variables
      const char* inputVars[] = { "(MtdPidTraits_mDeltaY)", "MtdPidTraits_mDeltaZ", "Tracks_mNSigmaPion", "Tracks_mNHitsFit", "Tracks_mDCA", "MtdPidTraits_mCell", "MtdPidTraits_mModule", "MtdPidTraits_mBL", "Tracks_mPt", "Tracks_mCharge" };

      // sanity checks
      if (theInputVars.size() <= 0) {
         std::cout << "Problem in class \"" << fClassName << "\": empty input vector" << std::endl;
         fStatusIsClean = false;
      }

      if (theInputVars.size() != fNvars) {
         std::cout << "Problem in class \"" << fClassName << "\": mismatch in number of input values: "
                   << theInputVars.size() << " != " << fNvars << std::endl;
         fStatusIsClean = false;
      }

      // validate input variables
      for (size_t ivar = 0; ivar < theInputVars.size(); ivar++) {
         if (theInputVars[ivar] != inputVars[ivar]) {
            std::cout << "Problem in class \"" << fClassName << "\": mismatch in input variable names" << std::endl
                      << " for variable [" << ivar << "]: " << theInputVars[ivar].c_str() << " != " << inputVars[ivar] << std::endl;
            fStatusIsClean = false;
         }
      }

      // initialize min and max vectors (for normalisation)
      fVmin[0] = 0;
      fVmax[0] = 0;
      fVmin[1] = 0;
      fVmax[1] = 0;
      fVmin[2] = 0;
      fVmax[2] = 0;
      fVmin[3] = 0;
      fVmax[3] = 0;
      fVmin[4] = 0;
      fVmax[4] = 0;
      fVmin[5] = 0;
      fVmax[5] = 0;
      fVmin[6] = 0;
      fVmax[6] = 0;
      fVmin[7] = 0;
      fVmax[7] = 0;
      fVmin[8] = 0;
      fVmax[8] = 0;
      fVmin[9] = 0;
      fVmax[9] = 0;

      // initialize input variable types
      fType[0] = 'F';
      fType[1] = 'F';
      fType[2] = 'F';
      fType[3] = 'I';
      fType[4] = 'F';
      fType[5] = 'I';
      fType[6] = 'I';
      fType[7] = 'I';
      fType[8] = 'F';
      fType[9] = 'I';

      // initialize constants
      Initialize();

   }

   // destructor
   virtual ~ReadBDT() {
      Clear(); // method-specific
   }

   // the classifier response
   // "inputValues" is a vector of input values in the same order as the 
   // variables given to the constructor
   double GetMvaValue( const std::vector<double>& inputValues ) const;

 private:

   // method-specific destructor
   void Clear();

   // common member variables
   const char* fClassName;

   const size_t fNvars;
   size_t GetNvar()           const { return fNvars; }
   char   GetType( int ivar ) const { return fType[ivar]; }

   // normalisation of input variables
   const bool fIsNormalised;
   bool IsNormalised() const { return fIsNormalised; }
   double fVmin[10];
   double fVmax[10];
   double NormVariable( double x, double xmin, double xmax ) const {
      // normalise to output range: [-1, 1]
      return 2*(x - xmin)/(xmax - xmin) - 1.0;
   }

   // type of input variable: 'F' or 'I'
   char   fType[10];

   // initialize internal variables
   void Initialize();
   double GetMvaValue__( const std::vector<double>& inputValues ) const;

   // private members (method specific)
   std::vector<BDTNode*> fForest;       // i.e. root nodes of decision trees
   std::vector<double>                fBoostWeights; // the weights applied in the individual boosts
};

double ReadBDT::GetMvaValue__( const std::vector<double>& inputValues ) const
{
   double myMVA = 0;
   double norm  = 0;
   for (unsigned int itree=0; itree<fForest.size(); itree++){
      BDTNode *current = fForest[itree];
      while (current->GetNodeType() == 0) { //intermediate node
         if (current->GoesRight(inputValues)) current=(BDTNode*)current->GetRight();
         else current=(BDTNode*)current->GetLeft();
      }
      myMVA += fBoostWeights[itree] *  current->GetNodeType();
      norm  += fBoostWeights[itree];
   }
   return myMVA /= norm;
};

void ReadBDT::Initialize()
{
  // itree = 0
  fBoostWeights.push_back(0.298197827677374);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.6822,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.354696,-99) , 
0, 21.251, 1, 0, 0.657146,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.302041,-99) , 
1, -22.453, 0, 0, 0.628524,-99) , 
NN(
0, 
0, 
-1, -22.786, 0, -1, 0.386736,-99) , 
2, 0.105238, 0, 0, 0.499626,-99)    );
  // itree = 1
  fBoostWeights.push_back(0.240713);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.656066,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.329996,-99) , 
0, 23.2746, 1, 0, 0.629511,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.32349,-99) , 
0, -21.3007, 0, 0, 0.603856,-99) , 
NN(
0, 
0, 
-1, -22.7505, 0, -1, 0.419229,-99) , 
2, 0.0761904, 0, 0, 0.507496,-99)    );
  // itree = 2
  fBoostWeights.push_back(0.289691);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.642458,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.469298,-99) , 
2, -0.368571, 0, 0, 0.588964,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.690866,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.298892,-99) , 
1, 66.8422, 0, 0, 0.376976,-99) , 
1, 17.1696, 1, 0, 0.540331,-99) , 
NN(
0, 
0, 
-1, 0.174286, 0, -1, 0.235252,-99) , 
1, -22.9506, 0, 0, 0.513205,-99)    );
  // itree = 3
  fBoostWeights.push_back(0.262152);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.596915,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.309684,-99) , 
0, -21.3073, 0, 0, 0.577045,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.693316,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.33772,-99) , 
1, 70.5817, 0, 0, 0.397104,-99) , 
1, 17.1936, 1, 0, 0.536251,-99) , 
NN(
0, 
0, 
-1, -33.408, 0, -1, 0.265511,-99) , 
1, -22.8475, 0, 0, 0.512452,-99)    );
  // itree = 4
  fBoostWeights.push_back(0.222391);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.586552,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.419226,-99) , 
5, 2, 0, 0, 0.547532,-99) , 
NN(
0, 
0, 
-1, 9, 1, -1, 0.277648,-99) , 
0, -23.3342, 0, 0, 0.523817,-99) , 
NN(
0, 
0, 
-1, 3, 0, -1, 0.276974,-99) , 
0, 21.2438, 1, 0, 0.499986,-99)    );
  // itree = 5
  fBoostWeights.push_back(0.22162);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.585469,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.337118,-99) , 
0, 21.2373, 1, 0, 0.568983,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.627625,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.385558,-99) , 
1, 65.1147, 0, 0, 0.425634,-99) , 
1, 12.8038, 1, 0, 0.52351,-99) , 
NN(
0, 
0, 
-1, -0.582857, 0, -1, 0.33975,-99) , 
1, -13.6032, 0, 0, 0.493068,-99)    );
  // itree = 6
  fBoostWeights.push_back(0.193913);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.563013,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.365618,-99) , 
0, 16.8424, 1, 0, 0.53344,-99) , 
NN(
0, 
0, 
-1, 0.690952, 0, -1, 0.352818,-99) , 
5, 11, 1, 0, 0.509448,-99) , 
NN(
0, 
0, 
-1, -1.34952, 0, -1, 0.30031,-99) , 
2, -1.05286, 0, 0, 0.487326,-99)    );
  // itree = 7
  fBoostWeights.push_back(0.136477);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 1.03143, 0, 1, 0.603725,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.514965,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.397739,-99) , 
0, -9.1368, 0, 0, 0.484624,-99) , 
3, 44, 0, 0, 0.562853,-99) , 
NN(
0, 
0, 
-1, -15.2291, 0, -1, 0.438689,-99) , 
2, 0.407143, 0, 0, 0.479683,-99)    );
  // itree = 8
  fBoostWeights.push_back(0.196496);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.583552,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.439135,-99) , 
0, 9.64379, 1, 0, 0.541253,-99) , 
NN(
0, 
0, 
-1, -0.3, 0, -1, 0.353095,-99) , 
5, 1, 0, 0, 0.510314,-99) , 
NN(
0, 
0, 
-1, -31.4392, 0, -1, 0.353673,-99) , 
0, -15.2291, 0, 0, 0.487091,-99)    );
  // itree = 9
  fBoostWeights.push_back(0.195323);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.595068,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.441945,-99) , 
0, -13.1311, 0, 0, 0.563906,-99) , 
NN(
0, 
0, 
-1, 19.9768, 1, -1, 0.403872,-99) , 
5, 2, 0, 0, 0.515791,-99) , 
NN(
0, 
0, 
-1, -16.0542, 0, -1, 0.38136,-99) , 
5, 10, 1, 0, 0.486005,-99)    );
  // itree = 10
  fBoostWeights.push_back(0.152339);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.563725,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.452726,-99) , 
5, 10, 1, 0, 0.539466,-99) , 
NN(
0, 
0, 
-1, -29.5947, 0, -1, 0.406429,-99) , 
1, -13.7302, 0, 0, 0.51827,-99) , 
NN(
0, 
0, 
-1, -13.1837, 0, -1, 0.390483,-99) , 
2, -0.607619, 0, 0, 0.488896,-99)    );
  // itree = 11
  fBoostWeights.push_back(0.105304);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 1.42286, 0, 1, 0.640627,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.540949,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.483936,-99) , 
3, 41, 0, 0, 0.512534,-99) , 
3, 44, 0, 0, 0.596039,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506744,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.386269,-99) , 
0, -11.7528, 0, 0, 0.480095,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.277337,-99) , 
0, 27.3238, 1, 0, 0.467412,-99) , 
2, 0.871905, 0, 0, 0.489198,-99)    );
  // itree = 12
  fBoostWeights.push_back(0.0944947);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 1.47905, 0, 1, 0.628333,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.521352,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492887,-99) , 
5, 5, 0, 0, 0.508741,-99) , 
3, 44, 0, 0, 0.586184,-99) , 
NN(
0, 
0, 
-1, -22.7194, 0, -1, 0.461293,-99) , 
2, 0.871905, 0, 0, 0.482402,-99)    );
  // itree = 13
  fBoostWeights.push_back(0.10193);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.525117,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.316559,-99) , 
0, -29.123, 0, 0, 0.514923,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.321395,-99) , 
0, 27.3239, 1, 0, 0.50417,-99) , 
NN(
0, 
0, 
-1, 0.174286, 0, -1, 0.344292,-99) , 
1, -22.8293, 0, 0, 0.490467,-99)    );
  // itree = 14
  fBoostWeights.push_back(0.104742);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0.838571, 0, 1, 0.549242,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.391062,-99) , 
2, -1.01429, 0, 0, 0.534622,-99) , 
NN(
0, 
0, 
-1, 1, 0, -1, 0.449517,-99) , 
3, 45, 0, 0, 0.483289,-99)    );
  // itree = 15
  fBoostWeights.push_back(0.137925);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.551835,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.433367,-99) , 
0, 15.7899, 1, 0, 0.531618,-99) , 
NN(
0, 
0, 
-1, -16.0522, 0, -1, 0.419703,-99) , 
5, 10, 1, 0, 0.502701,-99) , 
NN(
0, 
0, 
-1, 0.637143, 0, -1, 0.386021,-99) , 
5, 1, 0, 0, 0.486237,-99)    );
  // itree = 16
  fBoostWeights.push_back(0.0978367);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 44, 0, 1, 0.581476,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512914,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.438689,-99) , 
5, 3, 0, 0, 0.490044,-99) , 
2, 0.997619, 0, 0, 0.507118,-99) , 
NN(
0, 
0, 
-1, -13.3686, 0, -1, 0.420429,-99) , 
2, -0.514286, 0, 0, 0.484436,-99)    );
  // itree = 17
  fBoostWeights.push_back(0.135448);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.541559,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.459946,-99) , 
0, -9.14949, 0, 0, 0.522167,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.586172,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.3266,-99) , 
1, 62.0379, 0, 0, 0.407681,-99) , 
1, 23.2652, 1, 0, 0.501227,-99) , 
NN(
0, 
0, 
-1, -0.432857, 0, -1, 0.396797,-99) , 
1, -13.7452, 0, 0, 0.484355,-99)    );
  // itree = 18
  fBoostWeights.push_back(0.0745425);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 44, 0, 1, 0.574668,-99) , 
NN(
0, 
0, 
-1, -22.9845, 0, -1, 0.47742,-99) , 
2, 1.05714, 0, 0, 0.490172,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.333224,-99) , 
2, -1.32571, 0, 0, 0.481269,-99)    );
  // itree = 19
  fBoostWeights.push_back(0.0825679);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.519074,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.381619,-99) , 
2, -1.27571, 0, 0, 0.510617,-99) , 
NN(
0, 
0, 
-1, 44, 0, -1, 0.40401,-99) , 
5, 11, 1, 0, 0.495823,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.3103,-99) , 
0, 33.403, 1, 0, 0.48841,-99)    );
  // itree = 20
  fBoostWeights.push_back(0.0991494);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.532183,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.397545,-99) , 
8, 1.19309, 0, 0, 0.522983,-99) , 
NN(
0, 
0, 
-1, -1.23714, 0, -1, 0.42841,-99) , 
2, -0.755238, 0, 0, 0.507879,-99) , 
NN(
0, 
0, 
-1, 1, 0, -1, 0.438948,-99) , 
3, 44, 0, 0, 0.48222,-99)    );
  // itree = 21
  fBoostWeights.push_back(0.0946991);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.51728,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.428963,-99) , 
5, 1, 0, 0, 0.504992,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.574532,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.345761,-99) , 
1, 62.0389, 0, 0, 0.417708,-99) , 
1, 23.323, 1, 0, 0.491028,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.34339,-99) , 
1, -32.1117, 0, 0, 0.483662,-99)    );
  // itree = 22
  fBoostWeights.push_back(0.0773344);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.511187,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.388946,-99) , 
1, -22.8178, 0, 0, 0.50277,-99) , 
NN(
0, 
0, 
-1, 0, 0, -1, 0.418891,-99) , 
0, 11.693, 1, 0, 0.484418,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.34999,-99) , 
0, -27.3861, 0, 0, 0.476758,-99)    );
  // itree = 23
  fBoostWeights.push_back(0.0699214);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.626117,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.481415,-99) , 
1, 69.5787, 0, 0, 0.486474,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.33279,-99) , 
0, 33.3953, 1, 0, 0.480077,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.356713,-99) , 
0, -27.389, 0, 0, 0.473067,-99)    );
  // itree = 24
  fBoostWeights.push_back(0.0799915);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.520396,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.458867,-99) , 
5, 3, 0, 0, 0.500345,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.382717,-99) , 
0, -27.3841, 0, 0, 0.493818,-99) , 
NN(
0, 
0, 
-1, -1.47333, 0, -1, 0.411734,-99) , 
2, -0.89, 0, 0, 0.482472,-99)    );
  // itree = 25
  fBoostWeights.push_back(0.0996614);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.533885,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.456153,-99) , 
0, -7.83272, 0, 0, 0.510455,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.354661,-99) , 
0, 31.0969, 1, 0, 0.500308,-99) , 
NN(
0, 
0, 
-1, 7.42533, 1, -1, 0.436673,-99) , 
5, 9, 1, 0, 0.48154,-99)    );
  // itree = 26
  fBoostWeights.push_back(0.0663557);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 1.65857, 0, 1, 0.560177,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.478955,-99) , 
3, 43, 0, 0, 0.539498,-99) , 
NN(
0, 
0, 
-1, -13.7452, 0, -1, 0.470321,-99) , 
2, 0.871905, 0, 0, 0.481943,-99)    );
  // itree = 27
  fBoostWeights.push_back(0.0696243);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.5163,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.441015,-99) , 
1, 23.4166, 1, 0, 0.505567,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.381925,-99) , 
0, 28.5821, 1, 0, 0.49795,-99) , 
NN(
0, 
0, 
-1, 4.07707, 1, -1, 0.42315,-99) , 
5, 11, 1, 0, 0.487976,-99)    );
  // itree = 28
  fBoostWeights.push_back(0.09248);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.522726,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.463284,-99) , 
0, 9.0912, 1, 0, 0.508579,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.55997,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.369409,-99) , 
1, 58.6126, 0, 0, 0.436727,-99) , 
1, 23.3421, 1, 0, 0.495652,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510311,-99) , 
NN(
0, 
0, 
-1, 1.59388, 1, -1, 0.410679,-99) , 
2, 0.867143, 0, 0, 0.427311,-99) , 
1, -13.6921, 0, 0, 0.484692,-99)    );
  // itree = 29
  fBoostWeights.push_back(0.0682205);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.51459,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.466106,-99) , 
0, 5.6714, 1, 0, 0.496447,-99) , 
NN(
0, 
0, 
-1, -4.13793, 0, -1, 0.426642,-99) , 
5, 1, 0, 0, 0.48616,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.387975,-99) , 
0, -27.3861, 0, 0, 0.480636,-99)    );
  // itree = 30
  fBoostWeights.push_back(0.0571629);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0.79, 0, 1, 0.514488,-99) , 
NN(
0, 
0, 
-1, 11, 1, -1, 0.469714,-99) , 
3, 45, 0, 0, 0.487479,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.38341,-99) , 
1, -32.1068, 0, 0, 0.482384,-99)    );
  // itree = 31
  fBoostWeights.push_back(0.0579287);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506486,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.402025,-99) , 
0, 32.5357, 1, 0, 0.500832,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.522991,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.423674,-99) , 
9, 0, 1, 0, 0.455783,-99) , 
0, -9.14697, 0, 0, 0.489161,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.373042,-99) , 
2, -1.36143, 0, 0, 0.483364,-99)    );
  // itree = 32
  fBoostWeights.push_back(0.0769453);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.523535,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.469457,-99) , 
5, 9, 1, 0, 0.507965,-99) , 
NN(
0, 
0, 
-1, -7.4874, 0, -1, 0.453388,-99) , 
5, 3, 0, 0, 0.48855,-99) , 
NN(
0, 
0, 
-1, 4.07743, 1, -1, 0.42632,-99) , 
5, 11, 1, 0, 0.480353,-99)    );
  // itree = 33
  fBoostWeights.push_back(0.0490844);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.590042,-99) , 
NN(
0, 
0, 
-1, 21.9999, 1, -1, 0.48291,-99) , 
1, 69.6079, 0, 0, 0.486668,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.382057,-99) , 
2, -1.36143, 0, 0, 0.481482,-99)    );
  // itree = 34
  fBoostWeights.push_back(0.0548173);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 44, 0, 1, 0.561809,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.523122,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.482069,-99) , 
3, 44, 0, 0, 0.509091,-99) , 
2, 1.25905, 0, 0, 0.528891,-99) , 
NN(
0, 
0, 
-1, -22.9624, 0, -1, 0.475299,-99) , 
2, 0.682857, 0, 0, 0.487427,-99)    );
  // itree = 35
  fBoostWeights.push_back(0.0721423);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.517795,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.464799,-99) , 
1, -8.29465, 0, 0, 0.504787,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.607442,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.411819,-99) , 
1, 72.7455, 0, 0, 0.44981,-99) , 
1, 23.4168, 1, 0, 0.49617,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.405358,-99) , 
1, -32.0784, 0, 0, 0.491761,-99)    );
  // itree = 36
  fBoostWeights.push_back(0.0562406);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.514346,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.464331,-99) , 
0, -14.1892, 0, 0, 0.505315,-99) , 
NN(
0, 
0, 
-1, -4.13783, 0, -1, 0.450154,-99) , 
5, 1, 0, 0, 0.496503,-99) , 
NN(
0, 
0, 
-1, 4.07696, 1, -1, 0.440099,-99) , 
5, 11, 1, 0, 0.489056,-99)    );
  // itree = 37
  fBoostWeights.push_back(0.0581896);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 44, 0, 1, 0.54041,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.535646,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.478938,-99) , 
6, 1, 1, 0, 0.486714,-99) , 
6, 4, 0, 0, 0.493052,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.377208,-99) , 
2, -1.44571, 0, 0, 0.488364,-99)    );
  // itree = 38
  fBoostWeights.push_back(0.0350163);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 1.68309, 1, 1, 0.556681,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49129,-99) , 
3, 43, 0, 0, 0.539494,-99) , 
NN(
0, 
0, 
-1, -1.45333, 0, -1, 0.48603,-99) , 
2, 1.08286, 0, 0, 0.4923,-99)    );
  // itree = 39
  fBoostWeights.push_back(0.0417004);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.601566,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507813,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.426398,-99) , 
1, 29.8969, 1, 0, 0.500995,-99) , 
1, 69.5581, 0, 0, 0.504472,-99) , 
NN(
0, 
0, 
-1, -1.3481, 0, -1, 0.460389,-99) , 
2, -0.707619, 0, 0, 0.496002,-99)    );
  // itree = 40
  fBoostWeights.push_back(0.0499587);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.517008,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.481361,-99) , 
5, 3, 0, 0, 0.504358,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.41804,-99) , 
2, -1.36143, 0, 0, 0.500126,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503633,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.439308,-99) , 
0, -8.86192, 0, 0, 0.475081,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.410293,-99) , 
0, 4.07783, 1, 0, 0.449739,-99) , 
5, 11, 1, 0, 0.493483,-99)    );
  // itree = 41
  fBoostWeights.push_back(0.0305852);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.59726,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500721,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.419462,-99) , 
1, 27.6937, 1, 0, 0.492266,-99) , 
1, 72.6429, 0, 0, 0.495489,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.414543,-99) , 
1, -32.2388, 0, 0, 0.491586,-99)    );
  // itree = 42
  fBoostWeights.push_back(0.0455244);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.585303,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50486,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.4356,-99) , 
1, -17.6602, 0, 0, 0.495094,-99) , 
NN(
0, 
0, 
-1, 1.56271, 1, -1, 0.429932,-99) , 
1, 22.0191, 1, 0, 0.486755,-99) , 
1, 69.6344, 0, 0, 0.490134,-99)    );
  // itree = 43
  fBoostWeights.push_back(0.0365673);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.576588,-99) , 
NN(
NN(
0, 
0, 
-1, -18.458, 0, -1, 0.489589,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500519,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.343121,-99) , 
8, 1.50996, 1, 0, 0.421699,-99) , 
1, 29.8871, 1, 0, 0.483865,-99) , 
1, 69.5453, 0, 0, 0.487084,-99)    );
  // itree = 44
  fBoostWeights.push_back(0.0293348);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.560409,-99) , 
NN(
0, 
0, 
-1, 30.3958, 1, -1, 0.49142,-99) , 
1, 60.3759, 0, 0, 0.494878,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.401841,-99) , 
2, -1.44571, 0, 0, 0.49115,-99)    );
  // itree = 45
  fBoostWeights.push_back(0.0515156);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.513853,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.43165,-99) , 
8, 1.19309, 0, 0, 0.508037,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.515156,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.462803,-99) , 
3, 35, 1, 0, 0.476512,-99) , 
3, 44, 0, 0, 0.496541,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.409968,-99) , 
2, -1.39571, 0, 0, 0.492652,-99)    );
  // itree = 46
  fBoostWeights.push_back(0.0413817);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507749,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.413607,-99) , 
0, -27.3867, 0, 0, 0.503029,-99) , 
NN(
0, 
0, 
-1, 1.15602, 0, -1, 0.441637,-99) , 
8, 1.25154, 0, 0, 0.495115,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.407706,-99) , 
2, -1.44571, 0, 0, 0.491633,-99)    );
  // itree = 47
  fBoostWeights.push_back(0.0333975);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 6, 1, 1, 0.554406,-99) , 
NN(
0, 
0, 
-1, 9, 1, -1, 0.488425,-99) , 
2, 1.47857, 0, 0, 0.492139,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.412309,-99) , 
2, -1.47857, 0, 0, 0.489206,-99)    );
  // itree = 48
  fBoostWeights.push_back(0.0517801);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 44, 0, 1, 0.547085,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.519291,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.479579,-99) , 
5, 4, 0, 0, 0.498056,-99) , 
NN(
0, 
0, 
-1, 7.42608, 1, -1, 0.465347,-99) , 
5, 9, 1, 0, 0.488474,-99) , 
2, 1.33714, 0, 0, 0.492698,-99)    );
  // itree = 49
  fBoostWeights.push_back(0.0247364);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.558008,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500728,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.409302,-99) , 
1, 30.4409, 1, 0, 0.494633,-99) , 
1, 60.3882, 0, 0, 0.497789,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.437102,-99) , 
2, -1.29143, 0, 0, 0.494298,-99)    );
  // itree = 50
  fBoostWeights.push_back(0.0266429);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.593848,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495663,-99) , 
1, 69.6359, 0, 0, 0.499027,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.419221,-99) , 
0, -31.4328, 0, 0, 0.495553,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.417929,-99) , 
0, 33.4035, 1, 0, 0.492599,-99)    );
  // itree = 51
  fBoostWeights.push_back(0.023165);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.555454,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500821,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.415809,-99) , 
1, 30.4041, 1, 0, 0.495137,-99) , 
1, 60.3412, 0, 0, 0.49816,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.425696,-99) , 
2, -1.42429, 0, 0, 0.495141,-99)    );
  // itree = 52
  fBoostWeights.push_back(0.0561215);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.518993,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.477492,-99) , 
1, -7.53399, 0, 0, 0.505558,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.511134,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.432146,-99) , 
8, 1.56007, 1, 0, 0.472373,-99) , 
1, 10.9801, 1, 0, 0.4953,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.430422,-99) , 
1, -32.2194, 0, 0, 0.49221,-99)    );
  // itree = 53
  fBoostWeights.push_back(0.0286059);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.550134,-99) , 
NN(
0, 
0, 
-1, 30.3947, 1, -1, 0.487586,-99) , 
1, 60.3291, 0, 0, 0.490712,-99)    );
  // itree = 54
  fBoostWeights.push_back(0.0238184);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.568248,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497017,-99) , 
1, 60.4204, 0, 0, 0.500482,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.418752,-99) , 
0, -31.4392, 0, 0, 0.496962,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.424448,-99) , 
0, 33.4028, 1, 0, 0.494205,-99)    );
  // itree = 55
  fBoostWeights.push_back(0.0290466);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506723,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.434621,-99) , 
1, -32.0784, 0, 0, 0.50363,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.421841,-99) , 
0, -31.4296, 0, 0, 0.500063,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.427258,-99) , 
0, 33.4061, 1, 0, 0.497327,-99)    );
  // itree = 56
  fBoostWeights.push_back(0.0691367);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.523036,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.461505,-99) , 
5, 11, 1, 0, 0.512766,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.529022,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.451979,-99) , 
9, 0, 1, 0, 0.476913,-99) , 
0, -7.40959, 0, 0, 0.500133,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.524015,-99) , 
NN(
0, 
0, 
-1, 0.374286, 0, -1, 0.433292,-99) , 
9, 0, 0, 0, 0.4631,-99) , 
0, 15.1682, 1, 0, 0.494633,-99)    );
  // itree = 57
  fBoostWeights.push_back(0.045318);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.558121,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.521151,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495513,-99) , 
8, 1.72925, 1, 0, 0.512968,-99) , 
2, 0.522857, 0, 0, 0.527603,-99) , 
NN(
NN(
0, 
0, 
-1, 0.805714, 0, 1, 0.523867,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.55277,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.479815,-99) , 
1, 69.6568, 0, 0, 0.482508,-99) , 
6, 1, 1, 0, 0.488109,-99) , 
6, 4, 0, 0, 0.492759,-99)    );
  // itree = 58
  fBoostWeights.push_back(0.0464221);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.520834,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.485837,-99) , 
8, 1.65152, 1, 0, 0.505404,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.513945,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.457071,-99) , 
3, 36, 1, 0, 0.480155,-99) , 
3, 43, 0, 0, 0.498793,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.432591,-99) , 
2, -1.44571, 0, 0, 0.496166,-99)    );
  // itree = 59
  fBoostWeights.push_back(0.0655012);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.523265,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.437124,-99) , 
8, 1.32245, 0, 0, 0.508062,-99) , 
NN(
0, 
0, 
-1, 0.00857149, 0, -1, 0.464907,-99) , 
1, -17.6601, 0, 0, 0.501361,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.515062,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.471015,-99) , 
2, -0.062381, 0, 0, 0.49479,-99) , 
NN(
0, 
0, 
-1, 33.9021, 0, -1, 0.409808,-99) , 
8, 1.7699, 1, 0, 0.474298,-99) , 
1, 14.0834, 1, 0, 0.494831,-99)    );
  // itree = 60
  fBoostWeights.push_back(0.0538854);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.562368,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495399,-99) , 
3, 44, 0, 0, 0.536567,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.516316,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.478168,-99) , 
0, -4.80726, 0, 0, 0.497232,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.52513,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.444493,-99) , 
9, 0, 0, 0, 0.471228,-99) , 
0, 9.08743, 1, 0, 0.490489,-99) , 
2, 1.34857, 0, 0, 0.49375,-99)    );
  // itree = 61
  fBoostWeights.push_back(0.056948);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.51474,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.419662,-99) , 
0, -29.1236, 0, 0, 0.509233,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.517761,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.417129,-99) , 
0, -11.7547, 1, 0, 0.453981,-99) , 
8, 1.28124, 0, 0, 0.500987,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.514205,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.436241,-99) , 
5, 1, 0, 0, 0.4985,-99) , 
NN(
0, 
0, 
-1, 1.5253, 1, -1, 0.424625,-99) , 
5, 8, 1, 0, 0.476479,-99) , 
0, 9.08617, 1, 0, 0.494621,-99)    );
  // itree = 62
  fBoostWeights.push_back(0.0354985);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 4.84326, 1, 1, 0.535769,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.534678,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.486758,-99) , 
1, 60.3509, 0, 0, 0.489141,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.436306,-99) , 
2, -1.41286, 0, 0, 0.486744,-99) , 
2, 1.40143, 0, 0, 0.489791,-99)    );
  // itree = 63
  fBoostWeights.push_back(0.0503972);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.540937,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494777,-99) , 
8, 1.54374, 0, 0, 0.522901,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505664,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.451015,-99) , 
8, 1.67569, 1, 0, 0.485289,-99) , 
1, -4.76633, 0, 0, 0.5017,-99) , 
NN(
NN(
0, 
0, 
-1, 14, 1, 1, 0.529198,-99) , 
NN(
0, 
0, 
-1, 30.0786, 1, -1, 0.473715,-99) , 
1, 57.7536, 0, 0, 0.48073,-99) , 
1, 4.91988, 1, 0, 0.492711,-99)    );
  // itree = 64
  fBoostWeights.push_back(0.0306943);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0.698571, 0, 1, 0.524445,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506565,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.484708,-99) , 
6, 2, 1, 0, 0.493868,-99) , 
6, 4, 0, 0, 0.497529,-99) , 
NN(
0, 
0, 
-1, -1.47143, 0, -1, 0.458222,-99) , 
2, -1.17286, 0, 0, 0.494542,-99)    );
  // itree = 65
  fBoostWeights.push_back(0.0447485);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.523524,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.451871,-99) , 
8, 1.18724, 0, 0, 0.514773,-99) , 
NN(
0, 
0, 
-1, 15.1629, 1, -1, 0.485934,-99) , 
8, 1.65154, 1, 0, 0.501973,-99) , 
NN(
NN(
0, 
0, 
-1, 19, 0, 1, 0.516537,-99) , 
NN(
0, 
0, 
-1, 1.25332, 0, -1, 0.47348,-99) , 
3, 31, 1, 0, 0.481437,-99) , 
3, 44, 0, 0, 0.49437,-99)    );
  // itree = 66
  fBoostWeights.push_back(0.0414017);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.520297,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.487323,-99) , 
0, -5.79671, 0, 0, 0.50526,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502866,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.413733,-99) , 
8, 1.76993, 1, 0, 0.481805,-99) , 
0, 10.9729, 1, 0, 0.499693,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512402,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.46978,-99) , 
0, -8.8636, 0, 0, 0.493648,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.436588,-99) , 
0, 4.07683, 1, 0, 0.471274,-99) , 
5, 11, 1, 0, 0.495948,-99)    );
  // itree = 67
  fBoostWeights.push_back(0.0326546);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506071,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.456113,-99) , 
1, -28.2412, 0, 0, 0.502778,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.529336,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.432624,-99) , 
1, 55.0854, 0, 0, 0.47157,-99) , 
1, 23.3419, 1, 0, 0.498303,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.444516,-99) , 
0, 33.4039, 1, 0, 0.496291,-99)    );
  // itree = 68
  fBoostWeights.push_back(0.037477);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.519629,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49044,-99) , 
5, 4, 0, 0, 0.502443,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504345,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.433503,-99) , 
0, 6.58519, 1, 0, 0.483379,-99) , 
5, 8, 1, 0, 0.495565,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.438239,-99) , 
2, -1.44571, 0, 0, 0.493302,-99)    );
  // itree = 69
  fBoostWeights.push_back(0.0525527);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.515685,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.433789,-99) , 
8, 1.16103, 0, 0, 0.508213,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501207,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.399575,-99) , 
0, 14.7595, 1, 0, 0.485138,-99) , 
8, 1.67538, 1, 0, 0.498987,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.525832,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.446419,-99) , 
0, -19.1314, 0, 0, 0.504112,-99) , 
NN(
0, 
0, 
-1, 6.228, 1, -1, 0.441491,-99) , 
0, 3.2328, 1, 0, 0.477916,-99) , 
5, 9, 1, 0, 0.492816,-99)    );
  // itree = 70
  fBoostWeights.push_back(0.0391231);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.539822,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496539,-99) , 
1, 5.0951, 1, 0, 0.512896,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512006,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.46586,-99) , 
8, 1.59004, 1, 0, 0.490438,-99) , 
1, -4.5881, 0, 0, 0.505751,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504753,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.477847,-99) , 
5, 11, 1, 0, 0.501237,-99) , 
NN(
0, 
0, 
-1, 43, 0, -1, 0.472642,-99) , 
7, 22, 0, 0, 0.483194,-99) , 
7, 7, 1, 0, 0.489941,-99)    );
  // itree = 71
  fBoostWeights.push_back(0.0310382);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 1.59332, 1, 1, 0.517161,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504168,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.483108,-99) , 
7, 5, 1, 0, 0.496364,-99) , 
3, 45, 0, 0, 0.504812,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.531189,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498752,-99) , 
3, 39, 1, 0, 0.50426,-99) , 
NN(
0, 
0, 
-1, 43, 0, -1, 0.478961,-99) , 
7, 26, 0, 0, 0.485514,-99) , 
7, 10, 1, 0, 0.492157,-99)    );
  // itree = 72
  fBoostWeights.push_back(0.0311779);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.550907,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505741,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.481249,-99) , 
1, 8.84515, 1, 0, 0.498181,-99) , 
1, 51.0976, 0, 0, 0.502315,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50282,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.43386,-99) , 
1, 32.5063, 1, 0, 0.497054,-99) , 
NN(
0, 
0, 
-1, 43, 0, -1, 0.470852,-99) , 
6, 2, 1, 0, 0.485903,-99) , 
6, 3, 0, 0, 0.491861,-99)    );
  // itree = 73
  fBoostWeights.push_back(0.0369974);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.556999,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507449,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.485587,-99) , 
8, 1.52154, 1, 0, 0.4945,-99) , 
2, 1.53333, 0, 0, 0.497342,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.518935,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.480699,-99) , 
2, -0.448571, 1, 0, 0.494448,-99) , 
NN(
0, 
0, 
-1, 42, 0, -1, 0.451712,-99) , 
3, 39, 1, 0, 0.475945,-99) , 
3, 43, 0, 0, 0.491619,-99)    );
  // itree = 74
  fBoostWeights.push_back(0.0244963);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 1.67711, 1, 1, 0.5357,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.48448,-99) , 
3, 43, 0, 0, 0.521788,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501058,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.482533,-99) , 
2, 0.09, 1, 0, 0.492952,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.447921,-99) , 
2, -1.39048, 0, 0, 0.490728,-99) , 
2, 1.20857, 0, 0, 0.493616,-99)    );
  // itree = 75
  fBoostWeights.push_back(0.0285707);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 1.63084, 1, 1, 0.51884,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.480167,-99) , 
3, 42, 0, 0, 0.510958,-99) , 
NN(
0, 
0, 
-1, 27.3256, 1, -1, 0.487193,-99) , 
2, 0.654286, 0, 0, 0.492815,-99)    );
  // itree = 76
  fBoostWeights.push_back(0.0270889);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 51.182, 0, 1, 0.509363,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.513173,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.486688,-99) , 
6, 1, 1, 0, 0.491769,-99) , 
6, 3, 0, 0, 0.498193,-99) , 
NN(
0, 
0, 
-1, -1.47143, 0, -1, 0.465891,-99) , 
2, -1.17286, 0, 0, 0.495743,-99)    );
  // itree = 77
  fBoostWeights.push_back(0.0312007);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.527763,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497033,-99) , 
8, 1.54102, 1, 0, 0.507784,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.469915,-99) , 
8, 1.23042, 0, 0, 0.504219,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.524534,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.475086,-99) , 
2, 0.130476, 1, 0, 0.50551,-99) , 
NN(
0, 
0, 
-1, -0.89619, 0, -1, 0.484873,-99) , 
3, 37, 1, 0, 0.489041,-99) , 
3, 45, 0, 0, 0.49507,-99)    );
  // itree = 78
  fBoostWeights.push_back(0.0166911);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.534034,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.542293,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496577,-99) , 
1, 69.6359, 0, 0, 0.498128,-99) , 
2, 1.45857, 0, 0, 0.50029,-99) , 
NN(
0, 
0, 
-1, -1.47143, 0, -1, 0.469241,-99) , 
2, -1.17286, 0, 0, 0.497936,-99)    );
  // itree = 79
  fBoostWeights.push_back(0.0267228);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.508935,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.469845,-99) , 
8, 1.23026, 0, 0, 0.505007,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502776,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.471852,-99) , 
3, 38, 1, 0, 0.487321,-99) , 
3, 43, 0, 0, 0.500387,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.460264,-99) , 
2, -1.42429, 0, 0, 0.498719,-99)    );
  // itree = 80
  fBoostWeights.push_back(0.0132206);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.559111,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498293,-99) , 
1, 72.6429, 0, 0, 0.500141,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.458612,-99) , 
1, -32.2388, 0, 0, 0.498258,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.456564,-99) , 
0, 33.4014, 1, 0, 0.496691,-99)    );
  // itree = 81
  fBoostWeights.push_back(0.0354238);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 4, 0, 1, 0.511081,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506438,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.453793,-99) , 
0, 6.58441, 1, 0, 0.490933,-99) , 
5, 8, 1, 0, 0.50266,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.532736,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.46048,-99) , 
0, 8.80216, 1, 0, 0.500759,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.452137,-99) , 
0, -4.13805, 0, 0, 0.481721,-99) , 
5, 1, 0, 0, 0.499756,-99)    );
  // itree = 82
  fBoostWeights.push_back(0.0355237);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, -9.12119, 0, 1, 0.520077,-99) , 
NN(
0, 
0, 
-1, 1.75096, 1, -1, 0.490275,-99) , 
1, 5.24951, 1, 0, 0.501379,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.518589,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.474755,-99) , 
1, -13.2646, 1, 0, 0.498301,-99) , 
NN(
0, 
0, 
-1, -17.6371, 0, -1, 0.466062,-99) , 
8, 1.67569, 1, 0, 0.486259,-99) , 
1, -4.44833, 0, 0, 0.4964,-99)    );
  // itree = 83
  fBoostWeights.push_back(0.0292252);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 1.71905, 0, 1, 0.513733,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.478915,-99) , 
3, 36, 0, 0, 0.510397,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505171,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.434364,-99) , 
1, -22.7505, 0, 0, 0.499293,-99) , 
NN(
0, 
0, 
-1, 1.76935, 1, -1, 0.472462,-99) , 
2, 0.110952, 1, 0, 0.492361,-99) , 
2, 0.554286, 0, 0, 0.497276,-99)    );
  // itree = 84
  fBoostWeights.push_back(0.0521147);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.525817,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.439255,-99) , 
8, 1.27299, 0, 0, 0.515254,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512475,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.460769,-99) , 
8, 1.56261, 1, 0, 0.487373,-99) , 
1, 10.2035, 1, 0, 0.502342,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512367,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.477548,-99) , 
1, -13.1397, 1, 0, 0.496334,-99) , 
NN(
0, 
0, 
-1, -17.5364, 0, -1, 0.469156,-99) , 
8, 1.67569, 1, 0, 0.486137,-99) , 
1, -4.33093, 0, 0, 0.496956,-99)    );
  // itree = 85
  fBoostWeights.push_back(0.021724);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503752,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.46667,-99) , 
8, 1.27966, 0, 0, 0.498254,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.45581,-99) , 
0, -31.4266, 0, 0, 0.496417,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.459631,-99) , 
0, 33.4071, 1, 0, 0.495023,-99)    );
  // itree = 86
  fBoostWeights.push_back(0.0231761);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.534452,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.522978,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491482,-99) , 
1, 60.4109, 0, 0, 0.493062,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.461206,-99) , 
2, -1.31429, 0, 0, 0.491279,-99) , 
2, 1.75333, 0, 0, 0.49254,-99)    );
  // itree = 87
  fBoostWeights.push_back(0.0199075);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50472,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.473312,-99) , 
8, 1.21895, 0, 0, 0.501838,-99) , 
NN(
0, 
0, 
-1, 39, 1, -1, 0.486211,-99) , 
3, 43, 0, 0, 0.497743,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.456744,-99) , 
2, -1.44571, 0, 0, 0.496125,-99)    );
  // itree = 88
  fBoostWeights.push_back(0.0121823);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.534616,-99) , 
NN(
0, 
0, 
-1, 29.9346, 1, -1, 0.496511,-99) , 
1, 69.6079, 0, 0, 0.497809,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.466409,-99) , 
2, -1.32571, 0, 0, 0.496142,-99)    );
  // itree = 89
  fBoostWeights.push_back(0.0243382);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.533847,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.509829,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.487442,-99) , 
5, 10, 1, 0, 0.504882,-99) , 
3, 40, 1, 0, 0.510373,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512836,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496742,-99) , 
5, 8, 1, 0, 0.507041,-99) , 
NN(
0, 
0, 
-1, 43, 0, -1, 0.487614,-99) , 
7, 5, 1, 0, 0.492603,-99) , 
7, 26, 0, 0, 0.495609,-99)    );
  // itree = 90
  fBoostWeights.push_back(0.0234238);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.528714,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.518816,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493648,-99) , 
2, -0.297143, 0, 0, 0.505963,-99) , 
2, 0.332857, 0, 0, 0.515173,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504339,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.480617,-99) , 
1, -10.4977, 0, 0, 0.498818,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.509255,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.428809,-99) , 
1, 54.2472, 0, 0, 0.474194,-99) , 
1, 32.6657, 1, 0, 0.496308,-99) , 
6, 4, 0, 0, 0.49852,-99)    );
  // itree = 91
  fBoostWeights.push_back(0.0200908);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 1.59387, 1, 1, 0.524342,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495592,-99) , 
2, -0.285714, 0, 0, 0.515462,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501435,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.480251,-99) , 
1, -10.5374, 0, 0, 0.496516,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.509184,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.424556,-99) , 
1, 54.1779, 0, 0, 0.472411,-99) , 
1, 32.6064, 1, 0, 0.494068,-99) , 
6, 4, 0, 0, 0.496568,-99)    );
  // itree = 92
  fBoostWeights.push_back(0.0150844);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.540898,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497482,-99) , 
1, 69.5861, 0, 0, 0.498979,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.471458,-99) , 
0, 28.5824, 1, 0, 0.497311,-99) , 
NN(
0, 
0, 
-1, 0.302807, 1, -1, 0.47786,-99) , 
5, 11, 1, 0, 0.494759,-99)    );
  // itree = 93
  fBoostWeights.push_back(0.0140035);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.543195,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.514934,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499573,-99) , 
1, 5.39747, 0, 0, 0.506536,-99) , 
2, 0.645714, 0, 0, 0.516491,-99) , 
NN(
NN(
0, 
0, 
-1, 27.3241, 1, -1, 0.4974,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504567,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.429998,-99) , 
1, 54.2798, 0, 0, 0.471997,-99) , 
1, 32.7145, 1, 0, 0.494819,-99) , 
6, 4, 0, 0, 0.497346,-99)    );
  // itree = 94
  fBoostWeights.push_back(0.0208028);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.508193,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492533,-99) , 
5, 8, 1, 0, 0.501624,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502643,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.459462,-99) , 
0, -4.13805, 0, 0, 0.485732,-99) , 
5, 1, 0, 0, 0.49942,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.460731,-99) , 
2, -1.44571, 0, 0, 0.4979,-99)    );
  // itree = 95
  fBoostWeights.push_back(0.0224914);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505075,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.473964,-99) , 
1, -29.0062, 0, 0, 0.503227,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.522455,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.419589,-99) , 
1, 54.2234, 0, 0, 0.479346,-99) , 
1, 32.6451, 1, 0, 0.500811,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.46748,-99) , 
0, 33.4028, 1, 0, 0.499553,-99)    );
  // itree = 96
  fBoostWeights.push_back(0.0363924);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505229,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.459757,-99) , 
0, -26.2263, 0, 0, 0.502503,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.529473,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.440942,-99) , 
1, 55.1786, 0, 0, 0.477439,-99) , 
1, 23.505, 1, 0, 0.499105,-99) , 
NN(
NN(
0, 
0, 
-1, 15, 1, 1, 0.533507,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504151,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.401644,-99) , 
9, 0, 0, 0, 0.440042,-99) , 
8, 1.47174, 1, 0, 0.481916,-99) , 
0, 15.1674, 1, 0, 0.496559,-99)    );
  // itree = 97
  fBoostWeights.push_back(0.0244335);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.530859,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512354,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.487954,-99) , 
8, 1.53877, 1, 0, 0.498357,-99) , 
6, 4, 0, 0, 0.502616,-99) , 
NN(
0, 
0, 
-1, 0.110952, 1, -1, 0.488688,-99) , 
2, 0.554286, 0, 0, 0.49248,-99)    );
  // itree = 98
  fBoostWeights.push_back(0.0140916);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.523247,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501593,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490566,-99) , 
2, 0.0766667, 1, 0, 0.49627,-99) , 
2, 1.69952, 0, 0, 0.497213,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.470405,-99) , 
2, -1.39571, 0, 0, 0.496029,-99)    );
  // itree = 99
  fBoostWeights.push_back(0.0183353);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.52688,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499981,-99) , 
1, 50.9947, 0, 0, 0.501715,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.509096,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.466756,-99) , 
0, 0.304661, 1, 0, 0.484395,-99) , 
5, 11, 1, 0, 0.499072,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.522842,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.463019,-99) , 
0, 8.80211, 1, 0, 0.496469,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.456306,-99) , 
0, -4.13805, 0, 0, 0.480644,-99) , 
5, 1, 0, 0, 0.49651,-99)    );
  // itree = 100
  fBoostWeights.push_back(0.0417067);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.511353,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.462078,-99) , 
8, 1.18361, 0, 0, 0.506585,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500603,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.4222,-99) , 
0, -12.9222, 0, 0, 0.487011,-99) , 
8, 1.76918, 1, 0, 0.500976,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.534852,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.4437,-99) , 
0, 18.6488, 1, 0, 0.509842,-99) , 
NN(
0, 
0, 
-1, 1.38438, 1, -1, 0.451886,-99) , 
0, -3.92556, 0, 0, 0.486429,-99) , 
5, 2, 0, 0, 0.497605,-99)    );
  // itree = 101
  fBoostWeights.push_back(0.0226131);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 1.49173, 1, 1, 0.519424,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496035,-99) , 
2, -0.138571, 0, 0, 0.510654,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.513469,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491569,-99) , 
6, 1, 1, 0, 0.494724,-99) , 
NN(
0, 
0, 
-1, 54.2797, 0, -1, 0.472652,-99) , 
1, 32.7145, 1, 0, 0.492492,-99) , 
6, 4, 0, 0, 0.494623,-99)    );
  // itree = 102
  fBoostWeights.push_back(0.0136058);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.520949,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497994,-99) , 
1, 50.9947, 0, 0, 0.499474,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507422,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.46934,-99) , 
0, -0.363765, 0, 0, 0.485079,-99) , 
5, 1, 0, 0, 0.497477,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.466322,-99) , 
2, -1.44571, 0, 0, 0.496249,-99)    );
  // itree = 103
  fBoostWeights.push_back(0.014479);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501435,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.469583,-99) , 
0, -29.12, 0, 0, 0.499977,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.471831,-99) , 
0, 27.3254, 1, 0, 0.498529,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.525924,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.484813,-99) , 
6, 3, 0, 0, 0.502918,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.442807,-99) , 
1, 51.1641, 0, 0, 0.479976,-99) , 
1, 32.6657, 1, 0, 0.496574,-99)    );
  // itree = 104
  fBoostWeights.push_back(0.0331383);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.513372,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.484244,-99) , 
0, 5.94965, 1, 0, 0.503349,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506314,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.453529,-99) , 
0, -6.64508, 0, 0, 0.490643,-99) , 
5, 4, 0, 0, 0.497832,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502906,-99) , 
NN(
0, 
0, 
-1, 45, 0, -1, 0.466744,-99) , 
0, 0.303022, 1, 0, 0.481789,-99) , 
5, 11, 1, 0, 0.495725,-99)    );
  // itree = 105
  fBoostWeights.push_back(0.0140015);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.519063,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499704,-99) , 
2, 1.05286, 0, 0, 0.502365,-99) , 
NN(
0, 
0, 
-1, 2, 1, -1, 0.492706,-99) , 
6, 3, 0, 0, 0.496226,-99) , 
NN(
0, 
0, 
-1, -1.47143, 0, -1, 0.476753,-99) , 
2, -1.17286, 0, 0, 0.494766,-99)    );
  // itree = 106
  fBoostWeights.push_back(0.0222905);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505972,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.487995,-99) , 
8, 1.78137, 1, 0, 0.50096,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501639,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.480319,-99) , 
3, 36, 1, 0, 0.488833,-99) , 
3, 43, 0, 0, 0.497856,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510776,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.46929,-99) , 
5, 9, 1, 0, 0.493201,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.455111,-99) , 
5, 3, 0, 0, 0.481329,-99) , 
2, -0.941429, 0, 0, 0.495823,-99)    );
  // itree = 107
  fBoostWeights.push_back(0.0202934);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506318,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488693,-99) , 
5, 11, 1, 0, 0.503594,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502606,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.484101,-99) , 
7, 21, 0, 0, 0.492584,-99) , 
7, 10, 1, 0, 0.496361,-99) , 
NN(
0, 
0, 
-1, -0.363518, 0, -1, 0.481929,-99) , 
5, 1, 0, 0, 0.494366,-99)    );
  // itree = 108
  fBoostWeights.push_back(0.0127474);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 13.8101, 0, 1, 0.510461,-99) , 
NN(
0, 
0, 
-1, 32.5798, 1, -1, 0.49533,-99) , 
6, 4, 0, 0, 0.497115,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.468602,-99) , 
2, -1.44571, 0, 0, 0.495997,-99)    );
  // itree = 109
  fBoostWeights.push_back(0.0232286);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.509349,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.487039,-99) , 
0, 15.165, 1, 0, 0.506371,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.525219,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.46593,-99) , 
8, 1.49556, 1, 0, 0.490242,-99) , 
1, 14.1188, 1, 0, 0.502486,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504403,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492143,-99) , 
7, 5, 1, 0, 0.494758,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501256,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.462533,-99) , 
3, 41, 1, 0, 0.477864,-99) , 
2, -0.883809, 0, 0, 0.492221,-99) , 
3, 45, 0, 0, 0.496286,-99)    );
  // itree = 110
  fBoostWeights.push_back(0.0250292);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.52136,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496668,-99) , 
0, -9.15373, 1, 0, 0.503847,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505324,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.459612,-99) , 
0, -6.64677, 0, 0, 0.491782,-99) , 
5, 4, 0, 0, 0.49861,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502506,-99) , 
NN(
0, 
0, 
-1, 1.53554, 0, -1, 0.470835,-99) , 
0, 0.30279, 1, 0, 0.484005,-99) , 
5, 11, 1, 0, 0.496696,-99)    );
  // itree = 111
  fBoostWeights.push_back(0.0371745);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.513793,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.471054,-99) , 
0, -31.4215, 0, 0, 0.509176,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.526912,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.476062,-99) , 
9, 0, 0, 0, 0.488661,-99) , 
0, 4.26045, 1, 0, 0.501284,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50598,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.458103,-99) , 
0, 24.592, 1, 0, 0.499074,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.44751,-99) , 
0, -11.0494, 0, 0, 0.490657,-99) , 
5, 4, 0, 0, 0.49727,-99)    );
  // itree = 112
  fBoostWeights.push_back(0.0325872);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 16.8443, 0, 1, 0.513573,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502099,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.47869,-99) , 
0, 5.32644, 1, 0, 0.494082,-99) , 
5, 7, 1, 0, 0.500221,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.518104,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.459397,-99) , 
0, 26.0595, 1, 0, 0.505973,-99) , 
NN(
0, 
0, 
-1, -11.0496, 0, -1, 0.469435,-99) , 
0, -2.24406, 0, 0, 0.489231,-99) , 
5, 4, 0, 0, 0.496082,-99)    );
  // itree = 113
  fBoostWeights.push_back(0.0161737);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.514371,-99) , 
NN(
0, 
0, 
-1, 30.0409, 1, -1, 0.492135,-99) , 
1, 69.67, 0, 0, 0.492891,-99)    );
  // itree = 114
  fBoostWeights.push_back(0.0116822);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.518579,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499022,-99) , 
1, 51.1138, 0, 0, 0.500276,-99) , 
NN(
0, 
0, 
-1, 45, 0, -1, 0.485974,-99) , 
5, 11, 1, 0, 0.498099,-99) , 
NN(
0, 
0, 
-1, -0.364289, 0, -1, 0.482206,-99) , 
5, 1, 0, 0, 0.4959,-99)    );
  // itree = 115
  fBoostWeights.push_back(0.018225);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504306,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.485882,-99) , 
1, -16.6636, 0, 0, 0.501819,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.47696,-99) , 
0, -27.3821, 0, 0, 0.500577,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.531846,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495148,-99) , 
1, 73.1862, 0, 0, 0.510766,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.444506,-99) , 
1, 51.1641, 0, 0, 0.485291,-99) , 
1, 32.6657, 1, 0, 0.498974,-99)    );
  // itree = 116
  fBoostWeights.push_back(0.0147969);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 1.56254, 1, 1, 0.50838,-99) , 
NN(
0, 
0, 
-1, 7.84395, 1, -1, 0.49582,-99) , 
6, 1, 1, 0, 0.497424,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.527483,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490023,-99) , 
7, 11, 1, 0, 0.50459,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.448582,-99) , 
1, 51.0231, 0, 0, 0.48305,-99) , 
1, 32.5177, 1, 0, 0.495905,-99)    );
  // itree = 117
  fBoostWeights.push_back(0.0119787);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.522058,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.525216,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49743,-99) , 
1, 69.5581, 0, 0, 0.498367,-99) , 
0, 24.1754, 0, 0, 0.49987,-99) , 
NN(
0, 
0, 
-1, -0.363647, 0, -1, 0.484877,-99) , 
5, 1, 0, 0, 0.497796,-99)    );
  // itree = 118
  fBoostWeights.push_back(0.0188993);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.51131,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49972,-99) , 
1, -2.00631, 0, 0, 0.504298,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503348,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.461701,-99) , 
8, 1.77003, 1, 0, 0.49259,-99) , 
1, 7.97041, 1, 0, 0.501016,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.5275,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.487162,-99) , 
6, 3, 0, 0, 0.504865,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.447601,-99) , 
1, 51.1053, 0, 0, 0.482987,-99) , 
1, 32.6189, 1, 0, 0.49912,-99)    );
  // itree = 119
  fBoostWeights.push_back(0.0314671);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512895,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.481447,-99) , 
1, -19.368, 0, 0, 0.507524,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504128,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.471553,-99) , 
8, 1.17664, 0, 0, 0.486338,-99) , 
8, 1.24705, 0, 0, 0.504927,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.513834,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488781,-99) , 
1, 18.0514, 0, 0, 0.500361,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.509387,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.449488,-99) , 
1, 13.6341, 1, 0, 0.478246,-99) , 
8, 1.75411, 1, 0, 0.494106,-99) , 
1, 4.82491, 1, 0, 0.500258,-99)    );
  // itree = 120
  fBoostWeights.push_back(0.016857);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.537505,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.513697,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496137,-99) , 
6, 2, 1, 0, 0.502839,-99) , 
0, 15.1698, 0, 0, 0.507907,-99) , 
NN(
NN(
0, 
0, 
-1, 15, 1, 1, 0.522117,-99) , 
NN(
0, 
0, 
-1, -0.926667, 0, -1, 0.494064,-99) , 
3, 32, 1, 0, 0.496242,-99) , 
2, 0.592381, 0, 0, 0.499248,-99)    );
  // itree = 121
  fBoostWeights.push_back(0.0131187);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 36, 1, 1, 0.503669,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501329,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.479352,-99) , 
0, 0.302807, 1, 0, 0.488443,-99) , 
5, 11, 1, 0, 0.501347,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500106,-99) , 
NN(
0, 
0, 
-1, 18, 1, -1, 0.472835,-99) , 
0, -0.363767, 0, 0, 0.484083,-99) , 
5, 1, 0, 0, 0.498954,-99)    );
  // itree = 122
  fBoostWeights.push_back(0.0126408);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 6, 1, 1, 0.518514,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.516202,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496583,-99) , 
1, 57.2318, 0, 0, 0.497744,-99) , 
1, -22.8765, 1, 0, 0.499432,-99) , 
NN(
0, 
0, 
-1, -1.47143, 0, -1, 0.481617,-99) , 
2, -1.17286, 0, 0, 0.498092,-99)    );
  // itree = 123
  fBoostWeights.push_back(0.0176368);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 6, 1, 1, 0.516716,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506496,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491308,-99) , 
2, 0.121905, 1, 0, 0.499232,-99) , 
1, -22.9624, 1, 0, 0.500644,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.480088,-99) , 
2, -1.38143, 0, 0, 0.499705,-99)    );
  // itree = 124
  fBoostWeights.push_back(0.0198219);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.525863,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504626,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.475448,-99) , 
8, 1.21733, 0, 0, 0.501841,-99) , 
3, 29, 1, 0, 0.503206,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.531307,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495313,-99) , 
0, 21.2468, 0, 0, 0.499341,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502289,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.448973,-99) , 
1, 13.592, 1, 0, 0.474746,-99) , 
8, 1.77016, 1, 0, 0.492849,-99) , 
1, 4.77829, 1, 0, 0.498716,-99)    );
  // itree = 125
  fBoostWeights.push_back(0.0234003);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 19.9959, 0, 1, 0.508232,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504637,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.441801,-99) , 
0, -11.453, 0, 0, 0.491562,-99) , 
8, 1.7699, 1, 0, 0.503541,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504731,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.460139,-99) , 
8, 1.2511, 0, 0, 0.499009,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.462221,-99) , 
0, -11.0482, 0, 0, 0.492992,-99) , 
5, 4, 0, 0, 0.499555,-99)    );
  // itree = 126
  fBoostWeights.push_back(0.0184786);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503399,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.477729,-99) , 
8, 1.25106, 0, 0, 0.50024,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.477513,-99) , 
0, 27.3258, 1, 0, 0.499067,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.523041,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.484351,-99) , 
6, 3, 0, 0, 0.501347,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.44765,-99) , 
1, 51.1641, 0, 0, 0.480734,-99) , 
1, 32.6657, 1, 0, 0.497135,-99)    );
  // itree = 127
  fBoostWeights.push_back(0.0190724);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 9.09337, 0, 1, 0.517943,-99) , 
NN(
0, 
0, 
-1, -9.10782, 0, -1, 0.492353,-99) , 
8, 1.52162, 1, 0, 0.502766,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500511,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.4528,-99) , 
0, 21.2438, 1, 0, 0.496221,-99) , 
NN(
0, 
0, 
-1, 43, 0, -1, 0.47994,-99) , 
2, 0.110952, 1, 0, 0.492018,-99) , 
2, 0.554286, 0, 0, 0.49495,-99)    );
  // itree = 128
  fBoostWeights.push_back(0.0173534);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.511607,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498215,-99) , 
8, 1.37701, 1, 0, 0.501741,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.515218,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490809,-99) , 
1, -22.9506, 1, 0, 0.49288,-99) , 
6, 3, 0, 0, 0.496111,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.473121,-99) , 
2, -1.36143, 0, 0, 0.495008,-99)    );
  // itree = 129
  fBoostWeights.push_back(0.0282165);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.511847,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495602,-99) , 
8, 1.45161, 1, 0, 0.501834,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.474324,-99) , 
8, 1.1609, 0, 0, 0.499828,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.519515,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.430185,-99) , 
0, 11.68, 1, 0, 0.500638,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.439254,-99) , 
0, -9.15341, 0, 0, 0.487101,-99) , 
8, 1.83924, 1, 0, 0.497351,-99)    );
  // itree = 130
  fBoostWeights.push_back(0.0166037);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.549407,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489082,-99) , 
5, 3, 0, 0, 0.519557,-99) , 
NN(
0, 
0, 
-1, 13.14, 1, -1, 0.497489,-99) , 
0, 21.2453, 0, 0, 0.499462,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510006,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.466877,-99) , 
1, -6.74323, 0, 0, 0.49412,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.457827,-99) , 
1, 14.3077, 1, 0, 0.485348,-99) , 
2, -0.763809, 0, 0, 0.497041,-99)    );
  // itree = 131
  fBoostWeights.push_back(0.0229091);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.543882,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.534654,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496262,-99) , 
1, -22.7553, 1, 0, 0.499135,-99) , 
0, 21.2451, 0, 0, 0.503125,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.530202,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491892,-99) , 
3, 35, 1, 0, 0.496531,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.44939,-99) , 
0, 21.2471, 1, 0, 0.492269,-99) , 
2, -0.150476, 0, 0, 0.498687,-99)    );
  // itree = 132
  fBoostWeights.push_back(0.0176423);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.513572,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.476032,-99) , 
3, 36, 0, 0, 0.509921,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502652,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489632,-99) , 
2, 0.08, 1, 0, 0.498388,-99) , 
2, 0.582381, 0, 0, 0.501652,-99) , 
NN(
0, 
0, 
-1, -1.47143, 0, -1, 0.479104,-99) , 
2, -1.17286, 0, 0, 0.49996,-99)    );
  // itree = 133
  fBoostWeights.push_back(0.0122032);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 1.59571, 0, 1, 0.503884,-99) , 
NN(
0, 
0, 
-1, 40, 1, -1, 0.490287,-99) , 
3, 42, 0, 0, 0.501057,-99) , 
NN(
0, 
0, 
-1, 4, 0, -1, 0.48542,-99) , 
2, -1.01857, 0, 0, 0.499399,-99)    );
  // itree = 134
  fBoostWeights.push_back(0.0123847);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.528908,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.515239,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499501,-99) , 
6, 3, 0, 0, 0.505405,-99) , 
0, 15.1569, 0, 0, 0.508856,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.521264,-99) , 
NN(
0, 
0, 
-1, -0.8, 0, -1, 0.496274,-99) , 
3, 30, 1, 0, 0.497987,-99) , 
2, 0.52381, 0, 0, 0.501068,-99)    );
  // itree = 135
  fBoostWeights.push_back(0.0309161);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.554066,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.484803,-99) , 
8, 1.44053, 1, 0, 0.520499,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501889,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.459584,-99) , 
8, 1.14767, 0, 0, 0.499147,-99) , 
1, -13.4993, 1, 0, 0.502849,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.520235,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.467322,-99) , 
1, 8.05824, 1, 0, 0.500405,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.435665,-99) , 
1, -12.9282, 0, 0, 0.49155,-99) , 
8, 1.76978, 1, 0, 0.499705,-99)    );
  // itree = 136
  fBoostWeights.push_back(0.0223545);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.543048,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.517887,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493463,-99) , 
1, 17.2729, 0, 0, 0.498711,-99) , 
1, -22.7963, 1, 0, 0.502311,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.5019,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.466756,-99) , 
1, 23.2651, 1, 0, 0.496995,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.448717,-99) , 
0, 21.2443, 1, 0, 0.492618,-99) , 
2, -0.150476, 0, 0, 0.498351,-99)    );
  // itree = 137
  fBoostWeights.push_back(0.0167951);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.543603,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.530566,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498367,-99) , 
0, 21.2435, 0, 0, 0.501031,-99) , 
1, -22.4879, 1, 0, 0.504532,-99) , 
NN(
0, 
0, 
-1, 21.2434, 1, -1, 0.489992,-99) , 
2, -0.150476, 0, 0, 0.498586,-99)    );
  // itree = 138
  fBoostWeights.push_back(0.0198364);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.534889,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.519283,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497461,-99) , 
1, 17.172, 0, 0, 0.502191,-99) , 
1, -22.8804, 1, 0, 0.504829,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503032,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.463783,-99) , 
1, 23.4358, 1, 0, 0.497645,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.459039,-99) , 
0, 15.1664, 1, 0, 0.491899,-99) , 
2, -0.287619, 0, 0, 0.500278,-99)    );
  // itree = 139
  fBoostWeights.push_back(0.0147267);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 21.2451, 0, 1, 0.506728,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50026,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.468235,-99) , 
0, 15.158, 1, 0, 0.495733,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.454071,-99) , 
1, -22.9978, 0, 0, 0.492318,-99) , 
2, -0.0371429, 0, 0, 0.500015,-99)    );
  // itree = 140
  fBoostWeights.push_back(0.0169462);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.520084,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502168,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.483803,-99) , 
0, 13.1436, 1, 0, 0.500372,-99) , 
0, 21.2484, 0, 0, 0.50212,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506807,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.462507,-99) , 
1, 18.2876, 1, 0, 0.496609,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.458684,-99) , 
1, -13.2758, 0, 0, 0.490254,-99) , 
2, -0.514286, 0, 0, 0.499066,-99)    );
  // itree = 141
  fBoostWeights.push_back(0.0166461);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.51993,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.52326,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496391,-99) , 
1, 60.3509, 0, 0, 0.497705,-99) , 
0, 21.2465, 0, 0, 0.49968,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502851,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.466303,-99) , 
1, 18.2048, 1, 0, 0.494418,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.460221,-99) , 
1, -13.336, 0, 0, 0.488711,-99) , 
2, -0.494286, 0, 0, 0.496773,-99)    );
  // itree = 142
  fBoostWeights.push_back(0.0209856);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.533929,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510811,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496784,-99) , 
6, 3, 0, 0, 0.502005,-99) , 
1, -22.8064, 1, 0, 0.504581,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.520604,-99) , 
NN(
0, 
0, 
-1, -0.722857, 0, -1, 0.487092,-99) , 
3, 33, 1, 0, 0.49035,-99) , 
2, -0.150476, 0, 0, 0.49875,-99)    );
  // itree = 143
  fBoostWeights.push_back(0.019867);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510082,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.486289,-99) , 
1, 23.2802, 1, 0, 0.507152,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.528058,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495914,-99) , 
1, 50.9843, 0, 0, 0.498314,-99) , 
6, 2, 1, 0, 0.50157,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512478,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.4691,-99) , 
5, 9, 1, 0, 0.49399,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.458961,-99) , 
5, 3, 0, 0, 0.48305,-99) , 
2, -0.941429, 0, 0, 0.499312,-99)    );
  // itree = 144
  fBoostWeights.push_back(0.0137839);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.52247,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492434,-99) , 
5, 9, 1, 0, 0.513744,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.518825,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49945,-99) , 
1, 55.0854, 0, 0, 0.500771,-99) , 
1, -13.6921, 1, 0, 0.502827,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.517831,-99) , 
NN(
0, 
0, 
-1, 44, 0, -1, 0.483009,-99) , 
3, 37, 1, 0, 0.488817,-99) , 
2, -0.684762, 0, 0, 0.500072,-99)    );
  // itree = 145
  fBoostWeights.push_back(0.0163271);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.528275,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505182,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495037,-99) , 
2, -0.23, 0, 0, 0.502083,-99) , 
2, 1.63, 0, 0, 0.503223,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.513426,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.47669,-99) , 
5, 8, 1, 0, 0.494168,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.464951,-99) , 
5, 3, 0, 0, 0.484985,-99) , 
2, -0.975715, 0, 0, 0.501116,-99)    );
  // itree = 146
  fBoostWeights.push_back(0.0191672);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.541572,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505551,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.487298,-99) , 
3, 42, 0, 0, 0.501942,-99) , 
0, 21.2483, 0, 0, 0.50547,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502895,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.474217,-99) , 
0, 15.1671, 1, 0, 0.498837,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.458459,-99) , 
1, -22.8205, 0, 0, 0.49551,-99) , 
2, -0.0371429, 0, 0, 0.500836,-99)    );
  // itree = 147
  fBoostWeights.push_back(0.0168117);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503921,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.469752,-99) , 
0, 27.3178, 1, 0, 0.502335,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.479494,-99) , 
1, -29.0269, 0, 0, 0.500892,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.524326,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.485734,-99) , 
1, 73.1087, 0, 0, 0.502204,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.456755,-99) , 
1, 51.0967, 0, 0, 0.48495,-99) , 
1, 32.6064, 1, 0, 0.499218,-99)    );
  // itree = 148
  fBoostWeights.push_back(0.0116671);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507166,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498396,-99) , 
2, 0.551905, 0, 0, 0.500788,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504788,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.48245,-99) , 
8, 1.70825, 0, 0, 0.489322,-99) , 
5, 11, 1, 0, 0.49905,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501434,-99) , 
NN(
0, 
0, 
-1, 45, 0, -1, 0.479231,-99) , 
0, -0.363724, 0, 0, 0.488352,-99) , 
5, 1, 0, 0, 0.497572,-99)    );
  // itree = 149
  fBoostWeights.push_back(0.0135436);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 5, 0, 1, 0.513536,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503094,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490848,-99) , 
8, 1.76992, 1, 0, 0.499649,-99) , 
NN(
0, 
0, 
-1, 3, 0, -1, 0.484725,-99) , 
2, -0.887143, 0, 0, 0.497463,-99) , 
2, 1.41571, 0, 0, 0.498441,-99)    );
  // itree = 150
  fBoostWeights.push_back(0.0194226);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.526814,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.5052,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49008,-99) , 
0, 0.0265203, 1, 0, 0.498016,-99) , 
0, 19.991, 0, 0, 0.499932,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502749,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.467537,-99) , 
0, 24.5929, 1, 0, 0.497786,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.466177,-99) , 
0, -11.0481, 0, 0, 0.492619,-99) , 
5, 4, 0, 0, 0.497181,-99)    );
  // itree = 151
  fBoostWeights.push_back(0.0275786);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512727,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492664,-99) , 
9, 0, 0, 0, 0.500473,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.518953,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.480837,-99) , 
9, 0, 1, 0, 0.493359,-99) , 
0, -3.06824, 0, 0, 0.497491,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.47882,-99) , 
2, -1.44571, 0, 0, 0.496756,-99)    );
  // itree = 152
  fBoostWeights.push_back(0.0172379);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.56857,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.461694,-99) , 
8, 1.51712, 1, 0, 0.517347,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500103,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.48489,-99) , 
1, 32.6576, 1, 0, 0.498625,-99) , 
0, 21.2453, 0, 0, 0.500296,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.511534,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.474156,-99) , 
5, 3, 0, 0, 0.496636,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.466049,-99) , 
5, 10, 1, 0, 0.489937,-99) , 
2, -0.791428, 0, 0, 0.498619,-99)    );
  // itree = 153
  fBoostWeights.push_back(0.0114362);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.526412,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500963,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.478043,-99) , 
0, -31.9122, 0, 0, 0.499384,-99) , 
0, 19.9959, 0, 0, 0.501169,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500395,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.465443,-99) , 
8, 1.2432, 0, 0, 0.496141,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.470776,-99) , 
0, -11.0497, 0, 0, 0.492024,-99) , 
5, 4, 0, 0, 0.497714,-99)    );
  // itree = 154
  fBoostWeights.push_back(0.0139141);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 6, 0, 1, 0.51267,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.517912,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499536,-99) , 
6, 3, 0, 0, 0.506152,-99) , 
NN(
0, 
0, 
-1, 42, 0, -1, 0.49338,-99) , 
3, 35, 1, 0, 0.494639,-99) , 
2, 1.47714, 0, 0, 0.495608,-99)    );
  // itree = 155
  fBoostWeights.push_back(0.0231574);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.557496,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.460121,-99) , 
8, 1.5369, 1, 0, 0.512876,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503864,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492471,-99) , 
2, 0.0842856, 1, 0, 0.498442,-99) , 
0, 18.3052, 0, 0, 0.499963,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.521161,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.484392,-99) , 
0, -2.52072, 0, 0, 0.495477,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.473378,-99) , 
0, 7.18452, 1, 0, 0.489016,-99) , 
5, 1, 0, 0, 0.49845,-99)    );
  // itree = 156
  fBoostWeights.push_back(0.0152341);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.536953,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.528255,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495566,-99) , 
0, -23.3337, 1, 0, 0.498225,-99) , 
0, 21.2451, 0, 0, 0.501683,-99) , 
NN(
0, 
0, 
-1, -22.8533, 0, -1, 0.494001,-99) , 
2, -0.00476195, 0, 0, 0.498005,-99)    );
  // itree = 157
  fBoostWeights.push_back(0.0125065);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.529388,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.521657,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497824,-99) , 
0, -23.3309, 1, 0, 0.499761,-99) , 
0, 21.2464, 0, 0, 0.502395,-99) , 
NN(
0, 
0, 
-1, -21.3091, 0, -1, 0.493437,-99) , 
2, -0.150476, 0, 0, 0.498729,-99)    );
  // itree = 158
  fBoostWeights.push_back(0.0150487);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.531782,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.513374,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497338,-99) , 
1, 17.1381, 0, 0, 0.500789,-99) , 
1, -22.9022, 1, 0, 0.503279,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502585,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.47822,-99) , 
0, 15.165, 1, 0, 0.499132,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.462229,-99) , 
1, -22.7613, 0, 0, 0.496083,-99) , 
2, -0.0371429, 0, 0, 0.499937,-99)    );
  // itree = 159
  fBoostWeights.push_back(0.0188789);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.528641,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50637,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492545,-99) , 
3, 42, 0, 0, 0.503633,-99) , 
0, 21.2391, 0, 0, 0.505837,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.514842,-99) , 
NN(
0, 
0, 
-1, 44, 0, -1, 0.489811,-99) , 
3, 35, 1, 0, 0.492828,-99) , 
2, -0.150476, 0, 0, 0.500508,-99)    );
  // itree = 160
  fBoostWeights.push_back(0.0142468);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 1.27143, 0, 1, 0.507025,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.518258,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497202,-99) , 
1, -22.8632, 1, 0, 0.498998,-99) , 
6, 3, 0, 0, 0.501934,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.509051,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.475692,-99) , 
5, 10, 1, 0, 0.498412,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.477678,-99) , 
5, 3, 0, 0, 0.491948,-99) , 
2, -0.763809, 0, 0, 0.500226,-99)    );
  // itree = 161
  fBoostWeights.push_back(0.00986262);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.532402,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.509971,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493768,-99) , 
0, -3.07453, 0, 0, 0.503189,-99) , 
3, 40, 1, 0, 0.508676,-99) , 
NN(
NN(
0, 
0, 
-1, 51.0938, 0, 1, 0.502118,-99) , 
NN(
0, 
0, 
-1, 32.6835, 1, -1, 0.495311,-99) , 
7, 13, 1, 0, 0.498982,-99) , 
7, 26, 0, 0, 0.500624,-99)    );
  // itree = 162
  fBoostWeights.push_back(0.0186424);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.53052,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499267,-99) , 
1, -13.6921, 1, 0, 0.504639,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502458,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.455061,-99) , 
0, -9.14866, 0, 0, 0.491867,-99) , 
8, 1.7531, 1, 0, 0.50077,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507603,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.469442,-99) , 
1, -11.9817, 0, 0, 0.498346,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.474641,-99) , 
1, 14.2608, 1, 0, 0.492645,-99) , 
2, -0.691428, 0, 0, 0.499203,-99)    );
  // itree = 163
  fBoostWeights.push_back(0.0106422);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.522195,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503044,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.484387,-99) , 
1, 27.844, 1, 0, 0.50114,-99) , 
1, 72.7336, 0, 0, 0.501773,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.485634,-99) , 
1, -32.0091, 0, 0, 0.500997,-99)    );
  // itree = 164
  fBoostWeights.push_back(0.0141251);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 4, 0, 1, 0.508684,-99) , 
NN(
0, 
0, 
-1, -3.05533, 0, -1, 0.485567,-99) , 
8, 1.87202, 1, 0, 0.504752,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.513225,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497483,-99) , 
0, 21.2462, 0, 0, 0.498887,-99) , 
NN(
0, 
0, 
-1, 42, 1, -1, 0.48172,-99) , 
2, -0.975715, 0, 0, 0.4967,-99) , 
3, 45, 0, 0, 0.499887,-99)    );
  // itree = 165
  fBoostWeights.push_back(0.0120812);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.526102,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.514803,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497038,-99) , 
8, 1.56049, 1, 0, 0.504932,-99) , 
6, 2, 1, 0, 0.512965,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.508959,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498248,-99) , 
8, 1.38554, 1, 0, 0.501104,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505848,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.483107,-99) , 
3, 45, 0, 0, 0.490883,-99) , 
2, -0.872381, 0, 0, 0.49953,-99) , 
2, 1.20857, 0, 0, 0.500771,-99)    );
  // itree = 166
  fBoostWeights.push_back(0.0136747);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.523557,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503479,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.486014,-99) , 
0, 13.1398, 1, 0, 0.501769,-99) , 
0, 21.2451, 0, 0, 0.503702,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503209,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.475761,-99) , 
0, 19.2175, 1, 0, 0.500044,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.470496,-99) , 
0, -21.3079, 0, 0, 0.49741,-99) , 
2, -0.150476, 0, 0, 0.501129,-99)    );
  // itree = 167
  fBoostWeights.push_back(0.00872126);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.52958,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501218,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.482763,-99) , 
1, 27.8637, 1, 0, 0.499335,-99) , 
1, 72.7609, 0, 0, 0.500231,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.481536,-99) , 
1, -31.9988, 0, 0, 0.499327,-99)    );
  // itree = 168
  fBoostWeights.push_back(0.0273148);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 9, 0, 1, 0.509491,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502341,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.48301,-99) , 
0, 12.8515, 1, 0, 0.495677,-99) , 
9, 0, 0, 0, 0.501043,-99) , 
NN(
NN(
0, 
0, 
-1, 5, 1, 1, 0.513662,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.526256,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.475434,-99) , 
8, 1.28221, 1, 0, 0.485131,-99) , 
9, 0, 1, 0, 0.494541,-99) , 
0, -3.06835, 0, 0, 0.498314,-99)    );
  // itree = 169
  fBoostWeights.push_back(0.00807248);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.526489,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497417,-99) , 
1, 73.1615, 0, 0, 0.509931,-99) , 
NN(
0, 
0, 
-1, 29.9549, 1, -1, 0.496572,-99) , 
1, 51.1174, 0, 0, 0.497431,-99)    );
  // itree = 170
  fBoostWeights.push_back(0.0098414);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 26, 0, 1, 0.508861,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500351,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.478638,-99) , 
3, 42, 0, 0, 0.498689,-99) , 
3, 39, 1, 0, 0.500228,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.51421,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490612,-99) , 
0, 0.305956, 1, 0, 0.500425,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.472661,-99) , 
2, -0.204762, 0, 0, 0.489637,-99) , 
5, 11, 1, 0, 0.498837,-99)    );
  // itree = 171
  fBoostWeights.push_back(0.0135525);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.525644,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501838,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.478796,-99) , 
8, 1.27023, 0, 0, 0.498751,-99) , 
0, 21.2491, 0, 0, 0.50115,-99) , 
NN(
0, 
0, 
-1, -21.2956, 0, -1, 0.492575,-99) , 
2, -0.150476, 0, 0, 0.497636,-99)    );
  // itree = 172
  fBoostWeights.push_back(0.0108009);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.5067,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490077,-99) , 
8, 1.80745, 1, 0, 0.502807,-99) , 
NN(
0, 
0, 
-1, -0.665238, 0, -1, 0.49677,-99) , 
7, 18, 0, 0, 0.49921,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.483316,-99) , 
2, -1.44571, 0, 0, 0.498584,-99)    );
  // itree = 173
  fBoostWeights.push_back(0.01035);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.525619,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510966,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494142,-99) , 
7, 10, 1, 0, 0.501263,-99) , 
7, 26, 0, 0, 0.505899,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500426,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.482671,-99) , 
8, 1.91139, 1, 0, 0.498452,-99) , 
NN(
0, 
0, 
-1, 14, 1, -1, 0.474765,-99) , 
3, 42, 0, 0, 0.496625,-99) , 
3, 39, 1, 0, 0.498024,-99)    );
  // itree = 174
  fBoostWeights.push_back(0.010412);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.516701,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506829,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497655,-99) , 
3, 39, 1, 0, 0.499044,-99) , 
0, 24.1754, 0, 0, 0.500154,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507027,-99) , 
NN(
0, 
0, 
-1, -4.13798, 1, -1, 0.483263,-99) , 
8, 1.67501, 0, 0, 0.491426,-99) , 
5, 1, 0, 0, 0.498941,-99)    );
  // itree = 175
  fBoostWeights.push_back(0.0123327);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.519555,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497369,-99) , 
2, -0.178095, 0, 0, 0.510627,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502533,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493602,-99) , 
9, 0, 1, 0, 0.498224,-99) , 
0, 18.3049, 0, 0, 0.499538,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500543,-99) , 
NN(
0, 
0, 
-1, -0.363767, 0, -1, 0.484382,-99) , 
8, 1.75073, 0, 0, 0.488617,-99) , 
5, 1, 0, 0, 0.498026,-99)    );
  // itree = 176
  fBoostWeights.push_back(0.0100905);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 15, 0, 1, 0.512782,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495825,-99) , 
5, 4, 0, 0, 0.506403,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.514787,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499615,-99) , 
0, -3.06874, 1, 0, 0.505917,-99) , 
NN(
0, 
0, 
-1, 42, 0, -1, 0.495636,-99) , 
3, 36, 1, 0, 0.496771,-99) , 
2, 1.20857, 0, 0, 0.497664,-99)    );
  // itree = 177
  fBoostWeights.push_back(0.00671893);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 19.7725, 0, 1, 0.501589,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500101,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.478142,-99) , 
0, 7.18466, 1, 0, 0.493671,-99) , 
5, 1, 0, 0, 0.50033,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501961,-99) , 
NN(
0, 
0, 
-1, 5.49113, 0, -1, 0.484974,-99) , 
8, 1.63524, 0, 0, 0.491606,-99) , 
5, 11, 1, 0, 0.499183,-99)    );
  // itree = 178
  fBoostWeights.push_back(0.0420662);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.545448,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489502,-99) , 
8, 1.48326, 1, 0, 0.52744,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.522091,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.48756,-99) , 
0, 11.1138, 0, 0, 0.497266,-99) , 
0, -15.2282, 1, 0, 0.502191,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.514594,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.457058,-99) , 
0, 11.1126, 1, 0, 0.502585,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.439014,-99) , 
0, -15.2291, 0, 0, 0.495056,-99) , 
8, 1.67586, 1, 0, 0.499396,-99)    );
  // itree = 179
  fBoostWeights.push_back(0.00891638);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.521965,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505031,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.485745,-99) , 
8, 1.83218, 1, 0, 0.501084,-99) , 
3, 40, 1, 0, 0.505015,-99) , 
NN(
NN(
0, 
0, 
-1, 51.0938, 0, 1, 0.501779,-99) , 
NN(
0, 
0, 
-1, 32.5584, 1, -1, 0.494768,-99) , 
7, 13, 1, 0, 0.498534,-99) , 
7, 26, 0, 0, 0.499633,-99)    );
  // itree = 180
  fBoostWeights.push_back(0.00837783);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 51.173, 0, 1, 0.50123,-99) , 
NN(
0, 
0, 
-1, 7.18409, 1, -1, 0.493092,-99) , 
5, 1, 0, 0, 0.499936,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.52188,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.485668,-99) , 
0, 2.45963, 1, 0, 0.496505,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.479422,-99) , 
0, -7.24572, 0, 0, 0.491478,-99) , 
5, 11, 1, 0, 0.498823,-99)    );
  // itree = 181
  fBoostWeights.push_back(0.00984121);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.518353,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500989,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491263,-99) , 
1, 7.67749, 1, 0, 0.497461,-99) , 
1, 72.5801, 0, 0, 0.498097,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.481474,-99) , 
1, -32.2628, 0, 0, 0.497308,-99)    );
  // itree = 182
  fBoostWeights.push_back(0.00801775);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 1.61717, 0, 1, 0.511401,-99) , 
NN(
0, 
0, 
-1, 29.8497, 1, -1, 0.498307,-99) , 
1, 50.9947, 0, 0, 0.499152,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507118,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501208,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.471376,-99) , 
3, 45, 0, 0, 0.484731,-99) , 
3, 40, 1, 0, 0.49001,-99) , 
2, -0.868571, 0, 0, 0.497849,-99)    );
  // itree = 183
  fBoostWeights.push_back(0.0116026);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.51476,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50389,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496215,-99) , 
2, 0.0790476, 1, 0, 0.499745,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504585,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.483954,-99) , 
3, 40, 1, 0, 0.48878,-99) , 
2, -0.821429, 0, 0, 0.497979,-99) , 
2, 1.54143, 0, 0, 0.498752,-99)    );
  // itree = 184
  fBoostWeights.push_back(0.0119159);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512246,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506803,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496714,-99) , 
1, 17.2137, 0, 0, 0.49891,-99) , 
1, -22.84, 1, 0, 0.499992,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.509611,-99) , 
NN(
0, 
0, 
-1, 44, 0, -1, 0.489051,-99) , 
3, 37, 1, 0, 0.492506,-99) , 
2, -0.650476, 0, 0, 0.498446,-99)    );
  // itree = 185
  fBoostWeights.push_back(0.0111196);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.517722,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503368,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49324,-99) , 
8, 1.76889, 1, 0, 0.50052,-99) , 
2, 1.59571, 0, 0, 0.501314,-99) , 
NN(
0, 
0, 
-1, 4, 0, -1, 0.489228,-99) , 
2, -1.01857, 0, 0, 0.500029,-99)    );
  // itree = 186
  fBoostWeights.push_back(0.0118359);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 45, 0, 1, 0.512114,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.511514,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497372,-99) , 
2, 0.0914286, 1, 0, 0.501102,-99) , 
NN(
0, 
0, 
-1, -13.0977, 0, -1, 0.493897,-99) , 
2, -0.21, 0, 0, 0.498093,-99) , 
2, 1.33714, 0, 0, 0.499088,-99)    );
  // itree = 187
  fBoostWeights.push_back(0.0136245);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503848,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.480079,-99) , 
1, -28.9361, 0, 0, 0.50246,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.483427,-99) , 
0, -27.3862, 0, 0, 0.501516,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.52552,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495406,-99) , 
7, 11, 1, 0, 0.507305,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.470616,-99) , 
1, 51.0938, 0, 0, 0.493305,-99) , 
1, 32.5798, 1, 0, 0.500659,-99)    );
  // itree = 188
  fBoostWeights.push_back(0.00884642);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.511679,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.523311,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498398,-99) , 
0, 19.9924, 0, 0, 0.500039,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500552,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.481552,-99) , 
0, -6.64747, 0, 0, 0.4949,-99) , 
5, 4, 0, 0, 0.498102,-99) , 
7, 29, 0, 0, 0.498673,-99)    );
  // itree = 189
  fBoostWeights.push_back(0.0237776);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, -9.14614, 1, 1, 0.504414,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.469937,-99) , 
8, 1.14369, 0, 0, 0.502107,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.518838,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.47566,-99) , 
1, 7.36015, 1, 0, 0.501892,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.444152,-99) , 
1, -13.7294, 0, 0, 0.494487,-99) , 
8, 1.7531, 1, 0, 0.499838,-99)    );
  // itree = 190
  fBoostWeights.push_back(0.00863772);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.519777,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499662,-99) , 
1, 73.1655, 0, 0, 0.508315,-99) , 
NN(
0, 
0, 
-1, 30.0211, 1, -1, 0.495985,-99) , 
1, 51.1532, 0, 0, 0.496783,-99)    );
  // itree = 191
  fBoostWeights.push_back(0.00699644);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.52422,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498366,-99) , 
7, 11, 1, 0, 0.508546,-99) , 
NN(
0, 
0, 
-1, 30.0059, 1, -1, 0.496988,-99) , 
1, 51.1197, 0, 0, 0.497736,-99)    );
  // itree = 192
  fBoostWeights.push_back(0.0065787);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.526224,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498153,-99) , 
7, 11, 1, 0, 0.509139,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500583,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.481011,-99) , 
0, 27.3261, 1, 0, 0.499594,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.475481,-99) , 
1, 29.9344, 1, 0, 0.49832,-99) , 
1, 51.0938, 0, 0, 0.49902,-99)    );
  // itree = 193
  fBoostWeights.push_back(0.0282907);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.522364,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.449656,-99) , 
8, 1.32303, 0, 0, 0.511137,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505641,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.487803,-99) , 
5, 5, 0, 0, 0.495449,-99) , 
9, 0, 1, 0, 0.501337,-99) , 
NN(
NN(
0, 
0, 
-1, 7, 0, 1, 0.511921,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500055,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.478612,-99) , 
5, 7, 1, 0, 0.488448,-99) , 
9, 0, 0, 0, 0.496466,-99) , 
0, 3.00851, 1, 0, 0.499307,-99)    );
  // itree = 194
  fBoostWeights.push_back(0.00898742);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.525262,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496255,-99) , 
1, 73.1591, 0, 0, 0.508677,-99) , 
NN(
0, 
0, 
-1, 30.0023, 1, -1, 0.496088,-99) , 
1, 51.1405, 0, 0, 0.496898,-99)    );
  // itree = 195
  fBoostWeights.push_back(0.0142766);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, -9.14717, 1, 1, 0.504733,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501035,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.461071,-99) , 
0, -9.13008, 0, 0, 0.492172,-99) , 
8, 1.80405, 1, 0, 0.501613,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.523354,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496893,-99) , 
7, 26, 0, 0, 0.501929,-99) , 
NN(
0, 
0, 
-1, 1.4894, 1, -1, 0.484806,-99) , 
3, 39, 1, 0, 0.494519,-99) , 
3, 43, 0, 0, 0.499716,-99)    );
  // itree = 196
  fBoostWeights.push_back(0.0137858);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.522023,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505264,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.487952,-99) , 
7, 19, 1, 0, 0.501156,-99) , 
7, 26, 0, 0, 0.505115,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504463,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494114,-99) , 
8, 1.53646, 1, 0, 0.49853,-99) , 
NN(
0, 
0, 
-1, 17, 0, -1, 0.480456,-99) , 
3, 42, 0, 0, 0.49713,-99) , 
3, 39, 1, 0, 0.498336,-99)    );
  // itree = 197
  fBoostWeights.push_back(0.0165231);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.520092,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504077,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493848,-99) , 
0, 0.0196573, 1, 0, 0.499215,-99) , 
0, 19.982, 0, 0, 0.500601,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50649,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.486079,-99) , 
0, -6.0187, 0, 0, 0.49905,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.46877,-99) , 
0, 24.1713, 1, 0, 0.495322,-99) , 
5, 4, 0, 0, 0.498616,-99)    );
  // itree = 198
  fBoostWeights.push_back(0.00950214);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501885,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.484606,-99) , 
1, 23.481, 1, 0, 0.49958,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.480803,-99) , 
0, -31.4402, 0, 0, 0.498771,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.485053,-99) , 
0, 33.3998, 1, 0, 0.498258,-99)    );
  // itree = 199
  fBoostWeights.push_back(0.0110697);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.522845,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492554,-99) , 
8, 1.49405, 0, 0, 0.510551,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502021,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492578,-99) , 
1, -6.20483, 0, 0, 0.498937,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.47752,-99) , 
1, 30.0211, 1, 0, 0.497807,-99) , 
1, 51.1532, 0, 0, 0.49863,-99)    );
  // itree = 200
  fBoostWeights.push_back(0.0157438);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.52134,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497121,-99) , 
5, 5, 0, 0, 0.510484,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507034,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494887,-99) , 
2, -0.295714, 0, 0, 0.502954,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505039,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49152,-99) , 
0, -21.3073, 1, 0, 0.492705,-99) , 
6, 2, 1, 0, 0.496512,-99) , 
1, 51.0938, 0, 0, 0.497412,-99)    );
  // itree = 201
  fBoostWeights.push_back(0.00872541);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.525517,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497773,-99) , 
7, 11, 1, 0, 0.508668,-99) , 
NN(
0, 
0, 
-1, 29.9636, 1, -1, 0.496121,-99) , 
1, 51.0963, 0, 0, 0.49693,-99)    );
  // itree = 202
  fBoostWeights.push_back(0.00658198);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 18, 0, 1, 0.508931,-99) , 
NN(
0, 
0, 
-1, 30.0795, 1, -1, 0.497096,-99) , 
1, 51.2033, 0, 0, 0.497857,-99)    );
  // itree = 203
  fBoostWeights.push_back(0.0125134);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.511159,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497905,-99) , 
8, 1.70531, 1, 0, 0.506111,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.487692,-99) , 
3, 36, 0, 0, 0.504346,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502723,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.47291,-99) , 
1, -22.6973, 0, 0, 0.500252,-99) , 
NN(
0, 
0, 
-1, 0.222381, 0, -1, 0.492118,-99) , 
2, 0.110952, 1, 0, 0.498157,-99) , 
2, 0.554286, 0, 0, 0.499839,-99)    );
  // itree = 204
  fBoostWeights.push_back(0.00647114);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.526189,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496926,-99) , 
1, 73.186, 0, 0, 0.509324,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500691,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.477625,-99) , 
0, -27.3862, 0, 0, 0.499555,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.482803,-99) , 
1, 30.022, 1, 0, 0.498674,-99) , 
1, 51.1641, 0, 0, 0.49936,-99)    );
  // itree = 205
  fBoostWeights.push_back(0.0124788);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.514741,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49807,-99) , 
1, -13.7452, 1, 0, 0.500898,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501411,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.465408,-99) , 
0, -9.14893, 0, 0, 0.493457,-99) , 
8, 1.80712, 1, 0, 0.499097,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506883,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494441,-99) , 
2, -0.408095, 1, 0, 0.499,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.476247,-99) , 
3, 40, 1, 0, 0.494071,-99) , 
3, 42, 0, 0, 0.498003,-99)    );
  // itree = 206
  fBoostWeights.push_back(0.010134);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, -13.265, 1, 1, 0.50835,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500293,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.483546,-99) , 
1, 5.15545, 1, 0, 0.49356,-99) , 
8, 1.7531, 1, 0, 0.503751,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.51131,-99) , 
NN(
0, 
0, 
-1, 44, 0, -1, 0.496857,-99) , 
3, 30, 1, 0, 0.497861,-99) , 
2, 0.417143, 0, 0, 0.499784,-99)    );
  // itree = 207
  fBoostWeights.push_back(0.00611882);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.521705,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499736,-99) , 
8, 1.52276, 0, 0, 0.512036,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500395,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.479691,-99) , 
0, 27.3168, 1, 0, 0.499348,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.479104,-99) , 
1, 30.2889, 1, 0, 0.498283,-99) , 
1, 51.3472, 0, 0, 0.499167,-99)    );
  // itree = 208
  fBoostWeights.push_back(0.00650753);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.521238,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498835,-99) , 
7, 18, 0, 0, 0.508082,-99) , 
NN(
0, 
0, 
-1, 30.036, 1, -1, 0.497171,-99) , 
1, 51.173, 0, 0, 0.497872,-99)    );
  // itree = 209
  fBoostWeights.push_back(0.00616812);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.518802,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494266,-99) , 
8, 1.52276, 0, 0, 0.507936,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500294,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.477253,-99) , 
0, 27.3251, 1, 0, 0.499133,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.480057,-99) , 
1, 29.9292, 1, 0, 0.498131,-99) , 
1, 51.0503, 0, 0, 0.498763,-99)    );
  // itree = 210
  fBoostWeights.push_back(0.00644762);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.525103,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496934,-99) , 
7, 18, 0, 0, 0.508453,-99) , 
NN(
0, 
0, 
-1, -26.5156, 0, -1, 0.497388,-99) , 
1, 51.0382, 0, 0, 0.498104,-99)    );
  // itree = 211
  fBoostWeights.push_back(0.00632607);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501531,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492661,-99) , 
8, 1.88162, 1, 0, 0.500259,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.485135,-99) , 
3, 24, 0, 0, 0.49977,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.487051,-99) , 
2, -1.44571, 0, 0, 0.499277,-99)    );
  // itree = 212
  fBoostWeights.push_back(0.0108779);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.520536,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.515791,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494298,-99) , 
1, -7.38483, 1, 0, 0.501474,-99) , 
1, 13.6468, 0, 0, 0.506926,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501324,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492649,-99) , 
1, -10.5372, 0, 0, 0.499308,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.51151,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.471991,-99) , 
8, 1.50505, 1, 0, 0.490015,-99) , 
1, 32.6064, 1, 0, 0.498364,-99) , 
6, 4, 0, 0, 0.499361,-99)    );
  // itree = 213
  fBoostWeights.push_back(0.0155894);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.52085,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50572,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495498,-99) , 
0, -7.95661, 1, 0, 0.498873,-99) , 
0, 19.9949, 0, 0, 0.500317,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505343,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.482825,-99) , 
8, 1.3767, 0, 0, 0.499406,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.475907,-99) , 
0, 19.7722, 1, 0, 0.495826,-99) , 
5, 4, 0, 0, 0.498626,-99)    );
  // itree = 214
  fBoostWeights.push_back(0.012398);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.522813,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507502,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488294,-99) , 
8, 1.44548, 0, 0, 0.501242,-99) , 
1, 13.7125, 0, 0, 0.507428,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.521294,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498132,-99) , 
0, 19.9949, 0, 0, 0.499649,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503494,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.48866,-99) , 
9, 0, 1, 0, 0.493253,-99) , 
5, 4, 0, 0, 0.497235,-99) , 
6, 4, 0, 0, 0.498423,-99)    );
  // itree = 215
  fBoostWeights.push_back(0.0145203);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, -6.21948, 1, 1, 0.504772,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.481712,-99) , 
0, -32.4196, 0, 0, 0.50333,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510166,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493079,-99) , 
0, -0.986352, 0, 0, 0.500413,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.478207,-99) , 
0, 24.1723, 1, 0, 0.497679,-99) , 
5, 4, 0, 0, 0.501199,-99)    );
  // itree = 216
  fBoostWeights.push_back(0.0102265);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 1.61735, 0, 1, 0.510532,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50462,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493193,-99) , 
8, 1.79924, 1, 0, 0.501826,-99) , 
NN(
0, 
0, 
-1, 3, 0, -1, 0.495508,-99) , 
6, 2, 1, 0, 0.49786,-99) , 
1, 51.1311, 0, 0, 0.498678,-99)    );
  // itree = 217
  fBoostWeights.push_back(0.0238194);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.516146,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488563,-99) , 
8, 1.48486, 0, 0, 0.507473,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501397,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.482757,-99) , 
0, -16.0967, 0, 0, 0.496699,-99) , 
9, 0, 1, 0, 0.500731,-99) , 
NN(
NN(
0, 
0, 
-1, 7, 0, 1, 0.509888,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.528384,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.482262,-99) , 
8, 1.25136, 1, 0, 0.489515,-99) , 
9, 0, 0, 0, 0.49646,-99) , 
0, 3.00851, 1, 0, 0.49895,-99)    );
  // itree = 218
  fBoostWeights.push_back(0.0139863);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512653,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.468421,-99) , 
0, -16.0542, 0, 0, 0.50434,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.520687,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49711,-99) , 
0, -21.1004, 1, 0, 0.498816,-99) , 
5, 10, 0, 0, 0.500026,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489089,-99) , 
2, -1.39571, 0, 0, 0.499543,-99)    );
  // itree = 219
  fBoostWeights.push_back(0.0129768);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.519509,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.517945,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491235,-99) , 
1, 14.688, 0, 0, 0.501477,-99) , 
1, -4.61983, 1, 0, 0.506778,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505998,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497622,-99) , 
9, 0, 0, 0, 0.500787,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50587,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491595,-99) , 
9, 0, 1, 0, 0.496293,-99) , 
5, 5, 0, 0, 0.498795,-99) , 
6, 4, 0, 0, 0.499727,-99)    );
  // itree = 220
  fBoostWeights.push_back(0.00534239);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 5, 1, 1, 0.505124,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500452,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.47762,-99) , 
3, 42, 0, 0, 0.499145,-99) , 
3, 40, 1, 0, 0.500175,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489274,-99) , 
7, 1, 0, 0, 0.49969,-99)    );
  // itree = 221
  fBoostWeights.push_back(0.0134239);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.525905,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512606,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496499,-99) , 
1, 17.2726, 0, 0, 0.499955,-99) , 
1, -22.7963, 1, 0, 0.502037,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501263,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.477596,-99) , 
0, 19.2217, 1, 0, 0.49853,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.468752,-99) , 
0, -21.2995, 0, 0, 0.495878,-99) , 
2, -0.150476, 0, 0, 0.499519,-99)    );
  // itree = 222
  fBoostWeights.push_back(0.0164283);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.514203,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502696,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.486342,-99) , 
1, -18.7813, 0, 0, 0.500932,-99) , 
1, 51.201, 0, 0, 0.501966,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.556668,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.473115,-99) , 
8, 1.42083, 1, 0, 0.505082,-99) , 
NN(
0, 
0, 
-1, -8.33537, 0, -1, 0.495389,-99) , 
1, -13.6182, 1, 0, 0.497005,-99) , 
6, 3, 0, 0, 0.498806,-99)    );
  // itree = 223
  fBoostWeights.push_back(0.0063108);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 5, 1, 1, 0.504281,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.531734,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498408,-99) , 
2, 1.65333, 0, 0, 0.499533,-99) , 
3, 40, 1, 0, 0.500351,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491301,-99) , 
7, 1, 0, 0, 0.499949,-99)    );
  // itree = 224
  fBoostWeights.push_back(0.00871285);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.511644,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49929,-99) , 
8, 1.37914, 1, 0, 0.502159,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.474544,-99) , 
8, 1.13151, 0, 0, 0.501093,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.487047,-99) , 
3, 23, 0, 0, 0.500696,-99)    );
  // itree = 225
  fBoostWeights.push_back(0.0139879);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.533766,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504189,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.479106,-99) , 
8, 1.23469, 0, 0, 0.501639,-99) , 
0, 21.2505, 0, 0, 0.504462,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503124,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.476095,-99) , 
0, 21.2438, 1, 0, 0.500688,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500401,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.480811,-99) , 
2, 0.23, 0, 0, 0.487816,-99) , 
2, 0.0838095, 1, 0, 0.498639,-99) , 
2, 0.300476, 0, 0, 0.500825,-99)    );
  // itree = 226
  fBoostWeights.push_back(0.00912724);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.522877,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506418,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498541,-99) , 
6, 2, 1, 0, 0.501467,-99) , 
1, -22.7553, 1, 0, 0.503207,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500633,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.483264,-99) , 
0, 19.2124, 1, 0, 0.498615,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.479786,-99) , 
0, -21.3106, 0, 0, 0.496928,-99) , 
2, -0.150476, 0, 0, 0.500632,-99)    );
  // itree = 227
  fBoostWeights.push_back(0.0107145);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.5187,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500837,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.483587,-99) , 
8, 1.24722, 0, 0, 0.498863,-99) , 
1, -22.841, 1, 0, 0.500452,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502946,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489778,-99) , 
5, 4, 0, 0, 0.49756,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.476908,-99) , 
0, -21.3101, 0, 0, 0.495713,-99) , 
2, -0.150476, 0, 0, 0.498518,-99)    );
  // itree = 228
  fBoostWeights.push_back(0.0111223);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.519943,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496717,-99) , 
9, 0, 0, 0, 0.504466,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502155,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49461,-99) , 
9, 0, 1, 0, 0.497882,-99) , 
0, 9.09566, 0, 0, 0.499572,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.486162,-99) , 
2, -1.45857, 0, 0, 0.499062,-99)    );
  // itree = 229
  fBoostWeights.push_back(0.0167359);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 1.37552, 1, 1, 0.538547,-99) , 
NN(
0, 
0, 
-1, 15, 0, -1, 0.462848,-99) , 
8, 1.56258, 1, 0, 0.504678,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501284,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.487084,-99) , 
1, 29.5446, 1, 0, 0.499698,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.47978,-99) , 
1, -32.0726, 0, 0, 0.498847,-99) , 
0, -15.2284, 1, 0, 0.499695,-99)    );
  // itree = 230
  fBoostWeights.push_back(0.0141734);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.52432,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497829,-99) , 
8, 1.65398, 0, 0, 0.508438,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.549877,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.465711,-99) , 
8, 1.5101, 1, 0, 0.509677,-99) , 
NN(
0, 
0, 
-1, 30.0358, 1, -1, 0.496586,-99) , 
0, 21.2446, 0, 0, 0.497727,-99) , 
1, 51.173, 0, 0, 0.498417,-99)    );
  // itree = 231
  fBoostWeights.push_back(0.014161);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.544722,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.464032,-99) , 
8, 1.50987, 1, 0, 0.506235,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500706,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.481195,-99) , 
1, -28.9004, 0, 0, 0.499588,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.509204,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.459931,-99) , 
1, 57.3606, 0, 0, 0.486992,-99) , 
1, 32.7145, 1, 0, 0.498362,-99) , 
0, 21.2438, 0, 0, 0.49906,-99)    );
  // itree = 232
  fBoostWeights.push_back(0.0170489);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 11, 1, 1, 0.508514,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.527131,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.483053,-99) , 
8, 1.5029, 1, 0, 0.503156,-99) , 
NN(
0, 
0, 
-1, 8.79268, 1, -1, 0.495946,-99) , 
0, 9.09142, 0, 0, 0.497784,-99) , 
1, 51.1174, 0, 0, 0.498477,-99)    );
  // itree = 233
  fBoostWeights.push_back(0.0134582);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.511853,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.545452,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491192,-99) , 
1, -13.4195, 1, 0, 0.502038,-99) , 
NN(
0, 
0, 
-1, -22.5816, 0, -1, 0.497035,-99) , 
8, 1.38508, 1, 0, 0.498381,-99) , 
7, 29, 0, 0, 0.498944,-99)    );
  // itree = 234
  fBoostWeights.push_back(0.0121839);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.513041,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506689,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.458531,-99) , 
8, 1.63524, 1, 0, 0.487613,-99) , 
5, 9, 1, 0, 0.504852,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.519171,-99) , 
NN(
0, 
0, 
-1, 30.4851, 1, -1, 0.497983,-99) , 
1, 60.3854, 0, 0, 0.498999,-99) , 
0, -9.14716, 1, 0, 0.50051,-99)    );
  // itree = 235
  fBoostWeights.push_back(0.0140703);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.556958,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.477023,-99) , 
8, 1.46458, 1, 0, 0.514404,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502598,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.481308,-99) , 
1, 30.0736, 1, 0, 0.501021,-99) , 
0, 21.2453, 0, 0, 0.502219,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490058,-99) , 
1, 69.6833, 1, 0, 0.501805,-99)    );
  // itree = 236
  fBoostWeights.push_back(0.0164395);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.54318,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.469284,-99) , 
8, 1.51708, 1, 0, 0.508448,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.5047,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496631,-99) , 
9, 0, 1, 0, 0.500291,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506833,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.46285,-99) , 
5, 8, 1, 0, 0.490177,-99) , 
0, 13.14, 1, 0, 0.499305,-99) , 
0, 21.2453, 0, 0, 0.50012,-99)    );
  // itree = 237
  fBoostWeights.push_back(0.0121138);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.526765,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510797,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496313,-99) , 
1, 17.2505, 0, 0, 0.499442,-99) , 
1, -22.8293, 1, 0, 0.501633,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500478,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.480905,-99) , 
6, 1, 0, 0, 0.498416,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.479807,-99) , 
5, 11, 1, 0, 0.495975,-99) , 
2, -0.150476, 0, 0, 0.499317,-99)    );
  // itree = 238
  fBoostWeights.push_back(0.0092342);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.527233,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.522633,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499251,-99) , 
0, -23.33, 1, 0, 0.501142,-99) , 
0, 21.2393, 0, 0, 0.503471,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500981,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.476048,-99) , 
0, 21.2453, 1, 0, 0.498896,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.477642,-99) , 
1, -22.8178, 0, 0, 0.497151,-99) , 
2, -0.00476195, 0, 0, 0.500444,-99)    );
  // itree = 239
  fBoostWeights.push_back(0.0127039);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.520305,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505925,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.486706,-99) , 
0, 13.1413, 1, 0, 0.504041,-99) , 
0, 21.2464, 0, 0, 0.505488,-99) , 
NN(
0, 
0, 
-1, -21.3038, 0, -1, 0.495829,-99) , 
2, -0.150476, 0, 0, 0.501535,-99)    );
  // itree = 240
  fBoostWeights.push_back(0.012329);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.524957,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510326,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497717,-99) , 
1, 17.4497, 0, 0, 0.500397,-99) , 
1, -22.5305, 1, 0, 0.502414,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501495,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.48564,-99) , 
2, -0.354286, 1, 0, 0.498085,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.476402,-99) , 
5, 11, 1, 0, 0.495226,-99) , 
2, -0.150476, 0, 0, 0.499469,-99)    );
  // itree = 241
  fBoostWeights.push_back(0.0100027);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505662,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498183,-99) , 
2, -0.279524, 0, 0, 0.503036,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489761,-99) , 
8, 1.16289, 0, 0, 0.502238,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.483638,-99) , 
3, 23, 0, 0, 0.501708,-99)    );
  // itree = 242
  fBoostWeights.push_back(0.013017);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.523108,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499285,-99) , 
1, 73.1862, 0, 0, 0.509351,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.552459,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.458426,-99) , 
8, 1.53886, 1, 0, 0.510374,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500836,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.464889,-99) , 
1, 30.0788, 1, 0, 0.499159,-99) , 
0, -21.299, 1, 0, 0.500108,-99) , 
1, 51.1927, 0, 0, 0.500698,-99)    );
  // itree = 243
  fBoostWeights.push_back(0.00729914);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.516965,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49887,-99) , 
0, -27.3769, 1, 0, 0.499868,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.484944,-99) , 
1, 69.5581, 1, 0, 0.499353,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505129,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488626,-99) , 
3, 44, 0, 0, 0.497825,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.478125,-99) , 
5, 3, 0, 0, 0.491678,-99) , 
2, -0.941429, 0, 0, 0.498417,-99)    );
  // itree = 244
  fBoostWeights.push_back(0.0095794);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.52596,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.522367,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497691,-99) , 
0, -23.3307, 1, 0, 0.49969,-99) , 
0, 21.2465, 0, 0, 0.502005,-99) , 
NN(
0, 
0, 
-1, -22.9624, 0, -1, 0.49646,-99) , 
2, -0.0371429, 0, 0, 0.499428,-99)    );
  // itree = 245
  fBoostWeights.push_back(0.0101355);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.525999,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504005,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.476876,-99) , 
3, 34, 0, 0, 0.501993,-99) , 
0, -21.3007, 1, 0, 0.504056,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50183,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.48519,-99) , 
0, -21.3079, 0, 0, 0.500466,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.486075,-99) , 
1, -22.84, 0, 0, 0.49929,-99) , 
2, 0.300476, 0, 0, 0.501076,-99)    );
  // itree = 246
  fBoostWeights.push_back(0.0111136);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.515887,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498273,-99) , 
1, -13.7496, 1, 0, 0.501234,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503739,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.468471,-99) , 
0, -9.15894, 0, 0, 0.496029,-99) , 
8, 1.81169, 1, 0, 0.500054,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489035,-99) , 
3, 23, 0, 0, 0.499745,-99)    );
  // itree = 247
  fBoostWeights.push_back(0.0175435);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.557183,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49598,-99) , 
0, -11.6726, 1, 0, 0.509903,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502342,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.464679,-99) , 
0, 23.5422, 1, 0, 0.498524,-99) , 
8, 1.38569, 1, 0, 0.50157,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.514255,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.487695,-99) , 
0, -17.7364, 0, 0, 0.505823,-99) , 
NN(
0, 
0, 
-1, 14.5479, 1, -1, 0.493121,-99) , 
9, 0, 0, 0, 0.49742,-99) , 
5, 7, 1, 0, 0.4998,-99)    );
  // itree = 248
  fBoostWeights.push_back(0.00893947);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, -22.9624, 1, 1, 0.50238,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503536,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.463735,-99) , 
0, -9.14811, 0, 0, 0.494695,-99) , 
8, 1.81254, 1, 0, 0.500642,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489229,-99) , 
3, 23, 0, 0, 0.500319,-99)    );
  // itree = 249
  fBoostWeights.push_back(0.00402755);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 5, 1, 1, 0.506218,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500115,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.486296,-99) , 
2, -1.34857, 0, 0, 0.499504,-99) , 
3, 39, 1, 0, 0.500539,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488271,-99) , 
7, 1, 0, 0, 0.499996,-99)    );
  // itree = 250
  fBoostWeights.push_back(0.00431932);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.514886,-99) , 
NN(
0, 
0, 
-1, 25.473, 1, -1, 0.498874,-99) , 
1, 45.8558, 0, 0, 0.499531,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.484748,-99) , 
1, 69.6359, 1, 0, 0.49902,-99)    );
  // itree = 251
  fBoostWeights.push_back(0.0119939);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.540429,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.47184,-99) , 
8, 1.51716, 1, 0, 0.508023,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505612,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497782,-99) , 
5, 2, 1, 0, 0.49949,-99) , 
0, 21.2438, 0, 0, 0.500257,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.48989,-99) , 
7, 1, 0, 0, 0.499797,-99)    );
  // itree = 252
  fBoostWeights.push_back(0.0142839);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.514616,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493469,-99) , 
0, -12.0709, 0, 0, 0.50965,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.525648,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49766,-99) , 
0, -21.0989, 1, 0, 0.499681,-99) , 
5, 10, 0, 0, 0.501857,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.508382,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.482724,-99) , 
5, 10, 1, 0, 0.500183,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.482878,-99) , 
5, 3, 0, 0, 0.494813,-99) , 
2, -0.763809, 0, 0, 0.500652,-99)    );
  // itree = 253
  fBoostWeights.push_back(0.0134828);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.541681,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.476237,-99) , 
8, 1.51696, 1, 0, 0.510918,-99) , 
NN(
NN(
0, 
0, 
-1, -3.06433, 0, 1, 0.514497,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50174,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.461504,-99) , 
1, 29.8968, 1, 0, 0.499857,-99) , 
1, 51.0496, 0, 0, 0.500761,-99) , 
0, 21.2453, 0, 0, 0.501667,-99)    );
  // itree = 254
  fBoostWeights.push_back(0.0109213);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.52165,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506109,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498878,-99) , 
0, -11.9567, 1, 0, 0.500713,-99) , 
0, 19.9837, 0, 0, 0.502103,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502707,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.481584,-99) , 
0, 21.8642, 1, 0, 0.499762,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510899,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.466738,-99) , 
0, -2.24146, 1, 0, 0.48531,-99) , 
5, 3, 1, 0, 0.497072,-99) , 
5, 4, 0, 0, 0.500206,-99)    );
  // itree = 255
  fBoostWeights.push_back(0.0115673);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.525593,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499925,-99) , 
9, 0, 0, 0, 0.507855,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.472224,-99) , 
5, 1, 0, 0, 0.50286,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.514317,-99) , 
NN(
0, 
0, 
-1, 8.93657, 1, -1, 0.496596,-99) , 
1, 51.1925, 0, 0, 0.497674,-99) , 
0, 9.08743, 0, 0, 0.499008,-99)    );
  // itree = 256
  fBoostWeights.push_back(0.0113779);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.53868,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.479253,-99) , 
8, 1.50974, 1, 0, 0.510267,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.519831,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499913,-99) , 
8, 1.67498, 0, 0, 0.506891,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501572,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494886,-99) , 
1, -4.31129, 0, 0, 0.499352,-99) , 
5, 1, 1, 0, 0.500337,-99) , 
0, 21.2443, 0, 0, 0.501221,-99)    );
  // itree = 257
  fBoostWeights.push_back(0.0123179);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 5, 0, 1, 0.520784,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.519206,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49128,-99) , 
1, 14.0148, 0, 0, 0.499247,-99) , 
9, 0, 0, 0, 0.506442,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.522358,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49838,-99) , 
1, 60.3483, 0, 0, 0.499517,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.486084,-99) , 
0, -32.5941, 0, 0, 0.498825,-99) , 
0, 9.08795, 0, 0, 0.500783,-99)    );
  // itree = 258
  fBoostWeights.push_back(0.0112451);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 9.08721, 0, 1, 0.504483,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503738,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.46465,-99) , 
1, 13.9645, 1, 0, 0.495759,-99) , 
8, 1.85465, 1, 0, 0.502899,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510322,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498604,-99) , 
0, -9.14565, 1, 0, 0.501552,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.485565,-99) , 
3, 40, 1, 0, 0.498069,-99) , 
3, 42, 0, 0, 0.501849,-99)    );
  // itree = 259
  fBoostWeights.push_back(0.0111881);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.538631,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.47585,-99) , 
8, 1.50974, 1, 0, 0.508493,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501842,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.482395,-99) , 
0, -31.435, 0, 0, 0.501013,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.485437,-99) , 
1, -32.2194, 0, 0, 0.500345,-99) , 
0, 21.2459, 0, 0, 0.501074,-99)    );
  // itree = 260
  fBoostWeights.push_back(0.0115877);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.519919,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507863,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499438,-99) , 
0, -11.9521, 1, 0, 0.501556,-99) , 
0, 19.991, 0, 0, 0.502773,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505718,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.48733,-99) , 
0, -11.0486, 0, 0, 0.502782,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506221,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.483962,-99) , 
8, 1.37764, 1, 0, 0.490333,-99) , 
1, 5.46975, 1, 0, 0.497616,-99) , 
5, 4, 0, 0, 0.500828,-99)    );
  // itree = 261
  fBoostWeights.push_back(0.00898651);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.519093,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502278,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.487854,-99) , 
8, 1.25208, 0, 0, 0.50056,-99) , 
0, 19.9797, 0, 0, 0.501779,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501051,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488921,-99) , 
5, 3, 1, 0, 0.498815,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.484312,-99) , 
2, -0.931905, 0, 0, 0.496987,-99) , 
5, 4, 0, 0, 0.499978,-99)    );
  // itree = 262
  fBoostWeights.push_back(0.00928663);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.515802,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507848,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488521,-99) , 
7, 19, 1, 0, 0.503241,-99) , 
7, 26, 0, 0, 0.505623,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505031,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49793,-99) , 
0, 9.08584, 0, 0, 0.499797,-99) , 
NN(
0, 
0, 
-1, 6.48276, 1, -1, 0.489548,-99) , 
8, 1.91139, 1, 0, 0.498673,-99) , 
3, 39, 1, 0, 0.499721,-99)    );
  // itree = 263
  fBoostWeights.push_back(0.0100065);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.54223,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.478991,-99) , 
8, 1.46458, 1, 0, 0.508792,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500653,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.480107,-99) , 
1, 30.0319, 1, 0, 0.499117,-99) , 
0, 21.2481, 0, 0, 0.499983,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.485829,-99) , 
1, 69.6624, 1, 0, 0.499499,-99)    );
  // itree = 264
  fBoostWeights.push_back(0.0075328);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.518208,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502691,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490889,-99) , 
7, 19, 1, 0, 0.499897,-99) , 
7, 26, 0, 0, 0.503335,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500835,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49329,-99) , 
8, 1.78144, 1, 0, 0.498766,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.485343,-99) , 
3, 42, 0, 0, 0.498004,-99) , 
3, 40, 1, 0, 0.498908,-99)    );
  // itree = 265
  fBoostWeights.push_back(0.0096599);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.521976,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.522403,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497617,-99) , 
0, -23.323, 1, 0, 0.499604,-99) , 
0, 21.2503, 0, 0, 0.501574,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500457,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.485277,-99) , 
0, 15.1664, 1, 0, 0.49831,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.479013,-99) , 
1, -22.9845, 0, 0, 0.496744,-99) , 
2, -0.0371429, 0, 0, 0.499327,-99)    );
  // itree = 266
  fBoostWeights.push_back(0.00985277);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.519816,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504719,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493839,-99) , 
7, 11, 0, 0, 0.499675,-99) , 
7, 26, 0, 0, 0.503471,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.525257,-99) , 
NN(
0, 
0, 
-1, 42, 0, -1, 0.496462,-99) , 
2, 1.65333, 0, 0, 0.497447,-99) , 
3, 40, 1, 0, 0.498463,-99)    );
  // itree = 267
  fBoostWeights.push_back(0.00814794);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.519108,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501835,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.485862,-99) , 
0, 13.1396, 1, 0, 0.500271,-99) , 
0, 21.2451, 0, 0, 0.501942,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50019,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.485391,-99) , 
0, 15.165, 1, 0, 0.498094,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.481091,-99) , 
1, -22.7392, 0, 0, 0.496678,-99) , 
2, -0.0371429, 0, 0, 0.4995,-99)    );
  // itree = 268
  fBoostWeights.push_back(0.0107373);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.539688,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.481037,-99) , 
8, 1.51696, 1, 0, 0.51216,-99) , 
NN(
0, 
0, 
-1, 29.9548, 1, -1, 0.497508,-99) , 
0, 21.2462, 0, 0, 0.498807,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.482254,-99) , 
1, 69.6344, 1, 0, 0.498238,-99)    );
  // itree = 269
  fBoostWeights.push_back(0.0146258);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.54703,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.485458,-99) , 
8, 1.45312, 1, 0, 0.510662,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502937,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.480689,-99) , 
0, -21.9343, 0, 0, 0.500513,-99) , 
1, 23.2422, 0, 0, 0.501997,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501591,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.47868,-99) , 
8, 1.24297, 0, 0, 0.498828,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.48357,-99) , 
0, -11.0498, 0, 0, 0.496335,-99) , 
5, 4, 0, 0, 0.499867,-99)    );
  // itree = 270
  fBoostWeights.push_back(0.00768463);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.520902,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.521654,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49961,-99) , 
0, -23.3268, 1, 0, 0.501389,-99) , 
0, 21.2484, 0, 0, 0.50311,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.513072,-99) , 
NN(
0, 
0, 
-1, 1, 0, -1, 0.496882,-99) , 
3, 31, 1, 0, 0.498197,-99) , 
2, -0.00476195, 0, 0, 0.500759,-99)    );
  // itree = 271
  fBoostWeights.push_back(0.0097815);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.515602,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.508097,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498726,-99) , 
5, 10, 0, 0, 0.500777,-99) , 
1, -22.9185, 1, 0, 0.50197,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502692,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.486706,-99) , 
5, 11, 1, 0, 0.499316,-99) , 
NN(
0, 
0, 
-1, -0.910476, 0, -1, 0.491044,-99) , 
5, 4, 0, 0, 0.496169,-99) , 
2, -0.150476, 0, 0, 0.499593,-99)    );
  // itree = 272
  fBoostWeights.push_back(0.0105184);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.522304,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503857,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.487297,-99) , 
8, 1.25106, 0, 0, 0.501918,-99) , 
1, -22.8629, 1, 0, 0.503559,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.515311,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498091,-99) , 
1, 51.0938, 0, 0, 0.499322,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.485859,-99) , 
6, 1, 0, 0, 0.497882,-99) , 
2, -0.0371429, 0, 0, 0.500916,-99)    );
  // itree = 273
  fBoostWeights.push_back(0.0221704);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, -21.4679, 1, 1, 0.539715,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502173,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.453515,-99) , 
1, -21.485, 0, 0, 0.476716,-99) , 
8, 1.48912, 1, 0, 0.505603,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510535,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.469943,-99) , 
0, -17.7309, 0, 0, 0.50409,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506685,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49609,-99) , 
1, 23.4309, 0, 0, 0.497932,-99) , 
5, 9, 0, 0, 0.499732,-99) , 
1, -13.5587, 1, 0, 0.500675,-99)    );
  // itree = 274
  fBoostWeights.push_back(0.010731);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.517466,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498638,-99) , 
0, -15.2291, 1, 0, 0.50152,-99) , 
NN(
0, 
0, 
-1, -9.60263, 0, -1, 0.490194,-99) , 
8, 1.84248, 1, 0, 0.499368,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.483245,-99) , 
1, 69.6435, 1, 0, 0.498818,-99)    );
  // itree = 275
  fBoostWeights.push_back(0.0162116);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.56373,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.469636,-99) , 
8, 1.44225, 1, 0, 0.510908,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503034,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.477657,-99) , 
1, 30.0016, 1, 0, 0.501158,-99) , 
0, -21.3046, 1, 0, 0.502009,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488965,-99) , 
1, 69.6344, 1, 0, 0.501566,-99)    );
  // itree = 276
  fBoostWeights.push_back(0.0152214);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.527021,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.48165,-99) , 
8, 1.51696, 1, 0, 0.505592,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.527333,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493964,-99) , 
0, -0.286484, 0, 0, 0.506018,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501032,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492342,-99) , 
0, 0.981827, 1, 0, 0.497141,-99) , 
5, 2, 1, 0, 0.499072,-99) , 
0, 21.245, 0, 0, 0.499652,-99)    );
  // itree = 277
  fBoostWeights.push_back(0.0143441);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.529294,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.480144,-99) , 
8, 1.51708, 1, 0, 0.506106,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.521172,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495931,-99) , 
0, -0.285358, 0, 0, 0.505054,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.508733,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496215,-99) , 
1, 51.0863, 0, 0, 0.496998,-99) , 
5, 2, 1, 0, 0.498749,-99) , 
0, 21.245, 0, 0, 0.499408,-99)    );
  // itree = 278
  fBoostWeights.push_back(0.00751157);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 1.31742, 1, 1, 0.503093,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489413,-99) , 
8, 1.16289, 0, 0, 0.502275,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488843,-99) , 
3, 23, 0, 0, 0.501897,-99)    );
  // itree = 279
  fBoostWeights.push_back(0.0175542);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.535027,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.483297,-99) , 
8, 1.53877, 1, 0, 0.509633,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502441,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492389,-99) , 
0, -2.58173, 0, 0, 0.499708,-99) , 
0, -9.56882, 1, 0, 0.502025,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.514022,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496477,-99) , 
9, 0, 0, 0, 0.501105,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.476917,-99) , 
0, -24.2344, 0, 0, 0.498167,-99) , 
5, 8, 1, 0, 0.500635,-99)    );
  // itree = 280
  fBoostWeights.push_back(0.00837232);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 44, 1, 1, 0.512815,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504396,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493745,-99) , 
0, -9.14433, 0, 0, 0.501696,-99) , 
7, 20, 1, 0, 0.503902,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.513558,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499845,-99) , 
7, 1, 1, 0, 0.50098,-99) , 
NN(
0, 
0, 
-1, 39, 1, -1, 0.493188,-99) , 
3, 42, 0, 0, 0.499305,-99) , 
7, 17, 0, 0, 0.5013,-99)    );
  // itree = 281
  fBoostWeights.push_back(0.00804876);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 46.9832, 0, 1, 0.503072,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500935,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.481791,-99) , 
1, -13.7234, 1, 0, 0.495509,-99) , 
1, -9.57568, 0, 0, 0.501331,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.487094,-99) , 
1, 69.607, 1, 0, 0.500839,-99)    );
  // itree = 282
  fBoostWeights.push_back(0.00744041);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, -22.8436, 1, 1, 0.502236,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490873,-99) , 
7, 1, 0, 0, 0.501718,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506679,-99) , 
NN(
0, 
0, 
-1, 40, 1, -1, 0.487727,-99) , 
3, 45, 0, 0, 0.494312,-99) , 
2, -0.830476, 0, 0, 0.500604,-99)    );
  // itree = 283
  fBoostWeights.push_back(0.0117024);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.530635,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498972,-99) , 
0, 3.63164, 0, 0, 0.506142,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502384,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.47599,-99) , 
0, 13.2937, 1, 0, 0.498104,-99) , 
9, 0, 0, 0, 0.50098,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512947,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497918,-99) , 
1, -22.597, 1, 0, 0.499253,-99) , 
NN(
0, 
0, 
-1, 5.93497, 1, -1, 0.485792,-99) , 
8, 1.84305, 1, 0, 0.496683,-99) , 
5, 6, 0, 0, 0.498792,-99)    );
  // itree = 284
  fBoostWeights.push_back(0.0119556);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.555414,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497995,-99) , 
9, 0, 1, 0, 0.511602,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505676,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49703,-99) , 
7, 26, 0, 0, 0.498508,-99) , 
0, -9.56537, 1, 0, 0.501566,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501645,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.480747,-99) , 
1, 23.6604, 1, 0, 0.498971,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.48015,-99) , 
0, -24.2328, 0, 0, 0.496679,-99) , 
5, 8, 1, 0, 0.499803,-99)    );
  // itree = 285
  fBoostWeights.push_back(0.0188459);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.5499,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498442,-99) , 
0, -11.6725, 1, 0, 0.510266,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502714,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.476723,-99) , 
0, 18.5207, 1, 0, 0.499099,-99) , 
8, 1.3767, 1, 0, 0.501978,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.508893,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.484604,-99) , 
8, 1.49347, 0, 0, 0.499561,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502272,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.471546,-99) , 
5, 10, 1, 0, 0.486426,-99) , 
0, -17.7371, 0, 0, 0.497329,-99) , 
5, 7, 1, 0, 0.499994,-99)    );
  // itree = 286
  fBoostWeights.push_back(0.0103499);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.538453,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.479961,-99) , 
8, 1.44979, 1, 0, 0.506253,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.529994,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498456,-99) , 
1, 72.7734, 0, 0, 0.49938,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.485351,-99) , 
1, -31.9321, 0, 0, 0.498762,-99) , 
0, 21.2435, 0, 0, 0.499427,-99)    );
  // itree = 287
  fBoostWeights.push_back(0.00454491);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.509184,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500418,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.485038,-99) , 
1, -32.043, 0, 0, 0.499751,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.484355,-99) , 
0, -18.7001, 0, 0, 0.498887,-99) , 
0, -27.3842, 1, 0, 0.499458,-99)    );
  // itree = 288
  fBoostWeights.push_back(0.00857678);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.526589,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490618,-99) , 
8, 1.51696, 1, 0, 0.509408,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.508177,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498733,-99) , 
5, 1, 1, 0, 0.499963,-99) , 
0, 21.2474, 0, 0, 0.500799,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504878,-99) , 
NN(
0, 
0, 
-1, 42, 1, -1, 0.488503,-99) , 
3, 45, 0, 0, 0.494044,-99) , 
2, -0.941429, 0, 0, 0.499977,-99)    );
  // itree = 289
  fBoostWeights.push_back(0.0153995);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.541858,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494554,-99) , 
0, -9.14717, 1, 0, 0.509155,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503779,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.482046,-99) , 
1, -13.5049, 0, 0, 0.500502,-99) , 
8, 1.34473, 1, 0, 0.502311,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503604,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492213,-99) , 
7, 20, 1, 0, 0.499682,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.484796,-99) , 
5, 11, 1, 0, 0.497684,-99) , 
3, 43, 0, 0, 0.501079,-99)    );
  // itree = 290
  fBoostWeights.push_back(0.00812923);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0.0685714, 1, 1, 0.503633,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501235,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493332,-99) , 
6, 2, 0, 0, 0.498431,-99) , 
2, -0.162381, 0, 0, 0.501222,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510066,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49739,-99) , 
3, 45, 0, 0, 0.502464,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.486458,-99) , 
5, 4, 0, 0, 0.496433,-99) , 
2, 1.04714, 1, 0, 0.500621,-99)    );
  // itree = 291
  fBoostWeights.push_back(0.0139689);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.560107,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.464776,-99) , 
8, 1.44826, 1, 0, 0.506993,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.5025,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497525,-99) , 
1, 10.2185, 1, 0, 0.500756,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.475353,-99) , 
1, -17.0192, 0, 0, 0.499617,-99) , 
1, -22.7392, 1, 0, 0.50022,-99)    );
  // itree = 292
  fBoostWeights.push_back(0.00764448);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.530554,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.48592,-99) , 
5, 8, 1, 0, 0.504556,-99) , 
NN(
0, 
0, 
-1, -17.252, 0, -1, 0.498136,-99) , 
0, -21.3045, 1, 0, 0.498695,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488694,-99) , 
2, -1.45857, 0, 0, 0.498313,-99)    );
  // itree = 293
  fBoostWeights.push_back(0.0214212);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.526419,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.484542,-99) , 
8, 1.50488, 1, 0, 0.506061,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.509138,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495663,-99) , 
8, 1.67641, 0, 0, 0.501233,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.526968,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.481645,-99) , 
8, 1.38554, 1, 0, 0.495508,-99) , 
1, 14.0834, 1, 0, 0.499918,-99) , 
0, 21.2451, 0, 0, 0.500466,-99)    );
  // itree = 294
  fBoostWeights.push_back(0.025236);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.543067,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498152,-99) , 
8, 1.45073, 1, 0, 0.525965,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.518811,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496304,-99) , 
1, -13.5475, 1, 0, 0.50014,-99) , 
0, -15.2299, 1, 0, 0.504347,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.51078,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.48035,-99) , 
0, 7.35063, 1, 0, 0.50143,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.455887,-99) , 
0, -15.2273, 0, 0, 0.49603,-99) , 
8, 1.67538, 1, 0, 0.501092,-99)    );
  // itree = 295
  fBoostWeights.push_back(0.0177753);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.551261,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.484056,-99) , 
1, 55.0461, 1, 0, 0.52747,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.52288,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.450703,-99) , 
1, 58.6516, 0, 0, 0.480617,-99) , 
8, 1.56038, 1, 0, 0.50572,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.508212,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498503,-99) , 
5, 2, 1, 0, 0.500643,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.480009,-99) , 
0, 27.3241, 1, 0, 0.499651,-99) , 
1, 23.4166, 0, 0, 0.50054,-99)    );
  // itree = 296
  fBoostWeights.push_back(0.0174621);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.546582,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.519408,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.467756,-99) , 
1, 55.0585, 0, 0, 0.490009,-99) , 
8, 1.37804, 1, 0, 0.508123,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503105,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.484224,-99) , 
0, -24.7808, 0, 0, 0.501964,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.482218,-99) , 
0, 27.3242, 1, 0, 0.501008,-99) , 
1, 23.3615, 0, 0, 0.502052,-99)    );
  // itree = 297
  fBoostWeights.push_back(0.0164742);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.540166,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.46775,-99) , 
8, 1.54052, 1, 0, 0.507646,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.515422,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492105,-99) , 
8, 1.44646, 0, 0, 0.506764,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500463,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492372,-99) , 
0, -1.04264, 0, 0, 0.496814,-99) , 
5, 10, 0, 0, 0.498854,-99) , 
0, -21.3053, 1, 0, 0.499621,-99)    );
  // itree = 298
  fBoostWeights.push_back(0.00907055);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.539045,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.472189,-99) , 
8, 1.53877, 1, 0, 0.508948,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.515476,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499461,-99) , 
1, 69.5474, 0, 0, 0.5,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.481235,-99) , 
0, -17.2545, 0, 0, 0.499286,-99) , 
0, -21.3072, 1, 0, 0.50013,-99)    );
  // itree = 299
  fBoostWeights.push_back(0.0132967);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.514798,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504845,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494167,-99) , 
8, 1.80428, 1, 0, 0.502312,-99) , 
3, 29, 1, 0, 0.503042,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510115,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.4889,-99) , 
5, 4, 0, 0, 0.502048,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.479702,-99) , 
8, 1.75414, 1, 0, 0.495033,-99) , 
2, 1.04714, 1, 0, 0.50203,-99)    );
  // itree = 300
  fBoostWeights.push_back(0.0301621);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 7, 1, 1, 0.53881,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.533115,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.474908,-99) , 
0, 11.6968, 0, 0, 0.495457,-99) , 
0, -9.14367, 1, 0, 0.508478,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505136,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.48926,-99) , 
1, 18.1802, 1, 0, 0.501863,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.514373,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.46777,-99) , 
1, -17.4733, 0, 0, 0.480943,-99) , 
1, -13.5118, 0, 0, 0.498747,-99) , 
8, 1.3767, 1, 0, 0.50128,-99)    );
  // itree = 301
  fBoostWeights.push_back(0.01903);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.554974,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493049,-99) , 
1, 51.4842, 1, 0, 0.531168,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.528801,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.460029,-99) , 
1, 58.5597, 0, 0, 0.487833,-99) , 
8, 1.50987, 1, 0, 0.508524,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503881,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495715,-99) , 
5, 3, 1, 0, 0.498089,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.479274,-99) , 
0, 27.3267, 1, 0, 0.497176,-99) , 
1, 23.3541, 0, 0, 0.49884,-99)    );
  // itree = 302
  fBoostWeights.push_back(0.0135654);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.528212,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503418,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497154,-99) , 
9, 0, 1, 0, 0.500598,-99) , 
0, 21.0388, 0, 0, 0.502637,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510259,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490631,-99) , 
0, -0.890112, 0, 0, 0.497873,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.47088,-99) , 
0, 19.977, 1, 0, 0.493773,-99) , 
5, 2, 0, 0, 0.50058,-99)    );
  // itree = 303
  fBoostWeights.push_back(0.0151339);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.53861,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.516102,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.479479,-99) , 
1, 55.1599, 0, 0, 0.495301,-99) , 
8, 1.37794, 1, 0, 0.509088,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.524563,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.487226,-99) , 
2, -0.0957142, 0, 0, 0.507906,-99) , 
NN(
0, 
0, 
-1, 21.245, 1, -1, 0.497014,-99) , 
1, -22.2988, 1, 0, 0.49809,-99) , 
1, 23.4723, 0, 0, 0.499691,-99)    );
  // itree = 304
  fBoostWeights.push_back(0.013911);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.538204,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.513145,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.473176,-99) , 
1, 55.0469, 0, 0, 0.490736,-99) , 
8, 1.45312, 1, 0, 0.510167,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501903,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.486909,-99) , 
1, -28.1513, 0, 0, 0.500947,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.482057,-99) , 
0, 27.3258, 1, 0, 0.500034,-99) , 
1, 23.3522, 0, 0, 0.501518,-99)    );
  // itree = 305
  fBoostWeights.push_back(0.0135518);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.540406,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498349,-99) , 
8, 1.45, 1, 0, 0.515356,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502814,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.48061,-99) , 
0, -27.1723, 0, 0, 0.501135,-99) , 
1, 23.3478, 0, 0, 0.503214,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.514144,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496928,-99) , 
9, 0, 1, 0, 0.500394,-99) , 
NN(
0, 
0, 
-1, 1, 0, -1, 0.486393,-99) , 
0, 6.56175, 1, 0, 0.495764,-99) , 
5, 4, 0, 0, 0.500407,-99)    );
  // itree = 306
  fBoostWeights.push_back(0.0113626);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.544374,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489406,-99) , 
1, 55.0033, 1, 0, 0.525241,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.514914,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.471197,-99) , 
1, 62.1402, 0, 0, 0.48762,-99) , 
8, 1.5602, 1, 0, 0.507824,-99) , 
NN(
0, 
0, 
-1, 27.3242, 1, -1, 0.49826,-99) , 
1, 23.3419, 0, 0, 0.499672,-99)    );
  // itree = 307
  fBoostWeights.push_back(0.0144994);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.542165,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492312,-99) , 
1, 54.9522, 1, 0, 0.524724,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.523977,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.468865,-99) , 
1, 62.0901, 0, 0, 0.489479,-99) , 
8, 1.5602, 1, 0, 0.508366,-99) , 
NN(
NN(
0, 
0, 
-1, 18, 0, 1, 0.502684,-99) , 
NN(
0, 
0, 
-1, 1.67586, 1, -1, 0.495088,-99) , 
7, 20, 1, 0, 0.500032,-99) , 
1, 23.3522, 0, 0, 0.501252,-99)    );
  // itree = 308
  fBoostWeights.push_back(0.0101543);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.537132,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.514128,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.478371,-99) , 
1, 51.6045, 0, 0, 0.495048,-99) , 
8, 1.37798, 1, 0, 0.508537,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512829,-99) , 
NN(
0, 
0, 
-1, 27.3239, 1, -1, 0.498799,-99) , 
1, -33.8403, 1, 0, 0.49952,-99) , 
1, 23.4166, 0, 0, 0.500838,-99)    );
  // itree = 309
  fBoostWeights.push_back(0.0106943);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.55724,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490033,-99) , 
8, 1.42445, 1, 0, 0.518019,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.519268,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498453,-99) , 
0, 27.3255, 0, 0, 0.499761,-99) , 
0, -21.3044, 1, 0, 0.501351,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.485189,-99) , 
1, 69.6359, 1, 0, 0.500797,-99)    );
  // itree = 310
  fBoostWeights.push_back(0.0147199);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.528435,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490969,-99) , 
8, 1.56271, 1, 0, 0.510759,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.519153,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498398,-99) , 
0, 29.0601, 0, 0, 0.499809,-99) , 
0, -9.14873, 1, 0, 0.502635,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.483938,-99) , 
1, 69.6079, 1, 0, 0.501991,-99)    );
  // itree = 311
  fBoostWeights.push_back(0.0120648);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.551257,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491055,-99) , 
8, 1.42417, 1, 0, 0.516257,-99) , 
NN(
0, 
0, 
-1, 27.3262, 0, 1, 0.504034,-99) , 
0, -21.3029, 1, 0, 0.505105,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493525,-99) , 
1, 69.6344, 1, 0, 0.504709,-99)    );
  // itree = 312
  fBoostWeights.push_back(0.00880139);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512338,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.528257,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488908,-99) , 
8, 1.47153, 1, 0, 0.50675,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.529589,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499542,-99) , 
1, 69.7434, 0, 0, 0.500547,-99) , 
0, 16.0369, 0, 0, 0.501438,-99) , 
0, -27.3821, 1, 0, 0.502041,-99)    );
  // itree = 313
  fBoostWeights.push_back(0.0135034);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.537218,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.48823,-99) , 
8, 1.53877, 1, 0, 0.515319,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504478,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.48979,-99) , 
1, -25.4651, 0, 0, 0.503511,-99) , 
0, -21.3054, 1, 0, 0.504544,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491567,-99) , 
1, 69.6079, 1, 0, 0.504102,-99)    );
  // itree = 314
  fBoostWeights.push_back(0.01126);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, -3.07294, 1, 1, 0.512507,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504184,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494665,-99) , 
8, 1.27012, 0, 0, 0.502838,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.480576,-99) , 
1, -17.1034, 0, 0, 0.501844,-99) , 
1, -22.8293, 1, 0, 0.502712,-99)    );
  // itree = 315
  fBoostWeights.push_back(0.0131221);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.543332,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.48712,-99) , 
8, 1.42406, 1, 0, 0.510438,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50416,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495751,-99) , 
9, 0, 0, 0, 0.499807,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.481298,-99) , 
0, -17.252, 0, 0, 0.499107,-99) , 
0, -21.3044, 1, 0, 0.500092,-99)    );
  // itree = 316
  fBoostWeights.push_back(0.0103224);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.534872,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491532,-99) , 
5, 8, 1, 0, 0.509534,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507639,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498008,-99) , 
5, 10, 0, 0, 0.499985,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.479997,-99) , 
0, -17.2553, 0, 0, 0.49922,-99) , 
0, -21.3079, 1, 0, 0.50012,-99)    );
  // itree = 317
  fBoostWeights.push_back(0.0101168);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.529332,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495252,-99) , 
2, -0.092381, 0, 0, 0.514246,-99) , 
NN(
NN(
0, 
0, 
-1, 15.6146, 0, 1, 0.503189,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.481744,-99) , 
1, -17.1036, 0, 0, 0.502226,-99) , 
1, -22.8293, 1, 0, 0.503208,-99)    );
  // itree = 318
  fBoostWeights.push_back(0.010763);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.524129,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493893,-99) , 
2, -0.042381, 0, 0, 0.510029,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.531405,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496909,-99) , 
8, 1.38587, 1, 0, 0.508055,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500417,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.47161,-99) , 
0, 21.2453, 1, 0, 0.498475,-99) , 
1, 17.2323, 0, 0, 0.500563,-99) , 
1, -22.841, 1, 0, 0.50133,-99)    );
  // itree = 319
  fBoostWeights.push_back(0.00993117);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, -3.07028, 1, 1, 0.509128,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.529893,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495599,-99) , 
8, 1.38554, 1, 0, 0.506687,-99) , 
NN(
0, 
0, 
-1, 21.2453, 1, -1, 0.497638,-99) , 
1, 17.2479, 0, 0, 0.499604,-99) , 
1, -22.8178, 1, 0, 0.500382,-99)    );
  // itree = 320
  fBoostWeights.push_back(0.0073758);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.546831,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493929,-99) , 
8, 1.42397, 1, 0, 0.515943,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.513686,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499344,-99) , 
0, 27.3227, 0, 0, 0.500233,-99) , 
0, -21.3079, 1, 0, 0.501598,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.486548,-99) , 
1, 69.5861, 1, 0, 0.501077,-99)    );
  // itree = 321
  fBoostWeights.push_back(0.0110132);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.529441,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.485954,-99) , 
8, 1.53877, 1, 0, 0.509699,-99) , 
NN(
NN(
0, 
0, 
-1, 15.1663, 0, 1, 0.503963,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.51613,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497086,-99) , 
0, -13.2013, 1, 0, 0.498384,-99) , 
9, 0, 0, 0, 0.501107,-99) , 
0, -21.3071, 1, 0, 0.501856,-99)    );
  // itree = 322
  fBoostWeights.push_back(0.0133176);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.553559,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.475286,-99) , 
8, 1.44263, 1, 0, 0.509387,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.52915,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497309,-99) , 
8, 1.38554, 1, 0, 0.507616,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500208,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.485638,-99) , 
0, 15.1683, 1, 0, 0.498421,-99) , 
1, 17.1479, 0, 0, 0.500421,-99) , 
1, -22.8958, 1, 0, 0.501145,-99)    );
  // itree = 323
  fBoostWeights.push_back(0.0106298);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.524062,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.517972,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.483618,-99) , 
1, 51.6563, 0, 0, 0.499771,-99) , 
8, 1.3779, 1, 0, 0.507523,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501732,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.487307,-99) , 
0, 24.7211, 1, 0, 0.50084,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.486797,-99) , 
0, -27.3821, 0, 0, 0.500175,-99) , 
1, 23.5002, 0, 0, 0.501247,-99)    );
  // itree = 324
  fBoostWeights.push_back(0.0118748);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.531615,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497714,-99) , 
2, 0.249048, 0, 0, 0.511308,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.513301,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.516142,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496268,-99) , 
0, -23.3251, 1, 0, 0.497873,-99) , 
1, 60.4446, 0, 0, 0.498617,-99) , 
0, 21.2494, 0, 0, 0.499743,-99)    );
  // itree = 325
  fBoostWeights.push_back(0.00718256);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.537171,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49025,-99) , 
8, 1.42038, 1, 0, 0.509597,-99) , 
NN(
NN(
0, 
0, 
-1, 69.6359, 0, 1, 0.501378,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.48407,-99) , 
0, -17.2545, 0, 0, 0.500725,-99) , 
0, -21.3072, 1, 0, 0.501496,-99)    );
  // itree = 326
  fBoostWeights.push_back(0.0121364);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.528484,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490038,-99) , 
5, 3, 0, 0, 0.509407,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503457,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492365,-99) , 
1, -13.6277, 0, 0, 0.501863,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506176,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495111,-99) , 
1, -13.7054, 1, 0, 0.496852,-99) , 
7, 21, 0, 0, 0.498371,-99) , 
0, 21.2459, 0, 0, 0.499352,-99)    );
  // itree = 327
  fBoostWeights.push_back(0.010982);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.526318,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492694,-99) , 
5, 3, 0, 0, 0.509589,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.535081,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.483601,-99) , 
5, 9, 1, 0, 0.508828,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.528486,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498417,-99) , 
1, 69.5915, 0, 0, 0.499442,-99) , 
0, -23.3336, 1, 0, 0.500209,-99) , 
0, 21.2451, 0, 0, 0.501041,-99)    );
  // itree = 328
  fBoostWeights.push_back(0.00941947);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.53222,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493886,-99) , 
8, 1.46458, 1, 0, 0.511816,-99) , 
NN(
NN(
0, 
0, 
-1, -4.9734, 1, 1, 0.507259,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503541,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498006,-99) , 
9, 0, 1, 0, 0.500887,-99) , 
5, 1, 1, 0, 0.501717,-99) , 
0, 21.2453, 0, 0, 0.502616,-99)    );
  // itree = 329
  fBoostWeights.push_back(0.0103876);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.525673,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.523044,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496016,-99) , 
0, 14.877, 0, 0, 0.502632,-99) , 
0, -15.2266, 1, 0, 0.507027,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506225,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498413,-99) , 
5, 2, 1, 0, 0.500131,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.487041,-99) , 
0, 27.3249, 1, 0, 0.499521,-99) , 
1, 14.1658, 0, 0, 0.501314,-99)    );
  // itree = 330
  fBoostWeights.push_back(0.00738845);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.533769,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492069,-99) , 
8, 1.53987, 1, 0, 0.515029,-99) , 
NN(
0, 
0, 
-1, 27.3267, 0, 1, 0.501421,-99) , 
0, -21.3013, 1, 0, 0.502604,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.483138,-99) , 
1, 69.532, 1, 0, 0.501932,-99)    );
  // itree = 331
  fBoostWeights.push_back(0.0175406);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 0, 1, 0.512752,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50459,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.478536,-99) , 
8, 1.27254, 0, 0, 0.501227,-99) , 
0, 9.4949, 0, 0, 0.503897,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.522108,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.483688,-99) , 
8, 1.55791, 0, 0, 0.505703,-99) , 
NN(
0, 
0, 
-1, -11.0459, 0, -1, 0.494574,-99) , 
9, 0, 1, 0, 0.497989,-99) , 
5, 4, 0, 0, 0.501671,-99)    );
  // itree = 332
  fBoostWeights.push_back(0.0116793);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.52199,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.515409,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.481169,-99) , 
8, 1.6527, 1, 0, 0.502535,-99) , 
0, 15.1631, 0, 0, 0.506287,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500598,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.484918,-99) , 
0, -24.7771, 0, 0, 0.499682,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.484626,-99) , 
0, 27.3256, 1, 0, 0.498978,-99) , 
1, 14.1165, 0, 0, 0.500729,-99)    );
  // itree = 333
  fBoostWeights.push_back(0.00707401);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.513634,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50265,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49771,-99) , 
5, 7, 1, 0, 0.500424,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.487912,-99) , 
7, 1, 0, 0, 0.49986,-99) , 
0, 27.325, 0, 0, 0.500653,-99)    );
  // itree = 334
  fBoostWeights.push_back(0.0092988);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.516929,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.508678,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497363,-99) , 
0, 16.0347, 0, 0, 0.498987,-99) , 
0, -27.3862, 1, 0, 0.49998,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.484101,-99) , 
1, 69.6795, 1, 0, 0.499432,-99)    );
  // itree = 335
  fBoostWeights.push_back(0.0105943);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.525633,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499818,-99) , 
2, 0.125238, 0, 0, 0.511529,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.520491,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494521,-99) , 
8, 1.56275, 1, 0, 0.508465,-99) , 
NN(
0, 
0, 
-1, 21.2471, 1, -1, 0.497706,-99) , 
1, 17.3, 0, 0, 0.500035,-99) , 
1, -22.7553, 1, 0, 0.500969,-99)    );
  // itree = 336
  fBoostWeights.push_back(0.00634614);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.533177,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495618,-99) , 
5, 9, 1, 0, 0.515236,-99) , 
NN(
0, 
0, 
-1, 27.3251, 0, 1, 0.501225,-99) , 
0, -21.3053, 1, 0, 0.502452,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.48688,-99) , 
1, 69.6833, 1, 0, 0.501915,-99)    );
  // itree = 337
  fBoostWeights.push_back(0.0145627);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 12, 1, 1, 0.520276,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.520384,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495504,-99) , 
1, 69.5937, 0, 0, 0.499527,-99) , 
8, 1.38554, 1, 0, 0.506087,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506586,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491026,-99) , 
0, 15.1668, 1, 0, 0.504605,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507395,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494707,-99) , 
1, -22.8302, 1, 0, 0.496041,-99) , 
6, 2, 1, 0, 0.499273,-99) , 
1, 14.1393, 0, 0, 0.500905,-99)    );
  // itree = 338
  fBoostWeights.push_back(0.0140011);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.517608,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.470926,-99) , 
1, 69.6344, 1, 0, 0.511326,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.481068,-99) , 
8, 1.84316, 1, 0, 0.506494,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501864,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.485379,-99) , 
1, -28.2412, 0, 0, 0.500685,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488611,-99) , 
0, 27.3242, 1, 0, 0.500117,-99) , 
1, 14.0834, 0, 0, 0.501645,-99)    );
  // itree = 339
  fBoostWeights.push_back(0.0145625);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.52008,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.52423,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497323,-99) , 
0, 18.6373, 0, 0, 0.502458,-99) , 
0, -15.2299, 1, 0, 0.505823,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.544954,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.470038,-99) , 
8, 1.48122, 1, 0, 0.506166,-99) , 
NN(
0, 
0, 
-1, -15.2282, 0, -1, 0.497019,-99) , 
1, -22.7963, 1, 0, 0.497997,-99) , 
1, 14.1902, 0, 0, 0.499858,-99)    );
  // itree = 340
  fBoostWeights.push_back(0.00943691);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.523025,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.4984,-99) , 
8, 1.62971, 1, 0, 0.5134,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.48754,-99) , 
5, 2, 0, 0, 0.507283,-99) , 
NN(
NN(
0, 
0, 
-1, 18, 0, 1, 0.501761,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501141,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.487304,-99) , 
8, 1.68698, 1, 0, 0.495769,-99) , 
7, 20, 1, 0, 0.499666,-99) , 
1, 23.4309, 0, 0, 0.500775,-99)    );
  // itree = 341
  fBoostWeights.push_back(0.00546941);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507738,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.509783,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498567,-99) , 
1, 51.0938, 0, 0, 0.49926,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.48937,-99) , 
0, 18.6401, 1, 0, 0.498708,-99) , 
0, 27.3242, 0, 0, 0.499222,-99)    );
  // itree = 342
  fBoostWeights.push_back(0.0106717);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.518479,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.520681,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.483263,-99) , 
1, 58.5516, 0, 0, 0.498293,-99) , 
8, 1.45303, 1, 0, 0.506545,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501715,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.486565,-99) , 
0, 24.718, 1, 0, 0.500777,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.483664,-99) , 
0, -27.3848, 0, 0, 0.499982,-99) , 
1, 23.3478, 0, 0, 0.500947,-99)    );
  // itree = 343
  fBoostWeights.push_back(0.00938259);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.533896,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489603,-99) , 
8, 1.42397, 1, 0, 0.507928,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50479,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497787,-99) , 
5, 10, 0, 0, 0.499229,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.484413,-99) , 
0, -17.2527, 0, 0, 0.498668,-99) , 
0, -21.3053, 1, 0, 0.499469,-99)    );
  // itree = 344
  fBoostWeights.push_back(0.00660594);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.511853,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503505,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498546,-99) , 
9, 0, 0, 0, 0.500948,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491165,-99) , 
0, -18.6986, 0, 0, 0.500407,-99) , 
0, -27.3831, 1, 0, 0.501041,-99)    );
  // itree = 345
  fBoostWeights.push_back(0.00936582);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.520321,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.522726,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493599,-99) , 
0, -11.7607, 1, 0, 0.504988,-99) , 
0, 9.07902, 0, 0, 0.509839,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501459,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.484298,-99) , 
1, -28.2521, 0, 0, 0.500373,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.487099,-99) , 
0, 27.3234, 1, 0, 0.49973,-99) , 
1, 23.3228, 0, 0, 0.501219,-99)    );
  // itree = 346
  fBoostWeights.push_back(0.00869979);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 3, 0, 1, 0.516408,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491804,-99) , 
6, 2, 0, 0, 0.508867,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507162,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498484,-99) , 
6, 1, 1, 0, 0.499604,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.487727,-99) , 
0, -27.3841, 0, 0, 0.499046,-99) , 
1, 23.3758, 0, 0, 0.500482,-99)    );
  // itree = 347
  fBoostWeights.push_back(0.00689668);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.51272,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502628,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497676,-99) , 
5, 7, 1, 0, 0.500393,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488687,-99) , 
7, 1, 0, 0, 0.499867,-99) , 
0, 27.3239, 0, 0, 0.500601,-99)    );
  // itree = 348
  fBoostWeights.push_back(0.006314);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.525718,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490512,-99) , 
2, -0.0528573, 0, 0, 0.509459,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.517925,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499478,-99) , 
1, 69.7029, 0, 0, 0.500101,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.48268,-99) , 
0, -17.2538, 0, 0, 0.499438,-99) , 
0, -21.3062, 1, 0, 0.500308,-99)    );
  // itree = 349
  fBoostWeights.push_back(0.00787261);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.535995,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495571,-99) , 
1, 6.14107, 0, 0, 0.513896,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.515474,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498743,-99) , 
0, 27.3261, 0, 0, 0.499782,-99) , 
0, -21.303, 1, 0, 0.501008,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.486127,-99) , 
1, 69.6344, 1, 0, 0.500496,-99)    );
  // itree = 350
  fBoostWeights.push_back(0.015739);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, -3.07851, 1, 1, 0.510574,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512625,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491504,-99) , 
8, 1.75428, 1, 0, 0.507379,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507355,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493853,-99) , 
2, -0.368571, 1, 0, 0.498107,-99) , 
1, 17.0968, 0, 0, 0.500127,-99) , 
1, -22.9978, 1, 0, 0.500966,-99)    );
  // itree = 351
  fBoostWeights.push_back(0.00612016);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.51367,-99) , 
NN(
NN(
0, 
0, 
-1, 13, 1, 1, 0.502371,-99) , 
NN(
0, 
0, 
-1, 10, 1, -1, 0.49751,-99) , 
7, 11, 0, 0, 0.500461,-99) , 
0, 27.3276, 0, 0, 0.501215,-99)    );
  // itree = 352
  fBoostWeights.push_back(0.00609104);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.518981,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510364,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499904,-99) , 
0, -26.1304, 1, 0, 0.500686,-99) , 
0, 24.1754, 0, 0, 0.501828,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503933,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494355,-99) , 
7, 19, 1, 0, 0.500258,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.478263,-99) , 
0, 7.18459, 1, 0, 0.493876,-99) , 
5, 1, 0, 0, 0.500725,-99)    );
  // itree = 353
  fBoostWeights.push_back(0.00892024);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 23.3228, 0, 1, 0.503139,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.485453,-99) , 
3, 24, 0, 0, 0.50259,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510215,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491823,-99) , 
5, 8, 1, 0, 0.500597,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.482073,-99) , 
5, 3, 0, 0, 0.494783,-99) , 
2, -0.975715, 0, 0, 0.501692,-99)    );
  // itree = 354
  fBoostWeights.push_back(0.00882696);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512907,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50373,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49888,-99) , 
0, 1.27162, 1, 0, 0.501622,-99) , 
0, 27.3242, 0, 0, 0.502278,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.517522,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504039,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.485596,-99) , 
8, 1.403, 1, 0, 0.49088,-99) , 
3, 41, 1, 0, 0.496386,-99) , 
7, 27, 1, 0, 0.501522,-99)    );
  // itree = 355
  fBoostWeights.push_back(0.00711827);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.511057,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503828,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498267,-99) , 
9, 0, 1, 0, 0.500874,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490274,-99) , 
0, 18.639, 1, 0, 0.500285,-99) , 
0, 27.3234, 0, 0, 0.500901,-99)    );
  // itree = 356
  fBoostWeights.push_back(0.00927187);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.523101,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.51019,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.480528,-99) , 
5, 3, 0, 0, 0.501086,-99) , 
8, 1.37798, 1, 0, 0.5081,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512131,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501028,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.47427,-99) , 
0, 27.3242, 1, 0, 0.499853,-99) , 
1, -34.0485, 1, 0, 0.500489,-99) , 
1, 23.1973, 0, 0, 0.501609,-99)    );
  // itree = 357
  fBoostWeights.push_back(0.00687451);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.521111,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493088,-99) , 
8, 1.50979, 1, 0, 0.507578,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.509633,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499835,-99) , 
0, 9.47424, 0, 0, 0.500685,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507514,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.473234,-99) , 
8, 1.62843, 1, 0, 0.493719,-99) , 
0, 13.1408, 1, 0, 0.5,-99) , 
0, 21.2462, 0, 0, 0.50067,-99)    );
  // itree = 358
  fBoostWeights.push_back(0.00557371);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.516237,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.508518,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499986,-99) , 
0, 15.7902, 0, 0, 0.500622,-99) , 
0, 24.1747, 0, 0, 0.501598,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.509863,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496742,-99) , 
0, -2.52079, 0, 0, 0.500732,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.478325,-99) , 
0, 7.18398, 1, 0, 0.494211,-99) , 
5, 1, 0, 0, 0.500576,-99)    );
  // itree = 359
  fBoostWeights.push_back(0.00768514);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.540556,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497252,-99) , 
8, 1.42406, 1, 0, 0.515266,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501394,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.482947,-99) , 
1, 30.3976, 1, 0, 0.50031,-99) , 
0, -21.3006, 1, 0, 0.501597,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493505,-99) , 
1, 60.32, 1, 0, 0.501195,-99)    );
  // itree = 360
  fBoostWeights.push_back(0.00825586);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.521458,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.521381,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490761,-99) , 
1, 65.5795, 0, 0, 0.500433,-99) , 
8, 1.38587, 1, 0, 0.507346,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500774,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.487838,-99) , 
1, -28.278, 0, 0, 0.499953,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.48568,-99) , 
0, 27.3289, 1, 0, 0.499261,-99) , 
1, 23.2776, 0, 0, 0.500445,-99)    );
  // itree = 361
  fBoostWeights.push_back(0.00547346);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.519145,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498067,-99) , 
5, 8, 1, 0, 0.509114,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490917,-99) , 
5, 2, 0, 0, 0.504846,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500107,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.483934,-99) , 
0, 29.0622, 1, 0, 0.499386,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.486648,-99) , 
0, -27.3822, 0, 0, 0.498786,-99) , 
1, 23.4621, 0, 0, 0.499669,-99)    );
  // itree = 362
  fBoostWeights.push_back(0.00838433);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.524053,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497929,-99) , 
1, 62.0833, 1, 0, 0.51565,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49238,-99) , 
2, -0.52381, 0, 0, 0.509659,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500682,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491448,-99) , 
1, -16.6831, 0, 0, 0.499387,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.484891,-99) , 
0, -27.3659, 0, 0, 0.498709,-99) , 
1, 23.3601, 0, 0, 0.500314,-99)    );
  // itree = 363
  fBoostWeights.push_back(0.00742464);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, -37.0683, 1, 1, 0.508906,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.519572,-99) , 
NN(
0, 
0, 
-1, 55.9005, 1, -1, 0.497204,-99) , 
1, 74.4568, 0, 0, 0.497816,-99) , 
1, -22.9624, 1, 0, 0.498713,-99)    );
  // itree = 364
  fBoostWeights.push_back(0.0135787);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.554159,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.470563,-99) , 
8, 1.44639, 1, 0, 0.507338,-99) , 
NN(
NN(
0, 
0, 
-1, 20.9907, 1, 1, 0.504684,-99) , 
NN(
0, 
0, 
-1, -15.2223, 0, -1, 0.496381,-99) , 
1, 17.1697, 0, 0, 0.498193,-99) , 
1, -22.9506, 1, 0, 0.49893,-99)    );
  // itree = 365
  fBoostWeights.push_back(0.0112297);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 1.50524, 0, 1, 0.50594,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489311,-99) , 
3, 33, 0, 0, 0.50481,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501117,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492871,-99) , 
3, 43, 0, 0, 0.498689,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.480245,-99) , 
6, 1, 0, 0, 0.496727,-99) , 
2, -0.150476, 0, 0, 0.501496,-99)    );
  // itree = 366
  fBoostWeights.push_back(0.00464468);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.511022,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.522288,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499534,-99) , 
2, 1.72381, 0, 0, 0.500254,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.485995,-99) , 
2, -1.36143, 0, 0, 0.499612,-99) , 
3, 30, 1, 0, 0.500334,-99)    );
  // itree = 367
  fBoostWeights.push_back(0.00817752);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 1.42397, 1, 1, 0.515153,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.514119,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498153,-99) , 
0, 27.3244, 0, 0, 0.499156,-99) , 
0, -21.3071, 1, 0, 0.500551,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.485304,-99) , 
1, 69.6624, 1, 0, 0.500025,-99)    );
  // itree = 368
  fBoostWeights.push_back(0.00861136);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.520111,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50263,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.486537,-99) , 
1, 30.4433, 1, 0, 0.501673,-99) , 
0, -27.3838, 1, 0, 0.502688,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493691,-99) , 
1, 60.3759, 1, 0, 0.502243,-99)    );
  // itree = 369
  fBoostWeights.push_back(0.00680056);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.515713,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.508266,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499416,-99) , 
0, 15.7911, 0, 0, 0.500067,-99) , 
0, 24.1754, 0, 0, 0.501045,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510328,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496248,-99) , 
2, -0.109048, 1, 0, 0.502389,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.475877,-99) , 
0, 7.18462, 1, 0, 0.494693,-99) , 
5, 1, 0, 0, 0.500161,-99)    );
  // itree = 370
  fBoostWeights.push_back(0.0077019);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, -21.3046, 1, 1, 0.503745,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512991,-99) , 
NN(
0, 
0, 
-1, -0.902857, 0, -1, 0.496766,-99) , 
3, 30, 1, 0, 0.498046,-99) , 
2, -0.150476, 0, 0, 0.501409,-99)    );
  // itree = 371
  fBoostWeights.push_back(0.0108655);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.521526,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495473,-99) , 
5, 10, 1, 0, 0.513954,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493209,-99) , 
5, 2, 0, 0, 0.509061,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506756,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497737,-99) , 
5, 9, 0, 0, 0.500244,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.487938,-99) , 
0, -27.3862, 0, 0, 0.499662,-99) , 
1, 23.3487, 0, 0, 0.501038,-99)    );
  // itree = 372
  fBoostWeights.push_back(0.00701248);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 9.72093, 0, 1, 0.509019,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494832,-99) , 
5, 2, 0, 0, 0.505717,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.513661,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499395,-99) , 
1, -36.5646, 1, 0, 0.500229,-99) , 
NN(
0, 
0, 
-1, 1.42449, 0, -1, 0.493327,-99) , 
1, 8.77599, 1, 0, 0.499347,-99) , 
1, 14.0657, 0, 0, 0.500877,-99)    );
  // itree = 373
  fBoostWeights.push_back(0.0115285);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 8, 1, 1, 0.512953,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497069,-99) , 
5, 4, 0, 0, 0.506884,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506129,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496378,-99) , 
8, 1.44807, 0, 0, 0.502831,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504524,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494527,-99) , 
9, 0, 0, 0, 0.498226,-99) , 
5, 5, 1, 0, 0.500259,-99) , 
1, 23.4451, 0, 0, 0.501222,-99)    );
  // itree = 374
  fBoostWeights.push_back(0.00597018);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 24.1741, 0, 1, 0.501882,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.511136,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496076,-99) , 
0, -2.52054, 0, 0, 0.50065,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.481086,-99) , 
0, 7.18459, 1, 0, 0.494975,-99) , 
5, 1, 0, 0, 0.500923,-99)    );
  // itree = 375
  fBoostWeights.push_back(0.00909839);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.52273,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488296,-99) , 
5, 9, 1, 0, 0.506069,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502864,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497057,-99) , 
9, 0, 0, 0, 0.49985,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.486017,-99) , 
0, -17.2543, 0, 0, 0.499328,-99) , 
0, -21.3071, 1, 0, 0.499916,-99)    );
  // itree = 376
  fBoostWeights.push_back(0.0151913);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.537394,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.517029,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.474505,-99) , 
1, -17.5253, 0, 0, 0.486606,-99) , 
8, 1.42097, 1, 0, 0.5056,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504466,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498147,-99) , 
1, 16.877, 0, 0, 0.499845,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501807,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.468976,-99) , 
1, -11.2988, 0, 0, 0.489307,-99) , 
1, -8.27994, 0, 0, 0.498779,-99) , 
1, -13.563, 1, 0, 0.499875,-99)    );
  // itree = 377
  fBoostWeights.push_back(0.00646748);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.529101,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498448,-99) , 
1, 6.48143, 0, 0, 0.512086,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.514211,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499054,-99) , 
0, 27.3239, 0, 0, 0.499997,-99) , 
0, -21.3073, 1, 0, 0.501044,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.484962,-99) , 
1, 69.6359, 1, 0, 0.500492,-99)    );
  // itree = 378
  fBoostWeights.push_back(0.0109484);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.514742,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506329,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49998,-99) , 
9, 0, 1, 0, 0.503474,-99) , 
0, 21.04, 0, 0, 0.504299,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.51516,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497584,-99) , 
8, 1.73284, 0, 0, 0.502906,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.473895,-99) , 
0, 19.9767, 1, 0, 0.498454,-99) , 
5, 2, 0, 0, 0.502946,-99)    );
  // itree = 379
  fBoostWeights.push_back(0.0116784);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512373,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.48583,-99) , 
5, 1, 0, 0, 0.508641,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502577,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491164,-99) , 
1, 22.1056, 1, 0, 0.501281,-99) , 
0, 9.09439, 0, 0, 0.503176,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489997,-99) , 
1, 69.6624, 1, 0, 0.502726,-99)    );
  // itree = 380
  fBoostWeights.push_back(0.00790784);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.518006,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494302,-99) , 
1, 65.6665, 1, 0, 0.511344,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493382,-99) , 
2, -0.323809, 0, 0, 0.505258,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50137,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.487366,-99) , 
1, -28.1413, 0, 0, 0.500474,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.48703,-99) , 
0, -27.386, 0, 0, 0.499843,-99) , 
1, 23.3419, 0, 0, 0.500634,-99)    );
  // itree = 381
  fBoostWeights.push_back(0.0154212);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.516381,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.486912,-99) , 
8, 1.46805, 0, 0, 0.507579,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50318,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489873,-99) , 
0, -12.911, 0, 0, 0.498667,-99) , 
9, 0, 1, 0, 0.501997,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507846,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496171,-99) , 
0, 16.4334, 0, 0, 0.499569,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489964,-99) , 
5, 1, 0, 0, 0.498436,-99) , 
0, 3.00962, 1, 0, 0.500514,-99)    );
  // itree = 382
  fBoostWeights.push_back(0.00955666);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.516166,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.51292,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496317,-99) , 
7, 5, 1, 0, 0.500767,-99) , 
7, 26, 0, 0, 0.503666,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501122,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.483016,-99) , 
8, 1.96717, 1, 0, 0.500174,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.516113,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.480512,-99) , 
0, -9.14886, 1, 0, 0.491673,-99) , 
8, 1.2614, 0, 0, 0.49906,-99) , 
3, 40, 1, 0, 0.49984,-99)    );
  // itree = 383
  fBoostWeights.push_back(0.0105932);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.519614,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.508525,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494816,-99) , 
7, 15, 1, 0, 0.503331,-99) , 
7, 26, 0, 0, 0.506383,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.527332,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491905,-99) , 
8, 1.48923, 1, 0, 0.509013,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512958,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497473,-99) , 
1, 51.0436, 0, 0, 0.498437,-99) , 
0, -21.3079, 1, 0, 0.499364,-99) , 
3, 40, 1, 0, 0.500555,-99)    );
  // itree = 384
  fBoostWeights.push_back(0.00926375);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503125,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49613,-99) , 
5, 1, 0, 0, 0.502174,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.476773,-99) , 
8, 1.13927, 0, 0, 0.500988,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.486402,-99) , 
8, 1.96628, 1, 0, 0.500259,-99)    );
  // itree = 385
  fBoostWeights.push_back(0.0132773);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, -0.0047619, 0, 1, 0.514952,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500651,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.484168,-99) , 
2, -1.48667, 0, 0, 0.499315,-99) , 
2, -0.106667, 0, 0, 0.502315,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.520323,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.519408,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492816,-99) , 
0, -23.3336, 1, 0, 0.494945,-99) , 
0, 21.2451, 0, 0, 0.497173,-99) , 
2, 0.105238, 1, 0, 0.499926,-99)    );
  // itree = 386
  fBoostWeights.push_back(0.00769661);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50873,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501409,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494321,-99) , 
1, -5.79783, 0, 0, 0.499725,-99) , 
1, -22.9845, 1, 0, 0.500451,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507724,-99) , 
NN(
0, 
0, 
-1, 44, 0, -1, 0.491574,-99) , 
3, 38, 1, 0, 0.494629,-99) , 
2, -0.763809, 0, 0, 0.499456,-99)    );
  // itree = 387
  fBoostWeights.push_back(0.0107664);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.520062,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.518633,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490087,-99) , 
0, -9.15403, 1, 0, 0.49895,-99) , 
1, -17.5567, 0, 0, 0.50454,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501531,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495336,-99) , 
6, 2, 0, 0, 0.499324,-99) , 
NN(
0, 
0, 
-1, -10.8254, 0, -1, 0.48774,-99) , 
1, -8.30896, 0, 0, 0.498148,-99) , 
1, -13.5934, 1, 0, 0.499174,-99)    );
  // itree = 388
  fBoostWeights.push_back(0.0075108);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.526317,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499387,-99) , 
5, 9, 1, 0, 0.513338,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.515403,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498372,-99) , 
0, 27.3243, 0, 0, 0.499438,-99) , 
0, -21.3071, 1, 0, 0.500648,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488624,-99) , 
1, 69.6412, 1, 0, 0.500237,-99)    );
  // itree = 389
  fBoostWeights.push_back(0.010351);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512984,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505519,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49784,-99) , 
5, 3, 1, 0, 0.500175,-99) , 
1, -22.9624, 1, 0, 0.501205,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.508584,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492137,-99) , 
8, 1.54561, 0, 0, 0.500918,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503881,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.476849,-99) , 
3, 38, 1, 0, 0.48874,-99) , 
3, 44, 0, 0, 0.495662,-99) , 
2, -0.763809, 0, 0, 0.500257,-99)    );
  // itree = 390
  fBoostWeights.push_back(0.00562177);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512574,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501366,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489406,-99) , 
1, 37.951, 1, 0, 0.500731,-99) , 
0, -27.3842, 1, 0, 0.501385,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.486966,-99) , 
1, 69.6624, 1, 0, 0.500889,-99)    );
  // itree = 391
  fBoostWeights.push_back(0.00680944);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502473,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495999,-99) , 
7, 25, 1, 0, 0.501013,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.487598,-99) , 
1, 69.6624, 1, 0, 0.500552,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491053,-99) , 
7, 1, 0, 0, 0.500129,-99)    );
  // itree = 392
  fBoostWeights.push_back(0.0066505);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.513039,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500908,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494227,-99) , 
1, 8.02475, 1, 0, 0.498809,-99) , 
0, -27.3821, 1, 0, 0.499586,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490739,-99) , 
1, 60.3759, 1, 0, 0.499147,-99)    );
  // itree = 393
  fBoostWeights.push_back(0.0128267);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.518856,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499475,-99) , 
9, 0, 0, 0, 0.505459,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.481976,-99) , 
5, 1, 0, 0, 0.502163,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.513325,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504399,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494039,-99) , 
0, -15.2264, 1, 0, 0.496057,-99) , 
1, 69.6412, 0, 0, 0.496643,-99) , 
0, 9.08743, 0, 0, 0.498062,-99)    );
  // itree = 394
  fBoostWeights.push_back(0.00802095);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 47.062, 0, 1, 0.503424,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501082,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.485954,-99) , 
1, -13.6197, 1, 0, 0.496785,-99) , 
1, -9.47373, 0, 0, 0.501882,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488276,-99) , 
1, 69.6764, 1, 0, 0.501414,-99)    );
  // itree = 395
  fBoostWeights.push_back(0.0103253);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.548582,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488185,-99) , 
8, 1.38583, 1, 0, 0.510312,-99) , 
NN(
0, 
0, 
-1, -27.3744, 0, -1, 0.497552,-99) , 
1, 22.9771, 0, 0, 0.49888,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488376,-99) , 
1, 60.3983, 1, 0, 0.498358,-99)    );
  // itree = 396
  fBoostWeights.push_back(0.00874645);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 1.41117, 1, 1, 0.511396,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493826,-99) , 
2, -0.280952, 0, 0, 0.505084,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502032,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.483578,-99) , 
0, -24.7792, 0, 0, 0.500922,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.484858,-99) , 
0, 27.3247, 1, 0, 0.500142,-99) , 
1, 23.4166, 0, 0, 0.500864,-99)    );
  // itree = 397
  fBoostWeights.push_back(0.0192949);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.533278,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49464,-99) , 
8, 1.40191, 1, 0, 0.510663,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505164,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491715,-99) , 
8, 1.52148, 0, 0, 0.498231,-99) , 
1, -13.5801, 1, 0, 0.500332,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.508129,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.481062,-99) , 
0, 8.21548, 1, 0, 0.499849,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.474353,-99) , 
0, -9.14667, 0, 0, 0.494281,-99) , 
8, 1.8422, 1, 0, 0.499175,-99)    );
  // itree = 398
  fBoostWeights.push_back(0.0105442);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.516535,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.520283,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.486498,-99) , 
1, 58.56, 0, 0, 0.499855,-99) , 
8, 1.37817, 1, 0, 0.505196,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506441,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498441,-99) , 
5, 9, 0, 0, 0.50066,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.487007,-99) , 
0, -27.3799, 0, 0, 0.500019,-99) , 
1, 23.3228, 0, 0, 0.500774,-99)    );
  // itree = 399
  fBoostWeights.push_back(0.0164809);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.531763,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.477847,-99) , 
8, 1.61117, 1, 0, 0.510075,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505713,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498085,-99) , 
9, 0, 1, 0, 0.500984,-99) , 
1, -13.5587, 1, 0, 0.50245,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507664,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488191,-99) , 
0, -10.3982, 0, 0, 0.501548,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.485427,-99) , 
0, 10.9863, 1, 0, 0.498949,-99) , 
5, 8, 1, 0, 0.501183,-99)    );
  // itree = 400
  fBoostWeights.push_back(0.00669375);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.513222,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.509064,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498399,-99) , 
6, 1, 1, 0, 0.499727,-99) , 
0, -27.3841, 1, 0, 0.50046,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492178,-99) , 
1, 60.3759, 1, 0, 0.500046,-99)    );
  // itree = 401
  fBoostWeights.push_back(0.00755859);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.517213,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496653,-99) , 
9, 0, 1, 0, 0.50611,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.508497,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498016,-99) , 
0, -15.2283, 1, 0, 0.499528,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491106,-99) , 
1, 60.4132, 1, 0, 0.499107,-99) , 
7, 2, 1, 0, 0.499707,-99)    );
  // itree = 402
  fBoostWeights.push_back(0.0196933);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 0, 1, 0.508603,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.485522,-99) , 
5, 1, 0, 0, 0.505338,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504998,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.484749,-99) , 
0, -18.6978, 0, 0, 0.502436,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.517207,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.475334,-99) , 
0, -8.27591, 1, 0, 0.494483,-99) , 
8, 1.37764, 0, 0, 0.500473,-99) , 
0, 9.0902, 0, 0, 0.501728,-99)    );
  // itree = 403
  fBoostWeights.push_back(0.00581043);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.51514,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501134,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.486796,-99) , 
1, -29.4359, 0, 0, 0.500357,-99) , 
0, -27.3841, 1, 0, 0.501166,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489714,-99) , 
1, 60.4132, 1, 0, 0.500594,-99)    );
  // itree = 404
  fBoostWeights.push_back(0.00516457);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.514498,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497323,-99) , 
1, -36.9329, 1, 0, 0.505396,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.520464,-99) , 
NN(
0, 
0, 
-1, -18.2067, 0, -1, 0.49843,-99) , 
1, 74.4799, 0, 0, 0.49903,-99) , 
1, -22.841, 1, 0, 0.499545,-99)    );
  // itree = 405
  fBoostWeights.push_back(0.00889495);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.526868,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.483004,-99) , 
1, 54.9718, 1, 0, 0.511601,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.522175,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.483156,-99) , 
1, 62.0671, 0, 0, 0.497878,-99) , 
8, 1.5602, 1, 0, 0.505238,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500176,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.48715,-99) , 
0, -24.7749, 0, 0, 0.499392,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.486471,-99) , 
0, 27.3267, 1, 0, 0.498773,-99) , 
1, 23.2868, 0, 0, 0.499723,-99)    );
  // itree = 406
  fBoostWeights.push_back(0.0176671);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, -0.472381, 0, 1, 0.512473,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.519472,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.473739,-99) , 
9, 0, 0, 0, 0.491414,-99) , 
8, 1.53961, 1, 0, 0.501902,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50891,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.508084,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494823,-99) , 
0, -25.6494, 1, 0, 0.495886,-99) , 
1, 51.0785, 0, 0, 0.496683,-99) , 
0, 9.08717, 0, 0, 0.498027,-99)    );
  // itree = 407
  fBoostWeights.push_back(0.00559601);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 20, 0, 1, 0.510078,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500432,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492571,-99) , 
1, 21.9642, 1, 0, 0.499775,-99) , 
1, 41.7953, 0, 0, 0.500684,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503606,-99) , 
NN(
0, 
0, 
-1, -2.92777, 0, -1, 0.485714,-99) , 
8, 1.50111, 1, 0, 0.492886,-99) , 
6, 1, 0, 0, 0.499748,-99)    );
  // itree = 408
  fBoostWeights.push_back(0.0136744);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.517852,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494704,-99) , 
8, 1.6308, 1, 0, 0.508874,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501202,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.487336,-99) , 
0, 21.8744, 1, 0, 0.499688,-99) , 
1, 23.4407, 0, 0, 0.501018,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.521597,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492431,-99) , 
9, 0, 0, 0, 0.502481,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488741,-99) , 
8, 1.50227, 0, 0, 0.496743,-99) , 
5, 8, 1, 0, 0.499481,-99)    );
  // itree = 409
  fBoostWeights.push_back(0.00684269);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.542967,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494153,-99) , 
8, 1.37916, 1, 0, 0.51156,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491352,-99) , 
1, 62.1395, 1, 0, 0.505112,-99) , 
NN(
0, 
0, 
-1, -27.3815, 0, -1, 0.498692,-99) , 
1, 23.3419, 0, 0, 0.499631,-99)    );
  // itree = 410
  fBoostWeights.push_back(0.00754767);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.525021,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499561,-99) , 
2, 1.31048, 1, 0, 0.515232,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504617,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489274,-99) , 
0, -3.12356, 0, 0, 0.498228,-99) , 
3, 44, 1, 0, 0.504306,-99) , 
NN(
NN(
0, 
0, 
-1, 3.01933, 0, 1, 0.506408,-99) , 
NN(
0, 
0, 
-1, 42, 0, -1, 0.498408,-99) , 
3, 35, 1, 0, 0.499228,-99) , 
2, 0.734286, 0, 0, 0.500289,-99)    );
  // itree = 411
  fBoostWeights.push_back(0.00799178);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.521112,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510173,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.483305,-99) , 
6, 2, 0, 0, 0.502395,-99) , 
1, 30.3961, 1, 0, 0.506834,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501069,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488685,-99) , 
1, -28.1572, 0, 0, 0.500275,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.487043,-99) , 
0, -27.3797, 0, 0, 0.499653,-99) , 
1, 23.3419, 0, 0, 0.500699,-99)    );
  // itree = 412
  fBoostWeights.push_back(0.0130073);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.524361,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500378,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.46612,-99) , 
1, 63.0304, 1, 0, 0.498709,-99) , 
1, -22.841, 1, 0, 0.501095,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504571,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.466047,-99) , 
0, -15.2291, 0, 0, 0.500271,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.473943,-99) , 
1, -13.6187, 0, 0, 0.496752,-99) , 
8, 1.67632, 1, 0, 0.499402,-99)    );
  // itree = 413
  fBoostWeights.push_back(0.0100665);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.528664,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.482616,-99) , 
8, 1.56017, 1, 0, 0.509174,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494492,-99) , 
1, 62.1141, 1, 0, 0.504484,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.508469,-99) , 
NN(
0, 
0, 
-1, 27.3239, 1, -1, 0.497511,-99) , 
1, -33.9827, 1, 0, 0.498077,-99) , 
1, 23.3228, 0, 0, 0.499018,-99)    );
  // itree = 414
  fBoostWeights.push_back(0.010463);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.51618,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504266,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497533,-99) , 
6, 2, 1, 0, 0.500035,-99) , 
1, 69.7412, 0, 0, 0.500579,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.523341,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493593,-99) , 
9, 0, 0, 0, 0.502721,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.475451,-99) , 
8, 1.74065, 1, 0, 0.495926,-99) , 
0, 15.1708, 1, 0, 0.499894,-99)    );
  // itree = 415
  fBoostWeights.push_back(0.00856528);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.526497,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.480609,-99) , 
1, 58.5486, 1, 0, 0.512062,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502284,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490679,-99) , 
7, 16, 0, 0, 0.496083,-99) , 
8, 1.60347, 1, 0, 0.505437,-99) , 
NN(
NN(
0, 
0, 
-1, -38.0665, 1, 1, 0.501127,-99) , 
NN(
0, 
0, 
-1, 19.248, 1, -1, 0.495395,-99) , 
1, 6.14753, 1, 0, 0.499432,-99) , 
1, 23.3419, 0, 0, 0.50031,-99)    );
  // itree = 416
  fBoostWeights.push_back(0.0073802);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.518504,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493397,-99) , 
2, 0.0752381, 0, 0, 0.505366,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506285,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497695,-99) , 
2, 1.51286, 0, 0, 0.498115,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.487432,-99) , 
1, -17.2188, 0, 0, 0.497647,-99) , 
1, -22.9506, 1, 0, 0.498266,-99)    );
  // itree = 417
  fBoostWeights.push_back(0.00817416);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507959,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498679,-99) , 
8, 1.7699, 1, 0, 0.505429,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502475,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489906,-99) , 
1, 17.9436, 1, 0, 0.496871,-99) , 
2, -0.294762, 0, 0, 0.502438,-99) , 
NN(
NN(
0, 
0, 
-1, 4, 0, 1, 0.501503,-99) , 
NN(
0, 
0, 
-1, 15.1646, 1, -1, 0.496474,-99) , 
7, 16, 0, 0, 0.498803,-99) , 
1, 4.75462, 0, 0, 0.500375,-99)    );
  // itree = 418
  fBoostWeights.push_back(0.00365932);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.511535,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.511178,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499999,-99) , 
1, 51.0382, 0, 0, 0.500693,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489389,-99) , 
0, 18.6401, 1, 0, 0.500067,-99) , 
0, 27.3242, 0, 0, 0.500719,-99)    );
  // itree = 419
  fBoostWeights.push_back(0.00675078);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.511626,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507946,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497637,-99) , 
2, -0.208571, 0, 0, 0.502018,-99) , 
2, 0.333809, 0, 0, 0.505899,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510786,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501317,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.478661,-99) , 
1, -19.8766, 0, 0, 0.500071,-99) , 
1, -32.2194, 1, 0, 0.500595,-99) , 
6, 4, 0, 0, 0.501214,-99)    );
  // itree = 420
  fBoostWeights.push_back(0.00559129);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.527472,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495974,-99) , 
5, 9, 1, 0, 0.5123,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500508,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.48742,-99) , 
1, -25.3188, 0, 0, 0.499637,-99) , 
0, -21.3081, 1, 0, 0.500739,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491737,-99) , 
1, 69.6412, 1, 0, 0.500434,-99)    );
  // itree = 421
  fBoostWeights.push_back(0.00845646);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.513704,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512691,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494005,-99) , 
1, 14.5896, 0, 0, 0.501155,-99) , 
1, -4.70117, 1, 0, 0.504847,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50274,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497455,-99) , 
7, 12, 1, 0, 0.499599,-99) , 
NN(
0, 
0, 
-1, 11, 0, -1, 0.493551,-99) , 
3, 42, 0, 0, 0.498279,-99) , 
6, 4, 0, 0, 0.499043,-99)    );
  // itree = 422
  fBoostWeights.push_back(0.00747161);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 20, 0, 1, 0.513212,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500872,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495626,-99) , 
1, 9.10195, 1, 0, 0.499426,-99) , 
1, 42.0528, 0, 0, 0.500641,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506355,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491792,-99) , 
8, 1.56767, 1, 0, 0.498599,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.485713,-99) , 
2, -0.00761899, 0, 0, 0.493084,-99) , 
6, 1, 0, 0, 0.499735,-99)    );
  // itree = 423
  fBoostWeights.push_back(0.00976116);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 2, 1, 1, 0.511927,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50171,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494795,-99) , 
3, 43, 0, 0, 0.49983,-99) , 
2, 0.626667, 0, 0, 0.500974,-99) , 
NN(
NN(
0, 
0, 
-1, 5, 1, 1, 0.507757,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500351,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.480571,-99) , 
2, 1.47905, 0, 0, 0.486572,-99) , 
3, 44, 1, 0, 0.494195,-99) , 
2, 0.871905, 1, 0, 0.499833,-99)    );
  // itree = 424
  fBoostWeights.push_back(0.00658989);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 25, 1, 1, 0.508786,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501444,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490279,-99) , 
8, 1.24492, 0, 0, 0.500106,-99) , 
3, 40, 1, 0, 0.501611,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502332,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497389,-99) , 
7, 11, 0, 0, 0.49852,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488074,-99) , 
7, 15, 1, 0, 0.497919,-99) , 
7, 16, 0, 0, 0.499628,-99)    );
  // itree = 425
  fBoostWeights.push_back(0.00636141);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 44.5045, 0, 1, 0.509593,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49111,-99) , 
6, 2, 0, 0, 0.503976,-99) , 
NN(
0, 
0, 
-1, 27.325, 1, -1, 0.497878,-99) , 
1, 23.3419, 0, 0, 0.498768,-99)    );
  // itree = 426
  fBoostWeights.push_back(0.00629637);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.52934,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496052,-99) , 
7, 11, 1, 0, 0.508846,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500793,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493891,-99) , 
1, 15.5498, 1, 0, 0.499733,-99) , 
1, 41.9567, 0, 0, 0.500542,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50303,-99) , 
NN(
0, 
0, 
-1, 5.78186, 0, -1, 0.49115,-99) , 
1, -3.71041, 1, 0, 0.495827,-99) , 
6, 1, 0, 0, 0.499977,-99)    );
  // itree = 427
  fBoostWeights.push_back(0.00474489);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512285,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504928,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491092,-99) , 
5, 4, 0, 0, 0.499608,-99) , 
7, 19, 0, 0, 0.504348,-99) , 
NN(
0, 
0, 
-1, 27.3256, 1, -1, 0.498695,-99) , 
1, 23.4429, 0, 0, 0.499518,-99)    );
  // itree = 428
  fBoostWeights.push_back(0.0116652);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.518913,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496742,-99) , 
7, 11, 0, 0, 0.508792,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.487238,-99) , 
7, 25, 1, 0, 0.504491,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504705,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489081,-99) , 
1, 65.0592, 1, 0, 0.502194,-99) , 
NN(
0, 
0, 
-1, -21.2953, 0, -1, 0.49578,-99) , 
1, 12.6908, 0, 0, 0.497779,-99) , 
1, -13.7452, 1, 0, 0.498839,-99)    );
  // itree = 429
  fBoostWeights.push_back(0.00965393);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506287,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488237,-99) , 
1, 66.4497, 1, 0, 0.504695,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505051,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.48699,-99) , 
5, 8, 0, 0, 0.493335,-99) , 
8, 1.84316, 1, 0, 0.502653,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.508656,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499473,-99) , 
7, 20, 1, 0, 0.50176,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500446,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493255,-99) , 
1, -4.75072, 1, 0, 0.497291,-99) , 
7, 16, 0, 0, 0.499353,-99) , 
1, 4.92853, 0, 0, 0.500767,-99)    );
  // itree = 430
  fBoostWeights.push_back(0.010455);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.520469,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.513694,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498305,-99) , 
0, -15.2284, 1, 0, 0.500702,-99) , 
0, 21.2451, 0, 0, 0.502457,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510319,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497128,-99) , 
2, -0.125714, 0, 0, 0.499698,-99) , 
NN(
0, 
0, 
-1, 0.23, 0, -1, 0.489372,-99) , 
2, 0.0838095, 1, 0, 0.498059,-99) , 
2, 0.300476, 0, 0, 0.499705,-99)    );
  // itree = 431
  fBoostWeights.push_back(0.0119949);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 1.36815, 1, 1, 0.521419,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.482784,-99) , 
8, 1.59378, 1, 0, 0.505277,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502192,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495078,-99) , 
0, 15.1664, 1, 0, 0.501194,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502184,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.479687,-99) , 
1, -10.871, 0, 0, 0.491545,-99) , 
1, -8.35598, 0, 0, 0.500222,-99) , 
1, -13.6376, 1, 0, 0.501029,-99)    );
  // itree = 432
  fBoostWeights.push_back(0.00778046);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507808,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505708,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.486367,-99) , 
0, -17.7316, 0, 0, 0.502388,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.513663,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498277,-99) , 
0, -23.4046, 1, 0, 0.499068,-99) , 
5, 9, 0, 0, 0.500038,-99) , 
7, 29, 0, 0, 0.500364,-99)    );
  // itree = 433
  fBoostWeights.push_back(0.00398771);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 5, 1, 1, 0.504468,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500315,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492737,-99) , 
8, 1.91139, 1, 0, 0.499483,-99) , 
3, 40, 1, 0, 0.500344,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490926,-99) , 
7, 1, 0, 0, 0.499923,-99)    );
  // itree = 434
  fBoostWeights.push_back(0.00425239);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507083,-99) , 
NN(
NN(
0, 
0, 
-1, 69.5937, 0, 1, 0.501368,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490194,-99) , 
0, -18.6984, 0, 0, 0.500749,-99) , 
0, -27.3822, 1, 0, 0.501101,-99)    );
  // itree = 435
  fBoostWeights.push_back(0.00628887);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.521896,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488662,-99) , 
5, 9, 1, 0, 0.505858,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.518325,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500165,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.482701,-99) , 
1, -25.4721, 0, 0, 0.499023,-99) , 
1, 69.6624, 0, 0, 0.49967,-99) , 
0, -21.3053, 1, 0, 0.500203,-99)    );
  // itree = 436
  fBoostWeights.push_back(0.0140518);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 1.42467, 1, 1, 0.519875,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.479209,-99) , 
8, 1.59388, 1, 0, 0.502926,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502727,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.48547,-99) , 
0, 19.7687, 1, 0, 0.500299,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500864,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493377,-99) , 
5, 10, 0, 0, 0.496009,-99) , 
5, 4, 1, 0, 0.497616,-99) , 
1, -13.7054, 1, 0, 0.498462,-99)    );
  // itree = 437
  fBoostWeights.push_back(0.0144081);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.532556,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49491,-99) , 
8, 1.42123, 1, 0, 0.508879,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507046,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497743,-99) , 
1, 23.3227, 0, 0, 0.499357,-99) , 
1, -13.6335, 1, 0, 0.500888,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510543,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.474229,-99) , 
0, -11.026, 0, 0, 0.502316,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491094,-99) , 
8, 1.64392, 0, 0, 0.495785,-99) , 
5, 8, 1, 0, 0.49905,-99)    );
  // itree = 438
  fBoostWeights.push_back(0.00950087);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.521267,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499099,-99) , 
8, 1.37777, 1, 0, 0.506343,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504385,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496549,-99) , 
6, 3, 0, 0, 0.499405,-99) , 
0, -9.14634, 1, 0, 0.501196,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.508242,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497547,-99) , 
2, -0.609524, 1, 0, 0.499685,-99) , 
NN(
0, 
0, 
-1, 0.682857, 1, -1, 0.493848,-99) , 
5, 5, 0, 0, 0.497111,-99) , 
3, 45, 1, 0, 0.49957,-99)    );
  // itree = 439
  fBoostWeights.push_back(0.010294);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.529262,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.522475,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.479664,-99) , 
1, -17.555, 0, 0, 0.491769,-99) , 
8, 1.39647, 1, 0, 0.504711,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507868,-99) , 
NN(
0, 
0, 
-1, 27, 0, -1, 0.498927,-99) , 
2, -1.17286, 1, 0, 0.499596,-99) , 
1, -13.5942, 1, 0, 0.500416,-99)    );
  // itree = 440
  fBoostWeights.push_back(0.0103185);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 0, 1, 0.509199,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503261,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.48591,-99) , 
7, 10, 0, 0, 0.497578,-99) , 
5, 4, 0, 0, 0.504411,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.518661,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.509219,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497091,-99) , 
0, -22.1757, 1, 0, 0.498414,-99) , 
1, 69.5915, 0, 0, 0.499097,-99) , 
0, 9.0873, 0, 0, 0.50046,-99)    );
  // itree = 441
  fBoostWeights.push_back(0.00915931);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 9.92205, 0, 1, 0.508322,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506326,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499183,-99) , 
7, 13, 1, 0, 0.502362,-99) , 
5, 5, 0, 0, 0.503718,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502807,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.487243,-99) , 
0, -30.2562, 0, 0, 0.50128,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.485787,-99) , 
0, 14.5487, 1, 0, 0.499777,-99) , 
5, 7, 1, 0, 0.502035,-99)    );
  // itree = 442
  fBoostWeights.push_back(0.0106611);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, -12.708, 1, 1, 0.507796,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503802,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496955,-99) , 
0, 3.8377, 1, 0, 0.501142,-99) , 
5, 5, 0, 0, 0.503186,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.515042,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496768,-99) , 
0, -6.62508, 0, 0, 0.50476,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500077,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.473811,-99) , 
0, 10.9845, 1, 0, 0.494895,-99) , 
9, 0, 0, 0, 0.497991,-99) , 
5, 8, 1, 0, 0.501307,-99)    );
  // itree = 443
  fBoostWeights.push_back(0.00722877);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 7, 1, 1, 0.507516,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501718,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491723,-99) , 
2, 0.0528571, 1, 0, 0.500173,-99) , 
2, 0.26, 0, 0, 0.503158,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.51172,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50041,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.485003,-99) , 
8, 1.25159, 0, 0, 0.498517,-99) , 
1, -22.841, 1, 0, 0.499639,-99) , 
6, 3, 0, 0, 0.500914,-99)    );
  // itree = 444
  fBoostWeights.push_back(0.00810358);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507523,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50631,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498472,-99) , 
6, 1, 1, 0, 0.499479,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.518152,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.480008,-99) , 
1, 72.6936, 0, 0, 0.491087,-99) , 
1, 32.5798, 1, 0, 0.498655,-99) , 
0, 27.3222, 0, 0, 0.499162,-99)    );
  // itree = 445
  fBoostWeights.push_back(0.00737258);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, -9.14432, 1, 1, 0.502807,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.48948,-99) , 
1, 60.4204, 1, 0, 0.502143,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50503,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496572,-99) , 
5, 2, 1, 0, 0.498494,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491088,-99) , 
2, 1.05286, 1, 0, 0.497565,-99) , 
3, 45, 1, 0, 0.500319,-99)    );
  // itree = 446
  fBoostWeights.push_back(0.0066213);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.515317,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501076,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.47953,-99) , 
1, 30.4757, 1, 0, 0.499801,-99) , 
0, -27.3861, 1, 0, 0.500639,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489495,-99) , 
1, 60.4204, 1, 0, 0.500083,-99)    );
  // itree = 447
  fBoostWeights.push_back(0.00614681);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 18, 0, 1, 0.501445,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.484825,-99) , 
1, 60.364, 1, 0, 0.500637,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501819,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490855,-99) , 
5, 2, 0, 0, 0.499141,-99) , 
NN(
0, 
0, 
-1, -9.10365, 0, -1, 0.493155,-99) , 
8, 1.67645, 1, 0, 0.496812,-99) , 
7, 20, 1, 0, 0.499303,-99)    );
  // itree = 448
  fBoostWeights.push_back(0.0136287);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.515904,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498201,-99) , 
5, 3, 0, 0, 0.511122,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507085,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.474616,-99) , 
9, 0, 1, 0, 0.487232,-99) , 
8, 1.64464, 1, 0, 0.502034,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.515436,-99) , 
NN(
0, 
0, 
-1, 30.4605, 1, -1, 0.496412,-99) , 
1, 60.3983, 0, 0, 0.497328,-99) , 
0, -9.14934, 1, 0, 0.498543,-99)    );
  // itree = 449
  fBoostWeights.push_back(0.00540284);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.518709,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500884,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488891,-99) , 
1, -18.5418, 0, 0, 0.499945,-99) , 
1, -37.0909, 1, 0, 0.500692,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490874,-99) , 
1, 60.2918, 1, 0, 0.5002,-99)    );
  // itree = 450
  fBoostWeights.push_back(0.00987472);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, -9.57243, 1, 1, 0.504114,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500817,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.483394,-99) , 
8, 1.84335, 1, 0, 0.497446,-99) , 
6, 2, 0, 0, 0.501661,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502522,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489698,-99) , 
0, -10.3983, 0, 0, 0.4985,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.485206,-99) , 
0, 10.9863, 1, 0, 0.496354,-99) , 
5, 8, 1, 0, 0.499743,-99)    );
  // itree = 451
  fBoostWeights.push_back(0.00709289);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 21.2491, 0, 1, 0.502897,-99) , 
NN(
0, 
0, 
-1, 1, 0, -1, 0.496468,-99) , 
2, 0.242381, 0, 0, 0.499057,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.487098,-99) , 
3, 23, 0, 0, 0.498721,-99)    );
  // itree = 452
  fBoostWeights.push_back(0.0100968);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504521,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488984,-99) , 
1, -13.2758, 0, 0, 0.501898,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.509414,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496717,-99) , 
1, -22.9845, 1, 0, 0.497732,-99) , 
2, -0.514286, 1, 0, 0.498801,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.508428,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492955,-99) , 
0, 2.46046, 1, 0, 0.497589,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.482809,-99) , 
0, -7.24412, 0, 0, 0.493242,-99) , 
5, 11, 1, 0, 0.498068,-99)    );
  // itree = 453
  fBoostWeights.push_back(0.00834764);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507879,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500972,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493103,-99) , 
1, -10.4621, 0, 0, 0.499203,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.515882,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.479669,-99) , 
1, 72.6733, 0, 0, 0.490146,-99) , 
1, 32.6452, 1, 0, 0.498308,-99) , 
0, -27.3867, 1, 0, 0.498835,-99)    );
  // itree = 454
  fBoostWeights.push_back(0.00702252);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.515101,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512825,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498205,-99) , 
0, 29.0618, 0, 0, 0.498988,-99) , 
0, -27.3841, 1, 0, 0.499874,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.484615,-99) , 
1, 69.5194, 1, 0, 0.499344,-99)    );
  // itree = 455
  fBoostWeights.push_back(0.0122003);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.530504,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491985,-99) , 
8, 1.39636, 1, 0, 0.505474,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502233,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497163,-99) , 
7, 12, 1, 0, 0.499288,-99) , 
1, -13.5563, 1, 0, 0.500285,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.514697,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491701,-99) , 
3, 41, 0, 0, 0.502985,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510982,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.481777,-99) , 
2, 1.54381, 0, 0, 0.49061,-99) , 
3, 44, 1, 0, 0.495121,-99) , 
2, 0.978571, 1, 0, 0.499549,-99)    );
  // itree = 456
  fBoostWeights.push_back(0.0067667);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.523789,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497773,-99) , 
2, 0.0166666, 0, 0, 0.510861,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501026,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491054,-99) , 
1, 22.0902, 1, 0, 0.499887,-99) , 
0, 21.2468, 0, 0, 0.500859,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.483548,-99) , 
1, 69.6412, 1, 0, 0.500264,-99)    );
  // itree = 457
  fBoostWeights.push_back(0.00543379);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512161,-99) , 
NN(
0, 
0, 
-1, 22.0406, 1, -1, 0.49829,-99) , 
0, 27.3223, 0, 0, 0.499079,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.485676,-99) , 
1, 69.5861, 1, 0, 0.49862,-99)    );
  // itree = 458
  fBoostWeights.push_back(0.00808289);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 21.2452, 0, 1, 0.5024,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.485604,-99) , 
1, 60.3147, 1, 0, 0.501573,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.511798,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499949,-99) , 
0, -9.14235, 1, 0, 0.503261,-99) , 
NN(
0, 
0, 
-1, -9.15036, 0, -1, 0.492188,-99) , 
8, 1.5626, 1, 0, 0.49744,-99) , 
7, 11, 0, 0, 0.499963,-99)    );
  // itree = 459
  fBoostWeights.push_back(0.00869826);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507097,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496604,-99) , 
8, 1.26798, 0, 0, 0.505588,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500827,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491717,-99) , 
7, 28, 1, 0, 0.498849,-99) , 
0, -3.07197, 0, 0, 0.502751,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510944,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498788,-99) , 
7, 7, 0, 0, 0.504719,-99) , 
NN(
0, 
0, 
-1, 10, 1, -1, 0.496286,-99) , 
5, 1, 1, 0, 0.497443,-99) , 
7, 18, 0, 0, 0.499589,-99)    );
  // itree = 460
  fBoostWeights.push_back(0.00588271);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0.803333, 0, 1, 0.50737,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493885,-99) , 
1, -13.21, 0, 0, 0.505297,-99) , 
NN(
NN(
0, 
0, 
-1, -4.13805, 1, 1, 0.507504,-99) , 
NN(
0, 
0, 
-1, 60.3464, 1, -1, 0.4991,-99) , 
5, 1, 1, 0, 0.500252,-99) , 
7, 5, 1, 0, 0.501319,-99)    );
  // itree = 461
  fBoostWeights.push_back(0.0096883);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 0, 1, 0.507245,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.483332,-99) , 
5, 1, 0, 0, 0.503848,-99) , 
NN(
NN(
0, 
0, 
-1, -3.48748, 1, 1, 0.50739,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501006,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496227,-99) , 
7, 21, 0, 0, 0.49769,-99) , 
5, 1, 1, 0, 0.499025,-99) , 
0, 9.08621, 0, 0, 0.500272,-99)    );
  // itree = 462
  fBoostWeights.push_back(0.00480711);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 45.8266, 0, 1, 0.501311,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489992,-99) , 
1, 69.6344, 1, 0, 0.500925,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506352,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496127,-99) , 
0, 4.07703, 0, 0, 0.500127,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.484726,-99) , 
2, -0.480476, 0, 0, 0.495972,-99) , 
5, 11, 1, 0, 0.500274,-99)    );
  // itree = 463
  fBoostWeights.push_back(0.00711335);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.520392,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505116,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490937,-99) , 
0, 9.08423, 1, 0, 0.501769,-99) , 
8, 1.28124, 1, 0, 0.504789,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.511576,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499369,-99) , 
0, 21.246, 0, 0, 0.500468,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.485479,-99) , 
1, 60.4204, 1, 0, 0.499727,-99) , 
7, 5, 1, 0, 0.500803,-99)    );
  // itree = 464
  fBoostWeights.push_back(0.0067022);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 4.06091, 0, 1, 0.508987,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492276,-99) , 
5, 2, 0, 0, 0.50504,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501301,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490769,-99) , 
1, -28.2851, 0, 0, 0.500632,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.485208,-99) , 
0, 27.325, 1, 0, 0.499882,-99) , 
1, 23.2651, 0, 0, 0.500637,-99)    );
  // itree = 465
  fBoostWeights.push_back(0.0102416);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 3, 1, 1, 0.51427,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.485628,-99) , 
8, 1.63049, 1, 0, 0.50348,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.527834,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499509,-99) , 
1, 70.9621, 0, 0, 0.500589,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506057,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.476457,-99) , 
1, 12.7969, 0, 0, 0.487937,-99) , 
8, 1.24722, 0, 0, 0.499076,-99) , 
1, -13.5719, 1, 0, 0.499786,-99)    );
  // itree = 466
  fBoostWeights.push_back(0.00771593);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 6, 0, 1, 0.513435,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505521,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499728,-99) , 
2, 0.302381, 0, 0, 0.501884,-99) , 
7, 18, 0, 0, 0.502895,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.513383,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501802,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491748,-99) , 
8, 1.67645, 1, 0, 0.497857,-99) , 
1, 42.0018, 0, 0, 0.499124,-99) , 
7, 20, 1, 0, 0.501578,-99)    );
  // itree = 467
  fBoostWeights.push_back(0.00745574);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 5.1102, 1, 1, 0.510184,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500788,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491144,-99) , 
5, 4, 0, 0, 0.497107,-99) , 
2, -0.721429, 0, 0, 0.502598,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500857,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488398,-99) , 
8, 1.20978, 0, 0, 0.499767,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488223,-99) , 
3, 32, 0, 0, 0.499037,-99) , 
2, -0.368571, 1, 0, 0.500168,-99)    );
  // itree = 468
  fBoostWeights.push_back(0.00618423);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, -13.7054, 1, 1, 0.501277,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502268,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490692,-99) , 
8, 1.56186, 0, 0, 0.496433,-99) , 
2, -0.686667, 0, 0, 0.500175,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507251,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49912,-99) , 
9, 0, 0, 0, 0.503193,-99) , 
NN(
0, 
0, 
-1, 3, 0, -1, 0.489424,-99) , 
6, 2, 1, 0, 0.494643,-99) , 
2, 1.00905, 1, 0, 0.499429,-99)    );
  // itree = 469
  fBoostWeights.push_back(0.00958217);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507176,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490647,-99) , 
0, -15.2283, 0, 0, 0.504088,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502343,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488255,-99) , 
0, 15.1741, 1, 0, 0.49963,-99) , 
9, 0, 0, 0, 0.501898,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512545,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499116,-99) , 
7, 20, 1, 0, 0.500103,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503249,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488729,-99) , 
1, -4.39483, 1, 0, 0.493819,-99) , 
7, 19, 0, 0, 0.498083,-99) , 
7, 13, 1, 0, 0.499784,-99)    );
  // itree = 470
  fBoostWeights.push_back(0.00722452);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 44, 1, 1, 0.50266,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495603,-99) , 
0, 15.181, 1, 0, 0.501621,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.509244,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500843,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495244,-99) , 
2, -0.380952, 1, 0, 0.497012,-99) , 
1, -22.7387, 1, 0, 0.498053,-99) , 
6, 3, 0, 0, 0.499345,-99)    );
  // itree = 471
  fBoostWeights.push_back(0.00982516);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.514687,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.508782,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498865,-99) , 
1, 51.0708, 0, 0, 0.499482,-99) , 
0, -23.4067, 1, 0, 0.500257,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506511,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.480125,-99) , 
8, 1.42393, 0, 0, 0.498471,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502006,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.473037,-99) , 
8, 1.52447, 1, 0, 0.488878,-99) , 
0, 7.42687, 1, 0, 0.495992,-99) , 
5, 9, 1, 0, 0.49901,-99)    );
  // itree = 472
  fBoostWeights.push_back(0.0140827);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 16, 0, 1, 0.508844,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507664,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493514,-99) , 
6, 3, 0, 0, 0.498992,-99) , 
1, 5.15297, 1, 0, 0.504631,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504173,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488446,-99) , 
1, -13.6032, 0, 0, 0.501975,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510586,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491655,-99) , 
0, -9.14939, 1, 0, 0.497137,-99) , 
8, 1.53646, 0, 0, 0.499888,-99) , 
3, 40, 1, 0, 0.50069,-99)    );
  // itree = 473
  fBoostWeights.push_back(0.012345);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, -7.05653, 1, 1, 0.509636,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502518,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496513,-99) , 
0, -1.60394, 0, 0, 0.499665,-99) , 
1, -13.5587, 1, 0, 0.501274,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.527117,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.479645,-99) , 
8, 1.59369, 0, 0, 0.505073,-99) , 
NN(
0, 
0, 
-1, 7.42962, 1, -1, 0.493868,-99) , 
9, 0, 0, 0, 0.497108,-99) , 
5, 9, 1, 0, 0.500055,-99)    );
  // itree = 474
  fBoostWeights.push_back(0.00633686);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 25, 1, 1, 0.501179,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507223,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488432,-99) , 
2, 0.344286, 0, 0, 0.493701,-99) , 
6, 1, 0, 0, 0.500313,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506865,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49343,-99) , 
8, 1.49772, 0, 0, 0.497825,-99) , 
NN(
0, 
0, 
-1, 11, 0, -1, 0.48863,-99) , 
8, 1.65282, 1, 0, 0.493785,-99) , 
2, 0.978571, 1, 0, 0.49938,-99)    );
  // itree = 475
  fBoostWeights.push_back(0.00913138);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.518802,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498288,-99) , 
8, 1.38569, 1, 0, 0.504783,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50458,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496926,-99) , 
0, -15.2273, 1, 0, 0.498416,-99) , 
0, 9.08739, 0, 0, 0.500056,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488907,-99) , 
1, 69.6678, 1, 0, 0.499674,-99)    );
  // itree = 476
  fBoostWeights.push_back(0.00812586);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.509119,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502025,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493505,-99) , 
0, -15.2256, 0, 0, 0.500844,-99) , 
1, -22.8533, 1, 0, 0.50155,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50322,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493693,-99) , 
5, 7, 1, 0, 0.499135,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501365,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.487299,-99) , 
3, 45, 0, 0, 0.492722,-99) , 
7, 6, 0, 0, 0.497398,-99) , 
6, 3, 1, 0, 0.500035,-99)    );
  // itree = 477
  fBoostWeights.push_back(0.00835835);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 1.61381, 0, 1, 0.502287,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488414,-99) , 
3, 34, 0, 0, 0.501247,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510954,-99) , 
NN(
0, 
0, 
-1, -21.3074, 0, -1, 0.494853,-99) , 
3, 29, 1, 0, 0.495969,-99) , 
2, -0.0371429, 0, 0, 0.498789,-99)    );
  // itree = 478
  fBoostWeights.push_back(0.00885769);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.522842,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.485939,-99) , 
1, 51.3834, 1, 0, 0.50861,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.522267,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.484119,-99) , 
1, 65.5925, 0, 0, 0.496714,-99) , 
8, 1.5099, 1, 0, 0.502396,-99) , 
NN(
0, 
0, 
-1, -27.386, 0, -1, 0.498022,-99) , 
1, 23.2868, 0, 0, 0.498663,-99)    );
  // itree = 479
  fBoostWeights.push_back(0.00761684);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 0, 1, 0.504726,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.48861,-99) , 
5, 1, 0, 0, 0.502469,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.509168,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49935,-99) , 
6, 3, 1, 0, 0.505571,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500127,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494882,-99) , 
9, 0, 1, 0, 0.497419,-99) , 
5, 1, 1, 0, 0.498538,-99) , 
0, 9.08593, 0, 0, 0.499554,-99)    );
  // itree = 480
  fBoostWeights.push_back(0.00464256);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.514589,-99) , 
NN(
NN(
0, 
0, 
-1, 5, 1, 1, 0.506761,-99) , 
NN(
0, 
0, 
-1, 0.888571, 1, -1, 0.498657,-99) , 
3, 36, 1, 0, 0.499538,-99) , 
2, 1.72667, 0, 0, 0.500001,-99)    );
  // itree = 481
  fBoostWeights.push_back(0.00940624);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 4, 0, 1, 0.508544,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502142,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.487773,-99) , 
0, -16.692, 0, 0, 0.50091,-99) , 
1, -13.5942, 1, 0, 0.502135,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.522591,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49662,-99) , 
0, 0.712928, 0, 0, 0.503697,-99) , 
NN(
0, 
0, 
-1, 9.93899, 1, -1, 0.49565,-99) , 
9, 0, 0, 0, 0.498358,-99) , 
5, 7, 1, 0, 0.50052,-99)    );
  // itree = 482
  fBoostWeights.push_back(0.00476769);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.523247,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499497,-99) , 
1, 6.14379, 0, 0, 0.510217,-99) , 
NN(
0, 
0, 
-1, 30.0014, 1, -1, 0.498739,-99) , 
0, -21.308, 1, 0, 0.499729,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489039,-99) , 
1, 69.6344, 1, 0, 0.499364,-99)    );
  // itree = 483
  fBoostWeights.push_back(0.00680445);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, -27.3847, 1, 1, 0.502255,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490043,-99) , 
1, 69.6344, 1, 0, 0.501847,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.508385,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49264,-99) , 
0, 9.12153, 1, 0, 0.503285,-99) , 
NN(
0, 
0, 
-1, 27, 0, -1, 0.494732,-99) , 
9, 0, 1, 0, 0.498911,-99) , 
7, 25, 1, 0, 0.501212,-99)    );
  // itree = 484
  fBoostWeights.push_back(0.00671646);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.523147,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499101,-99) , 
1, 6.14379, 0, 0, 0.509965,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501232,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.486264,-99) , 
1, 30.0536, 1, 0, 0.500124,-99) , 
0, -21.3046, 1, 0, 0.500977,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.484318,-99) , 
1, 69.6344, 1, 0, 0.500406,-99)    );
  // itree = 485
  fBoostWeights.push_back(0.00381048);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.511556,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500062,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.486663,-99) , 
1, 30.456, 1, 0, 0.499269,-99) , 
0, 27.3242, 0, 0, 0.499961,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.48948,-99) , 
1, 60.3953, 1, 0, 0.499435,-99)    );
  // itree = 486
  fBoostWeights.push_back(0.0126472);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.511153,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498184,-99) , 
5, 8, 1, 0, 0.504503,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502457,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.487096,-99) , 
0, -10.1338, 0, 0, 0.496155,-99) , 
5, 3, 0, 0, 0.501853,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504683,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49048,-99) , 
0, 12.3873, 1, 0, 0.501342,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501674,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488036,-99) , 
5, 3, 1, 0, 0.495275,-99) , 
5, 7, 0, 0, 0.497907,-99) , 
0, -3.07059, 1, 0, 0.499556,-99)    );
  // itree = 487
  fBoostWeights.push_back(0.00850278);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, -9.14565, 1, 1, 0.502213,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.486499,-99) , 
1, 60.455, 1, 0, 0.501446,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.514957,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504515,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493716,-99) , 
6, 1, 1, 0, 0.495528,-99) , 
1, 50.8467, 0, 0, 0.496792,-99) , 
7, 11, 0, 0, 0.499628,-99)    );
  // itree = 488
  fBoostWeights.push_back(0.00905046);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.51823,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499966,-99) , 
5, 7, 1, 0, 0.509489,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503169,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.486966,-99) , 
0, -26.2259, 0, 0, 0.501171,-99) , 
1, 23.1973, 0, 0, 0.502449,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.509557,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498892,-99) , 
5, 2, 1, 0, 0.501233,-99) , 
NN(
0, 
0, 
-1, 14, 1, -1, 0.494995,-99) , 
7, 16, 0, 0, 0.49788,-99) , 
0, -3.07063, 1, 0, 0.499786,-99)    );
  // itree = 489
  fBoostWeights.push_back(0.0085128);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 23.3169, 0, 1, 0.506826,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501676,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.47818,-99) , 
0, 19.5092, 1, 0, 0.488614,-99) , 
5, 2, 0, 0, 0.50226,-99) , 
NN(
NN(
0, 
0, 
-1, 3, 1, 1, 0.504475,-99) , 
NN(
0, 
0, 
-1, 13, 1, -1, 0.497496,-99) , 
7, 26, 0, 0, 0.498695,-99) , 
0, 9.08839, 0, 0, 0.499611,-99)    );
  // itree = 490
  fBoostWeights.push_back(0.011831);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 3.64617, 0, 1, 0.50755,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501296,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.478926,-99) , 
0, -13.3515, 0, 0, 0.497711,-99) , 
5, 6, 0, 0, 0.501113,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.521873,-99) , 
NN(
0, 
0, 
-1, 1, 0, -1, 0.495304,-99) , 
0, -15.2155, 1, 0, 0.497797,-99) , 
9, 0, 0, 0, 0.499474,-99)    );
  // itree = 491
  fBoostWeights.push_back(0.0105694);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.519951,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506451,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497687,-99) , 
8, 1.75284, 0, 0, 0.500301,-99) , 
0, -15.2176, 1, 0, 0.502152,-99) , 
NN(
NN(
0, 
0, 
-1, 3.6445, 0, 1, 0.504288,-99) , 
NN(
0, 
0, 
-1, -13.349, 0, -1, 0.493905,-99) , 
5, 6, 0, 0, 0.497491,-99) , 
9, 0, 1, 0, 0.499786,-99)    );
  // itree = 492
  fBoostWeights.push_back(0.00600742);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.514004,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.511971,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491458,-99) , 
1, 14.8036, 0, 0, 0.499304,-99) , 
1, -4.40949, 1, 0, 0.503729,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.511726,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499094,-99) , 
0, -27.386, 1, 0, 0.49979,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489404,-99) , 
1, 60.336, 1, 0, 0.499297,-99) , 
6, 4, 0, 0, 0.499815,-99)    );
  // itree = 493
  fBoostWeights.push_back(0.00844866);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.513751,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489642,-99) , 
8, 1.64484, 1, 0, 0.504647,-99) , 
NN(
0, 
0, 
-1, -29.337, 0, -1, 0.498863,-99) , 
0, -9.13964, 1, 0, 0.500351,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492513,-99) , 
1, 60.3363, 1, 0, 0.49996,-99)    );
  // itree = 494
  fBoostWeights.push_back(0.00908834);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.515155,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.525545,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.486812,-99) , 
1, 65.6394, 0, 0, 0.49951,-99) , 
8, 1.46669, 1, 0, 0.506155,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501213,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488011,-99) , 
1, -28.1254, 0, 0, 0.500365,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.484727,-99) , 
0, -27.386, 0, 0, 0.499633,-99) , 
1, 23.3974, 0, 0, 0.500582,-99)    );
  // itree = 495
  fBoostWeights.push_back(0.00824621);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.521427,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49357,-99) , 
8, 1.59832, 0, 0, 0.506735,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501278,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494834,-99) , 
0, -15.2256, 0, 0, 0.500414,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.508402,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.468034,-99) , 
8, 1.63049, 1, 0, 0.49399,-99) , 
1, -19.1353, 0, 0, 0.499694,-99) , 
1, 51.2317, 0, 0, 0.500143,-99)    );
  // itree = 496
  fBoostWeights.push_back(0.00942143);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.523363,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496972,-99) , 
8, 1.36061, 1, 0, 0.505028,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501437,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494398,-99) , 
2, 0.117143, 1, 0, 0.498671,-99) , 
1, -13.7054, 1, 0, 0.499685,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50619,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494432,-99) , 
0, 4.26026, 0, 0, 0.498938,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.483431,-99) , 
5, 4, 0, 0, 0.493123,-99) , 
2, 1.10286, 1, 0, 0.498943,-99)    );
  // itree = 497
  fBoostWeights.push_back(0.00916772);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 1.34338, 1, 1, 0.514417,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.481932,-99) , 
8, 1.71943, 1, 0, 0.505397,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.515362,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499498,-99) , 
7, 19, 0, 0, 0.505433,-99) , 
NN(
0, 
0, 
-1, -21.3028, 0, -1, 0.498215,-99) , 
1, 23.3419, 0, 0, 0.499472,-99) , 
1, -13.6921, 1, 0, 0.500415,-99)    );
  // itree = 498
  fBoostWeights.push_back(0.00609732);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 12, 1, 1, 0.515017,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.516587,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49918,-99) , 
0, -27.3831, 1, 0, 0.500136,-99) , 
1, 51.1247, 0, 0, 0.501183,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502739,-99) , 
NN(
0, 
0, 
-1, -2.92777, 0, -1, 0.491513,-99) , 
8, 1.50112, 1, 0, 0.496023,-99) , 
6, 1, 0, 0, 0.500565,-99)    );
  // itree = 499
  fBoostWeights.push_back(0.00942467);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50341,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497681,-99) , 
8, 1.23026, 0, 0, 0.502837,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50536,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489924,-99) , 
7, 29, 0, 0, 0.495063,-99) , 
7, 27, 1, 0, 0.50187,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510147,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502553,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488379,-99) , 
9, 0, 1, 0, 0.49555,-99) , 
7, 27, 0, 0, 0.497599,-99) , 
3, 42, 0, 0, 0.500944,-99)    );
  // itree = 500
  fBoostWeights.push_back(0.00419861);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507268,-99) , 
NN(
NN(
0, 
0, 
-1, 5, 1, 1, 0.504369,-99) , 
NN(
0, 
0, 
-1, 1.2315, 0, -1, 0.498739,-99) , 
3, 40, 1, 0, 0.499692,-99) , 
0, 27.3219, 0, 0, 0.500124,-99)    );
  // itree = 501
  fBoostWeights.push_back(0.0109418);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.52119,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489229,-99) , 
8, 1.56017, 1, 0, 0.507475,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495567,-99) , 
1, 69.2129, 1, 0, 0.504644,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502686,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.485939,-99) , 
0, 24.7191, 1, 0, 0.501647,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.48237,-99) , 
0, -27.386, 0, 0, 0.50075,-99) , 
1, 23.4429, 0, 0, 0.501316,-99)    );
  // itree = 502
  fBoostWeights.push_back(0.00594212);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.514465,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504753,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492706,-99) , 
5, 7, 1, 0, 0.499544,-99) , 
1, -4.70117, 1, 0, 0.503923,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500738,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494288,-99) , 
1, -9.72427, 0, 0, 0.499259,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.486544,-99) , 
1, 69.6344, 1, 0, 0.498843,-99) , 
6, 4, 0, 0, 0.499435,-99)    );
  // itree = 503
  fBoostWeights.push_back(0.00820866);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.521185,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496247,-99) , 
1, 44.5043, 0, 0, 0.50981,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493882,-99) , 
6, 2, 0, 0, 0.504938,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501029,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489492,-99) , 
8, 1.26903, 0, 0, 0.499453,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.485512,-99) , 
0, 27.3267, 1, 0, 0.498783,-99) , 
1, 23.3419, 0, 0, 0.499686,-99)    );
  // itree = 504
  fBoostWeights.push_back(0.00477197);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 9.08669, 0, 1, 0.509211,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493017,-99) , 
2, -0.572381, 0, 0, 0.505323,-99) , 
NN(
0, 
0, 
-1, -27.3841, 0, -1, 0.498689,-99) , 
1, 23.3974, 0, 0, 0.499658,-99)    );
  // itree = 505
  fBoostWeights.push_back(0.00842898);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, -9.77803, 1, 1, 0.507383,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489425,-99) , 
5, 10, 1, 0, 0.5035,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501428,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491928,-99) , 
6, 1, 0, 0, 0.500345,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506824,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.481301,-99) , 
1, -9.80476, 0, 0, 0.489546,-99) , 
1, -8.29469, 0, 0, 0.499247,-99) , 
1, -13.5801, 1, 0, 0.499932,-99)    );
  // itree = 506
  fBoostWeights.push_back(0.00764981);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504769,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498764,-99) , 
3, 44, 1, 0, 0.500749,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.48493,-99) , 
3, 26, 0, 0, 0.500129,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505583,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49761,-99) , 
2, -1.05095, 1, 0, 0.5019,-99) , 
NN(
0, 
0, 
-1, 4, 0, -1, 0.489261,-99) , 
8, 1.64392, 0, 0, 0.494272,-99) , 
2, -0.742381, 0, 0, 0.499089,-99)    );
  // itree = 507
  fBoostWeights.push_back(0.00838657);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.514043,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512156,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488411,-99) , 
1, -19.2203, 0, 0, 0.499268,-99) , 
1, -37.3377, 1, 0, 0.502721,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.518357,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498363,-99) , 
1, 70.9888, 0, 0, 0.499101,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490623,-99) , 
0, 27.3226, 1, 0, 0.498661,-99) , 
1, -13.5587, 1, 0, 0.499315,-99)    );
  // itree = 508
  fBoostWeights.push_back(0.00766036);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 19, 0, 1, 0.504039,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504158,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488579,-99) , 
0, -3.05178, 0, 0, 0.497622,-99) , 
7, 22, 1, 0, 0.502368,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500668,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491574,-99) , 
3, 35, 0, 0, 0.499274,-99) , 
NN(
0, 
0, 
-1, 40, 1, -1, 0.489682,-99) , 
2, -0.872857, 0, 0, 0.497809,-99) , 
3, 45, 0, 0, 0.499617,-99)    );
  // itree = 509
  fBoostWeights.push_back(0.00430375);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.511922,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500424,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.484098,-99) , 
1, 30.5182, 1, 0, 0.499456,-99) , 
0, 27.3258, 0, 0, 0.500158,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493732,-99) , 
1, 60.43, 1, 0, 0.499838,-99)    );
  // itree = 510
  fBoostWeights.push_back(0.0103056);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506337,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.508289,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490599,-99) , 
0, 6.32034, 1, 0, 0.502318,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501499,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495039,-99) , 
2, -0.578095, 1, 0, 0.496547,-99) , 
5, 10, 0, 0, 0.497737,-99) , 
0, -27.3833, 1, 0, 0.498213,-99)    );
  // itree = 511
  fBoostWeights.push_back(0.00957008);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512999,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49788,-99) , 
8, 1.39133, 1, 0, 0.5018,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500364,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491645,-99) , 
8, 1.46405, 0, 0, 0.497367,-99) , 
7, 12, 1, 0, 0.499229,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510391,-99) , 
NN(
0, 
0, 
-1, 20, 1, -1, 0.492332,-99) , 
7, 27, 0, 0, 0.494834,-99) , 
3, 42, 0, 0, 0.498273,-99)    );
  // itree = 512
  fBoostWeights.push_back(0.0044516);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 0, 1, 0.510621,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499571,-99) , 
0, -3.09386, 0, 0, 0.505993,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.511714,-99) , 
NN(
0, 
0, 
-1, -19.9054, 0, -1, 0.498839,-99) , 
1, -32.2437, 1, 0, 0.499474,-99) , 
6, 4, 0, 0, 0.500233,-99)    );
  // itree = 513
  fBoostWeights.push_back(0.00887512);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.514683,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499571,-99) , 
7, 5, 1, 0, 0.501,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502873,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.484931,-99) , 
3, 45, 0, 0, 0.492661,-99) , 
7, 3, 0, 0, 0.499914,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501631,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492918,-99) , 
9, 0, 0, 0, 0.498424,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.51105,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.476987,-99) , 
8, 1.44686, 1, 0, 0.491792,-99) , 
0, -9.98697, 0, 0, 0.497103,-99) , 
5, 5, 0, 0, 0.498667,-99)    );
  // itree = 514
  fBoostWeights.push_back(0.00334102);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.509221,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510814,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500081,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.487934,-99) , 
1, -25.4975, 0, 0, 0.499279,-99) , 
1, 69.5527, 0, 0, 0.49967,-99) , 
0, 27.3249, 0, 0, 0.500219,-99)    );
  // itree = 515
  fBoostWeights.push_back(0.00568155);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.513293,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50048,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489311,-99) , 
2, 0.99381, 1, 0, 0.499389,-99) , 
2, 1.54, 0, 0, 0.500011,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506599,-99) , 
NN(
0, 
0, 
-1, 20, 1, -1, 0.494269,-99) , 
7, 27, 0, 0, 0.495993,-99) , 
3, 42, 0, 0, 0.499139,-99)    );
  // itree = 516
  fBoostWeights.push_back(0.011369);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 1.33484, 1, 1, 0.512471,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.474824,-99) , 
8, 1.77912, 1, 0, 0.504435,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.508491,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493713,-99) , 
1, 65.7073, 1, 0, 0.50437,-99) , 
NN(
0, 
0, 
-1, -21.308, 0, -1, 0.496973,-99) , 
1, 23.4369, 0, 0, 0.498258,-99) , 
1, -13.5497, 1, 0, 0.499249,-99)    );
  // itree = 517
  fBoostWeights.push_back(0.00934019);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 1.57378, 1, 1, 0.505782,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512651,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499231,-99) , 
5, 5, 1, 0, 0.500626,-99) , 
3, 45, 0, 0, 0.502684,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506186,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494512,-99) , 
8, 1.72654, 0, 0, 0.498358,-99) , 
NN(
0, 
0, 
-1, 21, 1, -1, 0.491675,-99) , 
0, 6.56158, 1, 0, 0.496145,-99) , 
5, 4, 0, 0, 0.500217,-99)    );
  // itree = 518
  fBoostWeights.push_back(0.0111002);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505483,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496797,-99) , 
7, 25, 1, 0, 0.503616,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494249,-99) , 
5, 11, 1, 0, 0.502389,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.508299,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493467,-99) , 
7, 11, 0, 0, 0.502349,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501052,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493231,-99) , 
7, 10, 1, 0, 0.495873,-99) , 
6, 2, 1, 0, 0.498357,-99) , 
1, 4.87162, 0, 0, 0.500086,-99)    );
  // itree = 519
  fBoostWeights.push_back(0.00618131);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.511564,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512569,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494067,-99) , 
7, 11, 1, 0, 0.501236,-99) , 
1, 37.4287, 1, 0, 0.505167,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500865,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488567,-99) , 
0, 24.712, 1, 0, 0.500109,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488865,-99) , 
0, -27.3874, 0, 0, 0.499581,-99) , 
1, 23.3228, 0, 0, 0.500397,-99)    );
  // itree = 520
  fBoostWeights.push_back(0.00999439);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.524424,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505164,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497188,-99) , 
5, 11, 0, 0, 0.49883,-99) , 
0, -15.2178, 1, 0, 0.501244,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.513281,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49872,-99) , 
0, 18.6395, 0, 0, 0.499935,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503473,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.4683,-99) , 
5, 6, 0, 0, 0.489375,-99) , 
0, -15.2274, 0, 0, 0.49788,-99) , 
9, 0, 1, 0, 0.499536,-99)    );
  // itree = 521
  fBoostWeights.push_back(0.00935353);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 20, 1, 1, 0.509456,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50526,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492336,-99) , 
7, 4, 1, 0, 0.498267,-99) , 
7, 11, 0, 0, 0.505245,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.516082,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49646,-99) , 
5, 3, 0, 0, 0.506307,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.517282,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49714,-99) , 
1, 69.6079, 0, 0, 0.497824,-99) , 
0, 21.245, 0, 0, 0.49858,-99) , 
3, 40, 1, 0, 0.499704,-99)    );
  // itree = 522
  fBoostWeights.push_back(0.00691751);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.509082,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.515856,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501797,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490664,-99) , 
1, 22.1517, 1, 0, 0.500496,-99) , 
1, 69.6833, 0, 0, 0.501008,-99) , 
0, 27.3267, 0, 0, 0.501469,-99)    );
  // itree = 523
  fBoostWeights.push_back(0.0095128);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.513454,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493291,-99) , 
1, 69.1169, 1, 0, 0.508674,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493141,-99) , 
5, 2, 0, 0, 0.505051,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501174,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.485246,-99) , 
1, -28.2412, 0, 0, 0.500203,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.51233,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.483895,-99) , 
9, 0, 0, 0, 0.49337,-99) , 
0, 15.1664, 1, 0, 0.499277,-99) , 
1, 23.3419, 0, 0, 0.500119,-99)    );
  // itree = 524
  fBoostWeights.push_back(0.00978735);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.524939,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497325,-99) , 
7, 15, 0, 0, 0.510601,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.509631,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498752,-99) , 
1, -22.9624, 1, 0, 0.499631,-99) , 
2, 1.18286, 0, 0, 0.500679,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.535837,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497598,-99) , 
0, -5.37837, 1, 0, 0.504212,-99) , 
NN(
0, 
0, 
-1, -14.6123, 0, -1, 0.49321,-99) , 
9, 0, 1, 0, 0.49681,-99) , 
5, 5, 0, 0, 0.498963,-99)    );
  // itree = 525
  fBoostWeights.push_back(0.0073732);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.514628,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503412,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497152,-99) , 
1, 4.97515, 1, 0, 0.500769,-99) , 
0, 21.2423, 0, 0, 0.501991,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505847,-99) , 
NN(
0, 
0, 
-1, -0.813333, 0, -1, 0.497291,-99) , 
3, 36, 1, 0, 0.498398,-99) , 
2, -0.0371429, 0, 0, 0.500319,-99)    );
  // itree = 526
  fBoostWeights.push_back(0.0104367);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.526257,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.528816,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.480696,-99) , 
9, 0, 0, 0, 0.497601,-99) , 
8, 1.31488, 1, 0, 0.504981,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.517508,-99) , 
NN(
0, 
0, 
-1, -25.3967, 0, -1, 0.498453,-99) , 
1, 69.6795, 0, 0, 0.499089,-99) , 
0, 15.1664, 0, 0, 0.499949,-99)    );
  // itree = 527
  fBoostWeights.push_back(0.0074661);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.511086,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499419,-99) , 
2, -0.57, 0, 0, 0.50807,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505332,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498651,-99) , 
1, 5.15412, 0, 0, 0.501637,-99) , 
3, 44, 1, 0, 0.504031,-99) , 
NN(
NN(
0, 
0, 
-1, 13.7726, 0, 1, 0.504024,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500452,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494794,-99) , 
7, 19, 0, 0, 0.498331,-99) , 
7, 12, 1, 0, 0.500661,-99) , 
6, 3, 0, 0, 0.501883,-99)    );
  // itree = 528
  fBoostWeights.push_back(0.0109951);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.51352,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503803,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493745,-99) , 
8, 1.26896, 0, 0, 0.502414,-99) , 
7, 2, 1, 0, 0.50339,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505885,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489811,-99) , 
7, 25, 1, 0, 0.502336,-99) , 
NN(
0, 
0, 
-1, 5, 1, -1, 0.491257,-99) , 
3, 39, 1, 0, 0.498968,-99) , 
3, 42, 0, 0, 0.502431,-99)    );
  // itree = 529
  fBoostWeights.push_back(0.007108);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.516225,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502019,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.48972,-99) , 
1, -25.3794, 0, 0, 0.501195,-99) , 
0, 27.3241, 0, 0, 0.502051,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490697,-99) , 
1, 69.6594, 1, 0, 0.501661,-99)    );
  // itree = 530
  fBoostWeights.push_back(0.00692194);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.511903,-99) , 
NN(
NN(
0, 
0, 
-1, 69.7434, 0, 1, 0.501428,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.515294,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.484808,-99) , 
9, 0, 1, 0, 0.494334,-99) , 
0, -17.5441, 0, 0, 0.500552,-99) , 
0, 33.4031, 0, 0, 0.500978,-99)    );
  // itree = 531
  fBoostWeights.push_back(0.00697914);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.51365,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512468,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488359,-99) , 
1, 51.6135, 0, 0, 0.49984,-99) , 
8, 1.42043, 1, 0, 0.504969,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500846,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488146,-99) , 
1, -28.0905, 0, 0, 0.500032,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490387,-99) , 
0, -27.3862, 0, 0, 0.499584,-99) , 
1, 23.4309, 0, 0, 0.50037,-99)    );
  // itree = 532
  fBoostWeights.push_back(0.00974489);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506929,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.517189,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497995,-99) , 
0, -16.0921, 1, 0, 0.499799,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504665,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493785,-99) , 
5, 9, 0, 0, 0.495649,-99) , 
9, 0, 1, 0, 0.49763,-99) , 
0, 27.3242, 0, 0, 0.498164,-99)    );
  // itree = 533
  fBoostWeights.push_back(0.00568174);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.509553,-99) , 
NN(
NN(
0, 
0, 
-1, 20.9093, 1, 1, 0.504338,-99) , 
NN(
0, 
0, 
-1, 21.2482, 1, -1, 0.497985,-99) , 
1, 17.0909, 0, 0, 0.499322,-99) , 
1, -32.2538, 1, 0, 0.499811,-99)    );
  // itree = 534
  fBoostWeights.push_back(0.00759864);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.51652,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497424,-99) , 
1, 44.4928, 0, 0, 0.507813,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493994,-99) , 
6, 2, 0, 0, 0.503621,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501218,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493009,-99) , 
1, -10.9769, 0, 0, 0.499355,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488942,-99) , 
0, -27.3821, 0, 0, 0.498868,-99) , 
1, 23.3615, 0, 0, 0.499561,-99)    );
  // itree = 535
  fBoostWeights.push_back(0.0050917);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.513879,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497003,-99) , 
0, -3.06311, 1, 0, 0.504518,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.518854,-99) , 
NN(
0, 
0, 
-1, -18.2067, 0, -1, 0.498391,-99) , 
1, 74.4799, 0, 0, 0.498949,-99) , 
1, -22.841, 1, 0, 0.4994,-99)    );
  // itree = 536
  fBoostWeights.push_back(0.0058685);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, -36.9249, 1, 1, 0.507299,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501482,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493863,-99) , 
8, 1.28187, 0, 0, 0.500301,-99) , 
1, -22.84, 1, 0, 0.500876,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490379,-99) , 
7, 1, 0, 0, 0.500409,-99)    );
  // itree = 537
  fBoostWeights.push_back(0.0102579);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.537113,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.482862,-99) , 
8, 1.44826, 1, 0, 0.506845,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510233,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494869,-99) , 
8, 1.60325, 1, 0, 0.503883,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50044,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.487458,-99) , 
0, 15.1674, 1, 0, 0.498834,-99) , 
1, 17.2818, 0, 0, 0.499925,-99) , 
1, -22.7671, 1, 0, 0.50049,-99)    );
  // itree = 538
  fBoostWeights.push_back(0.00883402);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507703,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.508457,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.508641,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496424,-99) , 
0, -20.4415, 1, 0, 0.497618,-99) , 
1, 69.6624, 0, 0, 0.497984,-99) , 
0, 27.3187, 0, 0, 0.498537,-99)    );
  // itree = 539
  fBoostWeights.push_back(0.0098258);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.509536,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498403,-99) , 
2, -0.44, 0, 0, 0.506275,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492458,-99) , 
7, 25, 1, 0, 0.503429,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.508019,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503118,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495544,-99) , 
0, -8.28101, 1, 0, 0.498391,-99) , 
1, 69.5904, 0, 0, 0.498718,-99) , 
0, 9.0873, 0, 0, 0.499932,-99)    );
  // itree = 540
  fBoostWeights.push_back(0.00612016);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.514906,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496295,-99) , 
2, -0.042381, 0, 0, 0.506242,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512505,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499142,-99) , 
1, 57.2652, 0, 0, 0.499907,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503873,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.478059,-99) , 
2, 0.0685714, 0, 0, 0.490387,-99) , 
0, -21.3079, 0, 0, 0.499138,-99) , 
1, -22.9624, 1, 0, 0.499711,-99)    );
  // itree = 541
  fBoostWeights.push_back(0.00889421);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502049,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.486884,-99) , 
1, 60.3291, 1, 0, 0.501306,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512211,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494514,-99) , 
8, 1.29284, 1, 0, 0.497446,-99) , 
7, 11, 0, 0, 0.499786,-99) , 
NN(
0, 
0, 
-1, 20, 1, -1, 0.492713,-99) , 
3, 34, 0, 0, 0.499156,-99)    );
  // itree = 542
  fBoostWeights.push_back(0.00653624);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, -36.907, 1, 1, 0.506864,-99) , 
NN(
NN(
0, 
0, 
-1, 63.037, 0, 1, 0.50123,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505442,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490684,-99) , 
9, 0, 1, 0, 0.495509,-99) , 
0, -9.14584, 0, 0, 0.499787,-99) , 
1, -22.8178, 1, 0, 0.500362,-99)    );
  // itree = 543
  fBoostWeights.push_back(0.00618453);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.516047,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500271,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.481867,-99) , 
1, 30.4417, 1, 0, 0.499205,-99) , 
1, 60.3882, 0, 0, 0.500016,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.508254,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.48018,-99) , 
2, 0.0871427, 0, 0, 0.493366,-99) , 
0, -21.3036, 0, 0, 0.499436,-99)    );
  // itree = 544
  fBoostWeights.push_back(0.00482944);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505171,-99) , 
NN(
0, 
0, 
-1, -19.7815, 0, -1, 0.497724,-99) , 
1, -32.1081, 1, 0, 0.498082,-99)    );
  // itree = 545
  fBoostWeights.push_back(0.00378044);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.511033,-99) , 
NN(
0, 
0, 
-1, -18.6999, 0, -1, 0.498967,-99) , 
0, -27.3838, 1, 0, 0.499638,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489573,-99) , 
1, 69.67, 1, 0, 0.499295,-99)    );
  // itree = 546
  fBoostWeights.push_back(0.0102301);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 6, 0, 1, 0.504186,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506123,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.484357,-99) , 
7, 5, 1, 0, 0.495929,-99) , 
3, 42, 0, 0, 0.502437,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505634,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497084,-99) , 
8, 1.6277, 0, 0, 0.500775,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50155,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493776,-99) , 
3, 41, 1, 0, 0.495268,-99) , 
0, 3.01445, 0, 0, 0.497562,-99) , 
7, 12, 1, 0, 0.49959,-99)    );
  // itree = 547
  fBoostWeights.push_back(0.00803045);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.520434,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.484409,-99) , 
8, 1.63701, 1, 0, 0.508002,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496204,-99) , 
1, 69.2011, 1, 0, 0.5052,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500419,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.487045,-99) , 
0, -20.438, 0, 0, 0.499257,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.486105,-99) , 
0, 27.323, 1, 0, 0.49862,-99) , 
1, 23.4117, 0, 0, 0.499578,-99)    );
  // itree = 548
  fBoostWeights.push_back(0.00672661);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510762,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.518429,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490041,-99) , 
1, 55.164, 0, 0, 0.501734,-99) , 
0, -9.14009, 1, 0, 0.504575,-99) , 
NN(
0, 
0, 
-1, -27.386, 0, -1, 0.4982,-99) , 
1, 23.4793, 0, 0, 0.499122,-99)    );
  // itree = 549
  fBoostWeights.push_back(0.00394501);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.516783,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49542,-99) , 
8, 1.46471, 1, 0, 0.505496,-99) , 
NN(
0, 
0, 
-1, 29.9933, 1, -1, 0.499128,-99) , 
0, 21.2459, 0, 0, 0.499692,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490584,-99) , 
1, 69.5861, 1, 0, 0.499381,-99)    );
  // itree = 550
  fBoostWeights.push_back(0.00734689);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512802,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512568,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495411,-99) , 
8, 1.40287, 1, 0, 0.500434,-99) , 
3, 42, 1, 0, 0.503322,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.511745,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498257,-99) , 
0, 27.3241, 0, 0, 0.499037,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.485497,-99) , 
1, 69.6344, 1, 0, 0.498581,-99) , 
7, 26, 0, 0, 0.499383,-99)    );
  // itree = 551
  fBoostWeights.push_back(0.00794966);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.515933,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.513606,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491657,-99) , 
1, -19.3604, 0, 0, 0.501777,-99) , 
1, -37.4997, 1, 0, 0.505109,-99) , 
NN(
NN(
0, 
0, 
-1, 73.4764, 0, 1, 0.501499,-99) , 
NN(
0, 
0, 
-1, -4.62244, 1, -1, 0.494523,-99) , 
1, -3.11084, 0, 0, 0.499807,-99) , 
1, -13.6921, 1, 0, 0.500649,-99)    );
  // itree = 552
  fBoostWeights.push_back(0.00499143);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.511569,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505691,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49893,-99) , 
0, 16.0395, 0, 0, 0.499904,-99) , 
0, -27.3773, 1, 0, 0.500545,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491264,-99) , 
1, 69.6412, 1, 0, 0.500229,-99)    );
  // itree = 553
  fBoostWeights.push_back(0.00919614);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0.732857, 0, 1, 0.509128,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502955,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497155,-99) , 
3, 44, 0, 0, 0.500778,-99) , 
2, 0.626667, 0, 0, 0.501568,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.509108,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493919,-99) , 
3, 40, 0, 0, 0.50238,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502777,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.484701,-99) , 
2, 1.44857, 0, 0, 0.490538,-99) , 
3, 44, 1, 0, 0.494815,-99) , 
2, 0.871905, 1, 0, 0.500428,-99)    );
  // itree = 554
  fBoostWeights.push_back(0.00643995);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.52343,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496845,-99) , 
2, 0.0871427, 0, 0, 0.50928,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501534,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492936,-99) , 
1, -17.5268, 0, 0, 0.500537,-99) , 
0, -21.3029, 1, 0, 0.501295,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492885,-99) , 
1, 69.6412, 1, 0, 0.50101,-99)    );
  // itree = 555
  fBoostWeights.push_back(0.00962309);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, -36.9616, 1, 1, 0.508975,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490735,-99) , 
0, 18.6351, 1, 0, 0.500652,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.51115,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.484303,-99) , 
9, 0, 1, 0, 0.493046,-99) , 
0, -15.2312, 0, 0, 0.499596,-99) , 
1, -22.8765, 1, 0, 0.500356,-99)    );
  // itree = 556
  fBoostWeights.push_back(0.00500592);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 1.62968, 1, 1, 0.509512,-99) , 
NN(
0, 
0, 
-1, 13, 1, -1, 0.496114,-99) , 
6, 3, 1, 0, 0.503978,-99) , 
NN(
0, 
0, 
-1, -27.3822, 0, -1, 0.498301,-99) , 
1, 23.3228, 0, 0, 0.499133,-99)    );
  // itree = 557
  fBoostWeights.push_back(0.00738124);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 11, 1, 1, 0.511672,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500566,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494561,-99) , 
1, 8.79268, 1, 0, 0.498867,-99) , 
1, 41.8589, 0, 0, 0.499996,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505789,-99) , 
NN(
0, 
0, 
-1, 10.4252, 0, -1, 0.486977,-99) , 
1, -3.91039, 1, 0, 0.494218,-99) , 
6, 1, 0, 0, 0.499306,-99)    );
  // itree = 558
  fBoostWeights.push_back(0.0048795);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.511181,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49979,-99) , 
3, 23, 0, 0, 0.506122,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50072,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494106,-99) , 
5, 1, 0, 0, 0.499819,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.479646,-99) , 
8, 1.13517, 0, 0, 0.499018,-99) , 
3, 30, 1, 0, 0.499471,-99)    );
  // itree = 559
  fBoostWeights.push_back(0.00987741);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.515669,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499609,-99) , 
5, 4, 0, 0, 0.507795,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491762,-99) , 
5, 10, 1, 0, 0.504208,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510332,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496501,-99) , 
6, 3, 0, 0, 0.501429,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501481,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495854,-99) , 
0, 9.09326, 0, 0, 0.49725,-99) , 
3, 44, 1, 0, 0.498789,-99) , 
1, 23.4621, 0, 0, 0.499575,-99)    );
  // itree = 560
  fBoostWeights.push_back(0.00675505);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.509694,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501154,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493073,-99) , 
1, -11.487, 0, 0, 0.500145,-99) , 
1, -22.9506, 1, 0, 0.500956,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.51206,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499566,-99) , 
2, 0.507143, 0, 0, 0.503097,-99) , 
NN(
0, 
0, 
-1, 27, 1, -1, 0.494495,-99) , 
3, 44, 1, 0, 0.49769,-99) , 
6, 3, 1, 0, 0.499766,-99)    );
  // itree = 561
  fBoostWeights.push_back(0.00389559);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 23, 0, 1, 0.506476,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50066,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495593,-99) , 
8, 1.8534, 1, 0, 0.499751,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488219,-99) , 
3, 34, 0, 0, 0.499375,-99) , 
3, 29, 1, 0, 0.499782,-99)    );
  // itree = 562
  fBoostWeights.push_back(0.00583006);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 5, 1, 1, 0.503331,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50642,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497771,-99) , 
7, 1, 1, 0, 0.498177,-99) , 
3, 40, 1, 0, 0.499042,-99) , 
NN(
0, 
0, 
-1, 0, 0, -1, 0.491258,-99) , 
2, 1.47714, 1, 0, 0.498616,-99)    );
  // itree = 563
  fBoostWeights.push_back(0.00461084);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512965,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510833,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49916,-99) , 
0, 33.4016, 0, 0, 0.499625,-99) , 
0, -27.3849, 1, 0, 0.500365,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.485989,-99) , 
1, 69.5561, 1, 0, 0.499871,-99)    );
  // itree = 564
  fBoostWeights.push_back(0.00733191);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512276,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.508155,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497822,-99) , 
6, 1, 1, 0, 0.499111,-99) , 
0, -27.3832, 1, 0, 0.499822,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491778,-99) , 
1, 60.2755, 1, 0, 0.499423,-99)    );
  // itree = 565
  fBoostWeights.push_back(0.00418175);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.508455,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50101,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491613,-99) , 
1, -25.5102, 0, 0, 0.50039,-99) , 
0, 27.3261, 0, 0, 0.50085,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492387,-99) , 
1, 69.5733, 1, 0, 0.50056,-99)    );
  // itree = 566
  fBoostWeights.push_back(0.00657164);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504639,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499347,-99) , 
7, 15, 0, 0, 0.501977,-99) , 
NN(
0, 
0, 
-1, 11, 1, -1, 0.497414,-99) , 
3, 43, 0, 0, 0.499962,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502186,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494899,-99) , 
0, -0.97959, 0, 0, 0.498757,-99) , 
NN(
0, 
0, 
-1, 21, 1, -1, 0.494454,-99) , 
5, 4, 0, 0, 0.497148,-99) , 
3, 45, 1, 0, 0.49884,-99)    );
  // itree = 567
  fBoostWeights.push_back(0.0059352);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512848,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501494,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489757,-99) , 
1, 30.4559, 1, 0, 0.500798,-99) , 
0, 27.325, 0, 0, 0.501477,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490445,-99) , 
1, 60.3953, 1, 0, 0.500928,-99)    );
  // itree = 568
  fBoostWeights.push_back(0.00605295);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512625,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.51364,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494461,-99) , 
7, 20, 0, 0, 0.501203,-99) , 
1, 37.4893, 1, 0, 0.505538,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500463,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.48749,-99) , 
1, -28.1256, 0, 0, 0.499633,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.485803,-99) , 
0, -27.386, 0, 0, 0.498986,-99) , 
1, 23.3974, 0, 0, 0.499939,-99)    );
  // itree = 569
  fBoostWeights.push_back(0.00485434);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 29, 1, 1, 0.512521,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496558,-99) , 
5, 4, 0, 0, 0.506367,-99) , 
NN(
NN(
0, 
0, 
-1, 40, 1, 1, 0.501132,-99) , 
NN(
0, 
0, 
-1, -0.868571, 0, -1, 0.497334,-99) , 
7, 15, 1, 0, 0.499429,-99) , 
7, 28, 0, 0, 0.500014,-99)    );
  // itree = 570
  fBoostWeights.push_back(0.0104452);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 1.31364, 1, 1, 0.514799,-99) , 
NN(
0, 
0, 
-1, 15, 0, -1, 0.48936,-99) , 
8, 1.59728, 1, 0, 0.504296,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.514668,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498014,-99) , 
1, 49.7948, 0, 0, 0.499449,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500162,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.48652,-99) , 
2, 0.442857, 0, 0, 0.491381,-99) , 
6, 1, 0, 0, 0.498511,-99) , 
1, -13.6921, 1, 0, 0.499431,-99)    );
  // itree = 571
  fBoostWeights.push_back(0.00527808);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 7, 0, 1, 0.510617,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496537,-99) , 
2, 0.195715, 1, 0, 0.505562,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506733,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499061,-99) , 
8, 1.26888, 1, 0, 0.500146,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492087,-99) , 
1, 69.4964, 1, 0, 0.499867,-99) , 
3, 36, 1, 0, 0.500494,-99)    );
  // itree = 572
  fBoostWeights.push_back(0.00629463);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512953,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.514664,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491064,-99) , 
1, 65.7072, 0, 0, 0.498805,-99) , 
8, 1.45328, 1, 0, 0.504582,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500394,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.48786,-99) , 
0, -24.7789, 0, 0, 0.499645,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.486605,-99) , 
0, 27.325, 1, 0, 0.499012,-99) , 
1, 23.4368, 0, 0, 0.499822,-99)    );
  // itree = 573
  fBoostWeights.push_back(0.00605983);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.513319,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.516781,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491463,-99) , 
1, 74.4862, 0, 0, 0.498484,-99) , 
1, 37.4363, 1, 0, 0.504097,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500455,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.487237,-99) , 
0, -18.702, 0, 0, 0.499763,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489525,-99) , 
0, -27.3862, 0, 0, 0.499286,-99) , 
1, 23.3541, 0, 0, 0.499988,-99)    );
  // itree = 574
  fBoostWeights.push_back(0.012589);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.514667,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503134,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.486179,-99) , 
1, -26.3851, 0, 0, 0.500121,-99) , 
0, -15.2293, 1, 0, 0.502314,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505922,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494137,-99) , 
5, 8, 1, 0, 0.501657,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502694,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488387,-99) , 
8, 1.5437, 0, 0, 0.496824,-99) , 
1, 14.9971, 0, 0, 0.498459,-99) , 
1, -4.37331, 1, 0, 0.499728,-99)    );
  // itree = 575
  fBoostWeights.push_back(0.00838372);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.511025,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.516534,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491186,-99) , 
1, 65.6665, 0, 0, 0.49933,-99) , 
8, 1.4203, 1, 0, 0.503639,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503052,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497786,-99) , 
5, 3, 1, 0, 0.499325,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.486456,-99) , 
0, 27.3242, 1, 0, 0.498706,-99) , 
1, 23.3419, 0, 0, 0.499427,-99)    );
  // itree = 576
  fBoostWeights.push_back(0.00507209);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.513461,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497146,-99) , 
1, -37.0863, 1, 0, 0.504843,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501017,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497951,-99) , 
7, 10, 1, 0, 0.499016,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489519,-99) , 
1, -17.2556, 0, 0, 0.498605,-99) , 
1, -22.9845, 1, 0, 0.499106,-99)    );
  // itree = 577
  fBoostWeights.push_back(0.00849003);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.511606,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501458,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492471,-99) , 
0, 12.9546, 1, 0, 0.500531,-99) , 
0, 21.04, 0, 0, 0.501348,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510067,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494368,-99) , 
0, 0.0598938, 0, 0, 0.501409,-99) , 
NN(
0, 
0, 
-1, 4.03886, 1, -1, 0.488916,-99) , 
7, 12, 0, 0, 0.496154,-99) , 
5, 2, 0, 0, 0.500144,-99)    );
  // itree = 578
  fBoostWeights.push_back(0.0103186);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.519327,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498116,-99) , 
1, 44.4673, 0, 0, 0.509629,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494986,-99) , 
6, 2, 0, 0, 0.50515,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50518,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497184,-99) , 
7, 20, 1, 0, 0.500608,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50238,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492014,-99) , 
8, 1.56246, 1, 0, 0.496847,-99) , 
7, 11, 0, 0, 0.499135,-99) , 
1, 23.3398, 0, 0, 0.500012,-99)    );
  // itree = 579
  fBoostWeights.push_back(0.00974755);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.526689,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497365,-99) , 
5, 9, 1, 0, 0.512497,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.509494,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496882,-99) , 
0, 27.3237, 0, 0, 0.497661,-99) , 
0, -21.3052, 1, 0, 0.49894,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.484783,-99) , 
1, 69.555, 1, 0, 0.498454,-99)    );
  // itree = 580
  fBoostWeights.push_back(0.00677065);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.513478,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497221,-99) , 
1, -36.8683, 1, 0, 0.504827,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.516933,-99) , 
NN(
0, 
0, 
-1, -18.1588, 0, -1, 0.497394,-99) , 
1, 74.4428, 0, 0, 0.497925,-99) , 
1, -22.7892, 1, 0, 0.498487,-99)    );
  // itree = 581
  fBoostWeights.push_back(0.0064534);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, -21.3045, 1, 1, 0.501329,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489232,-99) , 
1, 60.4234, 1, 0, 0.500735,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506322,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494254,-99) , 
8, 1.56186, 1, 0, 0.500176,-99) , 
NN(
0, 
0, 
-1, 44, 1, -1, 0.491323,-99) , 
2, 0.0614286, 1, 0, 0.495795,-99) , 
7, 6, 0, 0, 0.499458,-99)    );
  // itree = 582
  fBoostWeights.push_back(0.00836655);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.522434,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497417,-99) , 
2, 0.0685714, 0, 0, 0.50938,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502796,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49619,-99) , 
2, 0.0809525, 1, 0, 0.499655,-99) , 
0, -21.3073, 1, 0, 0.500495,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491689,-99) , 
1, 69.6079, 1, 0, 0.500198,-99)    );
  // itree = 583
  fBoostWeights.push_back(0.00653946);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 22.8921, 0, 1, 0.502231,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489989,-99) , 
1, 60.3046, 1, 0, 0.50163,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.508481,-99) , 
NN(
0, 
0, 
-1, -10.6457, 0, -1, 0.495225,-99) , 
1, 32.5411, 0, 0, 0.496559,-99) , 
7, 6, 0, 0, 0.500317,-99)    );
  // itree = 584
  fBoostWeights.push_back(0.00673494);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 20, 0, 1, 0.511975,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500819,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49559,-99) , 
1, 8.88213, 1, 0, 0.499346,-99) , 
1, 41.9035, 0, 0, 0.500457,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505209,-99) , 
NN(
0, 
0, 
-1, 6, 0, -1, 0.490881,-99) , 
3, 43, 1, 0, 0.494561,-99) , 
6, 1, 0, 0, 0.499752,-99)    );
  // itree = 585
  fBoostWeights.push_back(0.00757587);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.509049,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495684,-99) , 
5, 5, 0, 0, 0.503127,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504188,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498577,-99) , 
1, -22.9506, 1, 0, 0.499183,-99) , 
1, 14.0834, 0, 0, 0.500131,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.509798,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49622,-99) , 
9, 0, 0, 0, 0.503202,-99) , 
NN(
0, 
0, 
-1, 3.00581, 1, -1, 0.488259,-99) , 
8, 1.58844, 1, 0, 0.495818,-99) , 
7, 3, 0, 0, 0.499576,-99)    );
  // itree = 586
  fBoostWeights.push_back(0.00535728);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 1.25632, 1, 1, 0.501658,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.48135,-99) , 
8, 1.13816, 0, 0, 0.500734,-99) , 
NN(
0, 
0, 
-1, 6, 1, -1, 0.492714,-99) , 
8, 1.9653, 1, 0, 0.500325,-99)    );
  // itree = 587
  fBoostWeights.push_back(0.00544533);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.511232,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500831,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490726,-99) , 
1, -17.5575, 0, 0, 0.499651,-99) , 
0, -27.3867, 1, 0, 0.50029,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.486465,-99) , 
1, 69.6344, 1, 0, 0.499813,-99)    );
  // itree = 588
  fBoostWeights.push_back(0.00531526);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.511649,-99) , 
NN(
0, 
0, 
-1, 30.462, 1, -1, 0.498255,-99) , 
0, -27.3861, 1, 0, 0.498986,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490219,-99) , 
1, 60.4132, 1, 0, 0.49855,-99)    );
  // itree = 589
  fBoostWeights.push_back(0.0086687);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504265,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498407,-99) , 
0, -9.14853, 0, 0, 0.5028,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502344,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493533,-99) , 
1, -8.85649, 0, 0, 0.496139,-99) , 
1, -4.44833, 0, 0, 0.500646,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502965,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495968,-99) , 
0, -9.13944, 1, 0, 0.497796,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.481458,-99) , 
1, 60.3571, 1, 0, 0.496992,-99) , 
7, 12, 1, 0, 0.498518,-99)    );
  // itree = 590
  fBoostWeights.push_back(0.00975884);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 1.50002, 1, 1, 0.508717,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49514,-99) , 
0, 7.18459, 1, 0, 0.504763,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505741,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498052,-99) , 
5, 7, 1, 0, 0.501046,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502246,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491712,-99) , 
5, 6, 0, 0, 0.496342,-99) , 
9, 0, 1, 0, 0.498869,-99) , 
5, 1, 1, 0, 0.49968,-99)    );
  // itree = 591
  fBoostWeights.push_back(0.00515505);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 47.9609, 0, 1, 0.508406,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496266,-99) , 
6, 2, 0, 0, 0.50472,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500596,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488319,-99) , 
0, 24.7217, 1, 0, 0.499841,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.487138,-99) , 
0, -27.3798, 0, 0, 0.499245,-99) , 
1, 23.3169, 0, 0, 0.500047,-99)    );
  // itree = 592
  fBoostWeights.push_back(0.00685014);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.527835,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491135,-99) , 
8, 1.44581, 1, 0, 0.507158,-99) , 
NN(
NN(
0, 
0, 
-1, 20.972, 1, 1, 0.505383,-99) , 
NN(
0, 
0, 
-1, 21.2471, 1, -1, 0.498657,-99) , 
1, 17.1515, 0, 0, 0.500117,-99) , 
1, -22.9624, 1, 0, 0.500686,-99)    );
  // itree = 593
  fBoostWeights.push_back(0.00756745);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.514354,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501773,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.4881,-99) , 
0, -7.69766, 0, 0, 0.500282,-99) , 
0, -15.2232, 1, 0, 0.50162,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.508351,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498436,-99) , 
7, 5, 1, 0, 0.499758,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.485038,-99) , 
7, 2, 0, 0, 0.498421,-99) , 
9, 0, 1, 0, 0.499995,-99)    );
  // itree = 594
  fBoostWeights.push_back(0.00795403);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.514403,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.509489,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.487709,-99) , 
8, 1.50987, 0, 0, 0.499532,-99) , 
1, 37.4248, 1, 0, 0.505206,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501305,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.486882,-99) , 
1, -28.1586, 0, 0, 0.50038,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.487409,-99) , 
0, 27.3256, 1, 0, 0.499748,-99) , 
1, 23.3398, 0, 0, 0.500546,-99)    );
  // itree = 595
  fBoostWeights.push_back(0.00871175);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505436,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496124,-99) , 
5, 1, 0, 0, 0.504223,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505835,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494158,-99) , 
8, 1.38744, 1, 0, 0.497473,-99) , 
0, -3.06913, 0, 0, 0.501387,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.511467,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498046,-99) , 
8, 1.421, 1, 0, 0.503069,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500441,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493551,-99) , 
8, 1.56261, 0, 0, 0.497263,-99) , 
1, -13.5681, 1, 0, 0.498204,-99) , 
7, 18, 0, 0, 0.499493,-99)    );
  // itree = 596
  fBoostWeights.push_back(0.0135487);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.508546,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493616,-99) , 
0, 6.28992, 1, 0, 0.502765,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.486105,-99) , 
0, -11.6809, 0, 0, 0.500579,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.508535,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.486545,-99) , 
5, 10, 1, 0, 0.501603,-99) , 
NN(
0, 
0, 
-1, 4, 0, -1, 0.495561,-99) , 
0, -9.35421, 1, 0, 0.497237,-99) , 
5, 3, 1, 0, 0.498258,-99)    );
  // itree = 597
  fBoostWeights.push_back(0.00576278);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.521486,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490905,-99) , 
8, 1.5602, 1, 0, 0.508358,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494552,-99) , 
1, 62.1497, 1, 0, 0.503929,-99) , 
NN(
0, 
0, 
-1, -27.3861, 0, -1, 0.498795,-99) , 
1, 23.3974, 0, 0, 0.499541,-99)    );
  // itree = 598
  fBoostWeights.push_back(0.00900385);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 7, 0, 1, 0.503464,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502159,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494734,-99) , 
8, 1.59979, 1, 0, 0.498637,-99) , 
0, -3.06892, 0, 0, 0.501434,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.508839,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493883,-99) , 
5, 7, 1, 0, 0.499617,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.483149,-99) , 
5, 3, 0, 0, 0.494508,-99) , 
2, -0.853333, 0, 0, 0.500424,-99)    );
  // itree = 599
  fBoostWeights.push_back(0.00540797);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50797,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503981,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498516,-99) , 
5, 10, 0, 0, 0.499641,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490778,-99) , 
0, -18.7024, 0, 0, 0.499151,-99) , 
0, -27.3867, 1, 0, 0.499636,-99)    );
  // itree = 600
  fBoostWeights.push_back(0.00729987);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 20, 0, 1, 0.508551,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501966,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49715,-99) , 
7, 6, 0, 0, 0.500787,-99) , 
1, 41.8928, 0, 0, 0.501476,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.511214,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49742,-99) , 
2, 0.555714, 0, 0, 0.504697,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.485255,-99) , 
2, -0.0480952, 0, 0, 0.496642,-99) , 
6, 1, 0, 0, 0.500897,-99)    );
  // itree = 601
  fBoostWeights.push_back(0.00756277);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.511905,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50439,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491395,-99) , 
1, -26.2815, 0, 0, 0.502044,-99) , 
0, -15.2299, 1, 0, 0.503532,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.514111,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49896,-99) , 
1, 73.1635, 0, 0, 0.499648,-99) , 
NN(
0, 
0, 
-1, 5.24527, 0, -1, 0.489708,-99) , 
6, 1, 0, 0, 0.498537,-99) , 
1, -4.32603, 1, 0, 0.500188,-99)    );
  // itree = 602
  fBoostWeights.push_back(0.00823659);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.527038,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498808,-99) , 
0, 9.09562, 0, 0, 0.508232,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492866,-99) , 
1, 69.1936, 1, 0, 0.50459,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502073,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497219,-99) , 
7, 20, 1, 0, 0.500388,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503668,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489783,-99) , 
3, 44, 1, 0, 0.494768,-99) , 
2, 0.871905, 1, 0, 0.49944,-99) , 
1, 23.3419, 0, 0, 0.50019,-99)    );
  // itree = 603
  fBoostWeights.push_back(0.00464681);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 48.0416, 0, 1, 0.508694,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492485,-99) , 
6, 2, 0, 0, 0.503753,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500144,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.4873,-99) , 
0, 29.0618, 1, 0, 0.499573,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.486427,-99) , 
0, -27.3841, 0, 0, 0.498959,-99) , 
1, 23.4531, 0, 0, 0.499654,-99)    );
  // itree = 604
  fBoostWeights.push_back(0.00948296);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 42, 0, 1, 0.505618,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505706,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49843,-99) , 
2, 0.470952, 0, 0, 0.50053,-99) , 
1, 5.13606, 0, 0, 0.502685,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504948,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489608,-99) , 
0, -15.2054, 0, 0, 0.502744,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50748,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495565,-99) , 
7, 2, 1, 0, 0.497238,-99) , 
7, 19, 0, 0, 0.499322,-99) , 
3, 44, 1, 0, 0.500563,-99)    );
  // itree = 605
  fBoostWeights.push_back(0.0113841);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507061,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496431,-99) , 
3, 42, 0, 0, 0.50483,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501286,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494143,-99) , 
7, 18, 0, 0, 0.499107,-99) , 
7, 12, 1, 0, 0.501492,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.513878,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493284,-99) , 
0, -0.890679, 0, 0, 0.500858,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.482297,-99) , 
0, 19.9759, 1, 0, 0.498035,-99) , 
5, 2, 0, 0, 0.500689,-99)    );
  // itree = 606
  fBoostWeights.push_back(0.00813448);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.508415,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499266,-99) , 
1, 4.84326, 0, 0, 0.50345,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501332,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494547,-99) , 
6, 2, 1, 0, 0.498358,-99) , 
6, 3, 0, 0, 0.50021,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506568,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498271,-99) , 
7, 22, 1, 0, 0.500937,-99) , 
NN(
0, 
0, 
-1, 16, 1, -1, 0.494168,-99) , 
7, 19, 0, 0, 0.496747,-99) , 
3, 45, 1, 0, 0.49883,-99)    );
  // itree = 607
  fBoostWeights.push_back(0.00589051);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.525578,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492407,-99) , 
1, 6.28495, 0, 0, 0.507259,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.511783,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499169,-99) , 
0, 31.3751, 0, 0, 0.499762,-99) , 
0, -21.308, 1, 0, 0.500413,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.487043,-99) , 
1, 69.6624, 1, 0, 0.499952,-99)    );
  // itree = 608
  fBoostWeights.push_back(0.00662427);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.514283,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502924,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49798,-99) , 
0, -7.40948, 1, 0, 0.49955,-99) , 
0, 27.3256, 0, 0, 0.500381,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490353,-99) , 
1, 60.3412, 1, 0, 0.499884,-99)    );
  // itree = 609
  fBoostWeights.push_back(0.00714252);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.513308,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491983,-99) , 
1, 65.6665, 1, 0, 0.507339,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490493,-99) , 
2, -0.564286, 0, 0, 0.503266,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50094,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.48796,-99) , 
0, -24.7808, 0, 0, 0.500162,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.485035,-99) , 
0, 27.3242, 1, 0, 0.499425,-99) , 
1, 23.3419, 0, 0, 0.499986,-99)    );
  // itree = 610
  fBoostWeights.push_back(0.0096144);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 45, 0, 1, 0.509005,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506593,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49273,-99) , 
3, 44, 1, 0, 0.497125,-99) , 
8, 1.59478, 1, 0, 0.502914,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50197,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.486649,-99) , 
0, 21.2438, 1, 0, 0.500598,-99) , 
NN(
0, 
0, 
-1, 0.406667, 1, -1, 0.49459,-99) , 
2, 0.110952, 1, 0, 0.499047,-99) , 
2, 0.554286, 0, 0, 0.500098,-99)    );
  // itree = 611
  fBoostWeights.push_back(0.00327069);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507472,-99) , 
NN(
0, 
0, 
-1, -19.7584, 0, -1, 0.498661,-99) , 
1, -32.0887, 1, 0, 0.499088,-99)    );
  // itree = 612
  fBoostWeights.push_back(0.00791556);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.519812,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489058,-99) , 
8, 1.6035, 1, 0, 0.508135,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496285,-99) , 
1, 69.2297, 1, 0, 0.505322,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.514368,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493942,-99) , 
2, -0.042381, 0, 0, 0.504859,-99) , 
NN(
0, 
0, 
-1, 19.0755, 1, -1, 0.498542,-99) , 
1, -22.3561, 1, 0, 0.499158,-99) , 
1, 23.4368, 0, 0, 0.500058,-99)    );
  // itree = 613
  fBoostWeights.push_back(0.0071844);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 1.30286, 0, 1, 0.503771,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503225,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495979,-99) , 
6, 2, 0, 0, 0.500818,-99) , 
NN(
0, 
0, 
-1, 0.102269, 1, -1, 0.496535,-99) , 
1, 4.94125, 0, 0, 0.498369,-99) , 
3, 45, 0, 0, 0.500504,-99)    );
  // itree = 614
  fBoostWeights.push_back(0.00513026);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0.218572, 0, 1, 0.511581,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500557,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.484642,-99) , 
1, 30.2898, 1, 0, 0.49963,-99) , 
0, 21.2464, 0, 0, 0.500681,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492629,-99) , 
1, 60.2455, 1, 0, 0.500278,-99)    );
  // itree = 615
  fBoostWeights.push_back(0.00514568);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.526241,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498517,-99) , 
0, -9.14058, 1, 0, 0.507732,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491041,-99) , 
1, 69.1936, 1, 0, 0.503776,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500017,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490533,-99) , 
1, -28.1572, 0, 0, 0.499417,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.483042,-99) , 
0, -27.386, 0, 0, 0.498649,-99) , 
1, 23.3419, 0, 0, 0.499398,-99)    );
  // itree = 616
  fBoostWeights.push_back(0.00638445);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.522104,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499673,-99) , 
1, 51.6135, 0, 0, 0.509918,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498833,-99) , 
6, 2, 0, 0, 0.506545,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.514193,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499058,-99) , 
3, 27, 1, 0, 0.499783,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501199,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489658,-99) , 
6, 2, 1, 0, 0.494135,-99) , 
2, 0.871905, 1, 0, 0.498828,-99) , 
1, 23.4309, 0, 0, 0.499949,-99)    );
  // itree = 617
  fBoostWeights.push_back(0.00586397);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.509122,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501988,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498202,-99) , 
5, 8, 1, 0, 0.500619,-99) , 
3, 29, 1, 0, 0.501113,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504077,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49446,-99) , 
7, 17, 1, 0, 0.499826,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489214,-99) , 
5, 3, 0, 0, 0.496585,-99) , 
2, 0.987143, 1, 0, 0.500478,-99)    );
  // itree = 618
  fBoostWeights.push_back(0.00412744);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.51335,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506229,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499634,-99) , 
5, 1, 1, 0, 0.50049,-99) , 
0, 27.3242, 0, 0, 0.501222,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491176,-99) , 
1, 69.5942, 1, 0, 0.500876,-99)    );
  // itree = 619
  fBoostWeights.push_back(0.00569459);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0.0538097, 0, 1, 0.506164,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501274,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495953,-99) , 
0, -15.2291, 0, 0, 0.500524,-99) , 
1, -22.841, 1, 0, 0.500992,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504613,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500855,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.484278,-99) , 
5, 4, 1, 0, 0.490212,-99) , 
8, 1.46388, 1, 0, 0.495395,-99) , 
7, 3, 0, 0, 0.500271,-99)    );
  // itree = 620
  fBoostWeights.push_back(0.00837832);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.519673,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496615,-99) , 
8, 1.44418, 1, 0, 0.505906,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501372,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492698,-99) , 
8, 1.24511, 0, 0, 0.500435,-99) , 
0, 15.1661, 0, 0, 0.501243,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.509208,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494667,-99) , 
7, 11, 0, 0, 0.500842,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500909,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.480899,-99) , 
7, 26, 0, 0, 0.491593,-99) , 
7, 20, 1, 0, 0.497645,-99) , 
3, 42, 0, 0, 0.500461,-99)    );
  // itree = 621
  fBoostWeights.push_back(0.0100716);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 23.2549, 0, 1, 0.506296,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500233,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.485114,-99) , 
1, 22.9763, 1, 0, 0.497538,-99) , 
5, 5, 0, 0, 0.502504,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.518728,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497923,-99) , 
1, 51.1064, 0, 0, 0.499114,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.511404,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.482815,-99) , 
9, 0, 1, 0, 0.491467,-99) , 
0, -19.2819, 0, 0, 0.497774,-99) , 
0, 3.00702, 0, 0, 0.49974,-99)    );
  // itree = 622
  fBoostWeights.push_back(0.00727157);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.53086,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491862,-99) , 
8, 1.44594, 1, 0, 0.508999,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503505,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499004,-99) , 
5, 8, 0, 0, 0.500629,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.487588,-99) , 
1, -17.2191, 0, 0, 0.500055,-99) , 
1, -22.9506, 1, 0, 0.500777,-99)    );
  // itree = 623
  fBoostWeights.push_back(0.00758097);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 11, 0, 1, 0.503052,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512351,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497205,-99) , 
0, 21.2376, 0, 0, 0.498578,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.483042,-99) , 
1, 60.3291, 1, 0, 0.497812,-99) , 
7, 12, 1, 0, 0.499994,-99)    );
  // itree = 624
  fBoostWeights.push_back(0.00775866);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507531,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.52226,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499422,-99) , 
1, 60.43, 0, 0, 0.500506,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504872,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489325,-99) , 
8, 1.5021, 1, 0, 0.496228,-99) , 
0, 7.35044, 1, 0, 0.49915,-99) , 
0, -27.3848, 1, 0, 0.499616,-99)    );
  // itree = 625
  fBoostWeights.push_back(0.014292);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512429,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49725,-99) , 
0, -6.54265, 0, 0, 0.504415,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510474,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.465113,-99) , 
9, 0, 0, 0, 0.496806,-99) , 
8, 1.37777, 0, 0, 0.502462,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510406,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499567,-99) , 
1, 23.4172, 0, 0, 0.50108,-99) , 
NN(
0, 
0, 
-1, 3, 1, -1, 0.494627,-99) , 
5, 4, 0, 0, 0.49871,-99) , 
0, 3.00974, 1, 0, 0.500898,-99)    );
  // itree = 626
  fBoostWeights.push_back(0.00633019);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.524502,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495257,-99) , 
8, 1.44632, 1, 0, 0.508068,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.514761,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501315,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.484981,-99) , 
1, 51.2619, 1, 0, 0.500602,-99) , 
1, 74.4568, 0, 0, 0.500988,-99) , 
1, -22.9624, 1, 0, 0.501562,-99)    );
  // itree = 627
  fBoostWeights.push_back(0.0101432);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505356,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498437,-99) , 
5, 3, 0, 0, 0.503158,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488818,-99) , 
1, 51.1532, 1, 0, 0.5022,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506952,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493534,-99) , 
8, 1.50227, 0, 0, 0.501331,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501377,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492258,-99) , 
5, 3, 1, 0, 0.497099,-99) , 
5, 7, 0, 0, 0.49893,-99) , 
0, -3.06748, 1, 0, 0.500297,-99)    );
  // itree = 628
  fBoostWeights.push_back(0.00636154);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.521199,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499363,-99) , 
2, 0.0728571, 0, 0, 0.509654,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501566,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.486395,-99) , 
1, 30.4153, 1, 0, 0.500687,-99) , 
0, -21.3054, 1, 0, 0.501459,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492581,-99) , 
1, 60.32, 1, 0, 0.501015,-99)    );
  // itree = 629
  fBoostWeights.push_back(0.00752938);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.519337,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.520591,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492049,-99) , 
8, 1.38587, 1, 0, 0.502175,-99) , 
1, 72.6936, 0, 0, 0.505428,-99) , 
NN(
0, 
0, 
-1, -27.3816, 0, -1, 0.497942,-99) , 
1, 23.3228, 0, 0, 0.499036,-99)    );
  // itree = 630
  fBoostWeights.push_back(0.00827666);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 41.8106, 0, 1, 0.504092,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502554,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489857,-99) , 
0, -3.08138, 0, 0, 0.497579,-99) , 
3, 42, 0, 0, 0.502653,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.515004,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495714,-99) , 
7, 11, 0, 0, 0.502792,-99) , 
NN(
0, 
0, 
-1, 14, 1, -1, 0.497533,-99) , 
0, -9.14929, 1, 0, 0.498893,-99) , 
7, 18, 0, 0, 0.500413,-99)    );
  // itree = 631
  fBoostWeights.push_back(0.00347031);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.509155,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500641,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491215,-99) , 
1, -25.596, 0, 0, 0.500002,-99) , 
0, 33.4028, 0, 0, 0.500347,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491394,-99) , 
1, 69.6344, 1, 0, 0.500041,-99)    );
  // itree = 632
  fBoostWeights.push_back(0.00845483);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.518329,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497866,-99) , 
7, 11, 0, 0, 0.507883,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494814,-99) , 
7, 21, 1, 0, 0.504188,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512136,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498173,-99) , 
1, 44.4817, 0, 0, 0.499551,-99) , 
NN(
0, 
0, 
-1, 2.02368, 0, -1, 0.492502,-99) , 
6, 1, 0, 0, 0.498728,-99) , 
1, -13.7054, 1, 0, 0.499595,-99)    );
  // itree = 633
  fBoostWeights.push_back(0.00595204);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, -0.0909522, 0, 1, 0.511413,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504836,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499477,-99) , 
5, 3, 1, 0, 0.501112,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489205,-99) , 
1, -17.1544, 0, 0, 0.500586,-99) , 
1, -22.8765, 1, 0, 0.50146,-99)    );
  // itree = 634
  fBoostWeights.push_back(0.00499668);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, -21.3013, 1, 1, 0.501979,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492302,-99) , 
1, 69.5861, 1, 0, 0.501648,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488796,-99) , 
2, -1.47857, 0, 0, 0.501186,-99)    );
  // itree = 635
  fBoostWeights.push_back(0.00588801);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 19, 1, 1, 0.511125,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507425,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494505,-99) , 
7, 22, 0, 0, 0.498403,-99) , 
9, 0, 1, 0, 0.504629,-99) , 
NN(
NN(
0, 
0, 
-1, 20, 0, 1, 0.504614,-99) , 
NN(
0, 
0, 
-1, 4, 1, -1, 0.498674,-99) , 
1, 23.3665, 0, 0, 0.499541,-99) , 
3, 40, 1, 0, 0.5004,-99)    );
  // itree = 636
  fBoostWeights.push_back(0.0100422);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.515694,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495436,-99) , 
9, 0, 1, 0, 0.510178,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.515624,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.487207,-99) , 
9, 0, 0, 0, 0.49813,-99) , 
8, 1.50227, 1, 0, 0.503634,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.514034,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500988,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488776,-99) , 
1, 30.1094, 1, 0, 0.500099,-99) , 
1, 69.6251, 0, 0, 0.50057,-99) , 
0, 9.08734, 0, 0, 0.501358,-99)    );
  // itree = 637
  fBoostWeights.push_back(0.00352064);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512088,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499603,-99) , 
1, -36.9233, 1, 0, 0.505466,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500373,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491701,-99) , 
0, 27.3239, 1, 0, 0.49993,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.48535,-99) , 
1, -17.1036, 0, 0, 0.499281,-99) , 
1, -22.8293, 1, 0, 0.499783,-99)    );
  // itree = 638
  fBoostWeights.push_back(0.0072975);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.511647,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510317,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498708,-99) , 
0, 21.2459, 0, 0, 0.499747,-99) , 
1, 51.0849, 0, 0, 0.500634,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502412,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493101,-99) , 
7, 20, 1, 0, 0.499042,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.483049,-99) , 
1, 32.1493, 1, 0, 0.497726,-99) , 
6, 2, 0, 0, 0.499569,-99)    );
  // itree = 639
  fBoostWeights.push_back(0.00679558);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 4, 0, 1, 0.510273,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50345,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498562,-99) , 
0, -3.07071, 1, 0, 0.500802,-99) , 
0, 21.2453, 0, 0, 0.501639,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.48701,-99) , 
1, 69.67, 1, 0, 0.50114,-99)    );
  // itree = 640
  fBoostWeights.push_back(0.00998669);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.51408,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496781,-99) , 
1, 5.12739, 1, 0, 0.5068,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50636,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495938,-99) , 
1, 5.11038, 0, 0, 0.500755,-99) , 
8, 1.72592, 0, 0, 0.502724,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510401,-99) , 
NN(
0, 
0, 
-1, 0.0942858, 1, -1, 0.496479,-99) , 
1, -22.8293, 1, 0, 0.497668,-99) , 
6, 3, 0, 0, 0.499498,-99)    );
  // itree = 641
  fBoostWeights.push_back(0.00674622);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512397,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502145,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488476,-99) , 
0, -18.7015, 0, 0, 0.501381,-99) , 
0, -27.386, 1, 0, 0.50199,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491912,-99) , 
1, 69.6678, 1, 0, 0.501648,-99)    );
  // itree = 642
  fBoostWeights.push_back(0.00266438);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.508081,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500017,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491696,-99) , 
1, 29.886, 1, 0, 0.499388,-99) , 
0, 27.325, 0, 0, 0.499879,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491048,-99) , 
1, 69.5453, 1, 0, 0.499578,-99)    );
  // itree = 643
  fBoostWeights.push_back(0.00524426);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.527938,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497681,-99) , 
0, -4.32949, 1, 0, 0.509103,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499304,-99) , 
5, 8, 1, 0, 0.505522,-99) , 
NN(
0, 
0, 
-1, -27.3861, 0, -1, 0.498267,-99) , 
1, 23.481, 0, 0, 0.49932,-99)    );
  // itree = 644
  fBoostWeights.push_back(0.015439);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.524031,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499799,-99) , 
5, 4, 0, 0, 0.514504,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.517589,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.487336,-99) , 
9, 0, 0, 0, 0.498573,-99) , 
8, 1.40562, 1, 0, 0.50395,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506911,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.487248,-99) , 
0, -11.7489, 0, 0, 0.502484,-99) , 
NN(
0, 
0, 
-1, 1.15347, 0, -1, 0.496956,-99) , 
8, 1.64363, 0, 0, 0.499418,-99) , 
0, 9.08921, 0, 0, 0.500584,-99)    );
  // itree = 645
  fBoostWeights.push_back(0.00454998);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, -27.3798, 1, 1, 0.50198,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489448,-99) , 
1, 69.6412, 1, 0, 0.50155,-99)    );
  // itree = 646
  fBoostWeights.push_back(0.00764582);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.514384,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499432,-99) , 
6, 3, 1, 0, 0.507804,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504654,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498458,-99) , 
2, -0.359524, 1, 0, 0.500487,-99) , 
1, 23.3758, 0, 0, 0.501623,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501874,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502096,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.485623,-99) , 
1, 10.7701, 0, 0, 0.492012,-99) , 
1, -3.50122, 1, 0, 0.495939,-99) , 
6, 1, 0, 0, 0.500941,-99)    );
  // itree = 647
  fBoostWeights.push_back(0.00632521);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 51.0496, 0, 1, 0.502065,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502624,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494482,-99) , 
7, 11, 0, 0, 0.499341,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.480591,-99) , 
1, 32.7183, 1, 0, 0.497817,-99) , 
6, 2, 0, 0, 0.500509,-99)    );
  // itree = 648
  fBoostWeights.push_back(0.00402365);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505302,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.511775,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499107,-99) , 
1, 60.3882, 0, 0, 0.499719,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491323,-99) , 
0, -18.7017, 0, 0, 0.499255,-99) , 
0, -27.3861, 1, 0, 0.499588,-99)    );
  // itree = 649
  fBoostWeights.push_back(0.00575424);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 23, 0, 1, 0.506193,-99) , 
NN(
NN(
0, 
0, 
-1, 51.3101, 0, 1, 0.501114,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506356,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495046,-99) , 
2, 0.630476, 0, 0, 0.497922,-99) , 
6, 2, 0, 0, 0.499944,-99) , 
3, 30, 1, 0, 0.500342,-99)    );
  // itree = 650
  fBoostWeights.push_back(0.00668828);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.527015,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49053,-99) , 
8, 1.44597, 1, 0, 0.506449,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.516364,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501119,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490583,-99) , 
1, 37.3548, 1, 0, 0.500348,-99) , 
1, 74.4155, 0, 0, 0.50079,-99) , 
1, -22.8688, 1, 0, 0.501248,-99)    );
  // itree = 651
  fBoostWeights.push_back(0.00791757);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502412,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49084,-99) , 
6, 4, 1, 0, 0.501319,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491651,-99) , 
1, 51.0938, 1, 0, 0.500708,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.514418,-99) , 
NN(
0, 
0, 
-1, 15.4099, 1, -1, 0.495804,-99) , 
1, 41.8053, 0, 0, 0.497331,-99) , 
7, 20, 1, 0, 0.499532,-99)    );
  // itree = 652
  fBoostWeights.push_back(0.00697669);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512269,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501728,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495388,-99) , 
7, 4, 0, 0, 0.500905,-99) , 
7, 1, 1, 0, 0.501434,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.508181,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495688,-99) , 
7, 3, 0, 0, 0.503478,-99) , 
NN(
0, 
0, 
-1, 16, 0, -1, 0.493205,-99) , 
7, 10, 1, 0, 0.496654,-99) , 
3, 42, 0, 0, 0.500393,-99)    );
  // itree = 653
  fBoostWeights.push_back(0.0048088);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.520842,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499886,-99) , 
8, 1.56047, 0, 0, 0.510097,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492476,-99) , 
6, 2, 0, 0, 0.505066,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500244,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.483847,-99) , 
0, -27.386, 0, 0, 0.499486,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490655,-99) , 
1, 20.2017, 1, 0, 0.498841,-99) , 
1, 32.5411, 0, 0, 0.499485,-99)    );
  // itree = 654
  fBoostWeights.push_back(0.010727);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512984,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503942,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.482507,-99) , 
7, 11, 0, 0, 0.499599,-99) , 
7, 5, 1, 0, 0.502481,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.521706,-99) , 
NN(
0, 
0, 
-1, 0.891429, 1, -1, 0.49581,-99) , 
2, 1.68, 0, 0, 0.496624,-99) , 
3, 41, 1, 0, 0.497729,-99)    );
  // itree = 655
  fBoostWeights.push_back(0.0065397);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.51286,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.51397,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494777,-99) , 
1, 62.1751, 0, 0, 0.501274,-99) , 
0, -9.13922, 1, 0, 0.504924,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500333,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489659,-99) , 
0, 21.2471, 1, 0, 0.499547,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501678,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.476617,-99) , 
8, 1.1501, 0, 0, 0.488271,-99) , 
8, 1.21001, 0, 0, 0.498519,-99) , 
1, 23.4166, 0, 0, 0.49945,-99)    );
  // itree = 656
  fBoostWeights.push_back(0.00543352);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 3, 0, 1, 0.507552,-99) , 
NN(
0, 
0, 
-1, 27.3255, 1, -1, 0.498108,-99) , 
1, 23.3228, 0, 0, 0.499485,-99)    );
  // itree = 657
  fBoostWeights.push_back(0.00873318);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.525277,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497,-99) , 
0, -9.14383, 1, 0, 0.506408,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492527,-99) , 
1, 69.2297, 1, 0, 0.50311,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505982,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49749,-99) , 
6, 1, 1, 0, 0.498581,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.486286,-99) , 
0, -27.3867, 0, 0, 0.49801,-99) , 
1, 23.4368, 0, 0, 0.498753,-99)    );
  // itree = 658
  fBoostWeights.push_back(0.00884988);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50907,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494018,-99) , 
3, 32, 0, 0, 0.506429,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502593,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494647,-99) , 
8, 1.81522, 1, 0, 0.500645,-99) , 
3, 44, 1, 0, 0.502656,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502157,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496059,-99) , 
6, 3, 1, 0, 0.499736,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489804,-99) , 
6, 1, 0, 0, 0.498672,-99) , 
2, -0.0371429, 0, 0, 0.500803,-99)    );
  // itree = 659
  fBoostWeights.push_back(0.00789073);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 1.61739, 0, 1, 0.510997,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506139,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497781,-99) , 
0, 15.1701, 0, 0, 0.499,-99) , 
1, 51.1174, 0, 0, 0.499847,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502475,-99) , 
NN(
0, 
0, 
-1, 5.58049, 0, -1, 0.490177,-99) , 
2, 0.782857, 0, 0, 0.492935,-99) , 
6, 1, 0, 0, 0.499019,-99)    );
  // itree = 660
  fBoostWeights.push_back(0.0115928);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50422,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490649,-99) , 
0, -19.2809, 0, 0, 0.502683,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.487674,-99) , 
0, 21.2453, 1, 0, 0.501342,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.516497,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504775,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494785,-99) , 
0, -15.2294, 1, 0, 0.496355,-99) , 
0, 21.2435, 0, 0, 0.498118,-99) , 
2, 0.0680951, 1, 0, 0.49978,-99)    );
  // itree = 661
  fBoostWeights.push_back(0.0062496);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.51608,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495462,-99) , 
2, -0.042381, 0, 0, 0.506476,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505874,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498992,-99) , 
5, 2, 1, 0, 0.500496,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490425,-99) , 
0, 27.3239, 1, 0, 0.499973,-99) , 
1, -22.841, 1, 0, 0.500497,-99)    );
  // itree = 662
  fBoostWeights.push_back(0.00659935);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.518769,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502065,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496128,-99) , 
2, -0.757143, 0, 0, 0.501043,-99) , 
2, 1.75333, 0, 0, 0.501537,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50289,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.48708,-99) , 
2, -0.328095, 1, 0, 0.493861,-99) , 
3, 33, 0, 0, 0.500917,-99)    );
  // itree = 663
  fBoostWeights.push_back(0.0054032);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.517852,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504892,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496267,-99) , 
1, 14.688, 0, 0, 0.499578,-99) , 
1, -4.61983, 1, 0, 0.504971,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501212,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495846,-99) , 
2, -0.924286, 0, 0, 0.50054,-99) , 
NN(
0, 
0, 
-1, 2, 1, -1, 0.493065,-99) , 
3, 32, 0, 0, 0.499989,-99) , 
6, 4, 0, 0, 0.500569,-99)    );
  // itree = 664
  fBoostWeights.push_back(0.00885524);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.524878,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497345,-99) , 
0, -9.14886, 1, 0, 0.506484,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492247,-99) , 
1, 69.1955, 1, 0, 0.503095,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510753,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498725,-99) , 
2, -0.545714, 0, 0, 0.50144,-99) , 
NN(
0, 
0, 
-1, 3, 0, -1, 0.496361,-99) , 
2, -0.368571, 1, 0, 0.497965,-99) , 
1, 23.3974, 0, 0, 0.498709,-99)    );
  // itree = 665
  fBoostWeights.push_back(0.00781288);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0.0857143, 1, 1, 0.504104,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505991,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497513,-99) , 
2, -1.09048, 1, 0, 0.499342,-99) , 
2, -0.142857, 0, 0, 0.502009,-99) , 
NN(
0, 
0, 
-1, 5, 0, -1, 0.493152,-99) , 
2, 1.44857, 1, 0, 0.501495,-99)    );
  // itree = 666
  fBoostWeights.push_back(0.00951387);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50576,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496552,-99) , 
5, 2, 0, 0, 0.503497,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50228,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490242,-99) , 
0, -9.13855, 0, 0, 0.499547,-99) , 
8, 1.67026, 1, 0, 0.501903,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500737,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.486501,-99) , 
2, 0.195715, 1, 0, 0.495623,-99) , 
3, 34, 0, 0, 0.501347,-99)    );
  // itree = 667
  fBoostWeights.push_back(0.00462991);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 20, 0, 1, 0.507523,-99) , 
NN(
0, 
0, 
-1, 20.1807, 1, -1, 0.498949,-99) , 
1, 32.5177, 0, 0, 0.499915,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500096,-99) , 
NN(
0, 
0, 
-1, -3.9298, 1, -1, 0.489275,-99) , 
5, 7, 0, 0, 0.493827,-99) , 
6, 1, 0, 0, 0.499187,-99)    );
  // itree = 668
  fBoostWeights.push_back(0.00710125);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 14.1072, 0, 1, 0.507941,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501857,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490588,-99) , 
1, 29.9943, 1, 0, 0.501049,-99) , 
0, 15.165, 0, 0, 0.502057,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.486856,-99) , 
1, 69.5733, 1, 0, 0.501534,-99)    );
  // itree = 669
  fBoostWeights.push_back(0.0087606);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.511512,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499176,-99) , 
6, 2, 1, 0, 0.504037,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510676,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.485005,-99) , 
1, -8.70622, 0, 0, 0.493581,-99) , 
8, 1.72576, 1, 0, 0.500757,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.508764,-99) , 
NN(
0, 
0, 
-1, -0.111428, 0, -1, 0.497529,-99) , 
1, 73.1925, 0, 0, 0.497988,-99) , 
1, -4.30306, 1, 0, 0.498907,-99)    );
  // itree = 670
  fBoostWeights.push_back(0.0104267);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.514102,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498462,-99) , 
7, 7, 0, 0, 0.508075,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49505,-99) , 
7, 21, 1, 0, 0.504368,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504353,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492329,-99) , 
6, 1, 0, 0, 0.50248,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503233,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494772,-99) , 
1, 12.7433, 0, 0, 0.49743,-99) , 
7, 21, 0, 0, 0.498971,-99) , 
1, -13.7054, 1, 0, 0.499825,-99)    );
  // itree = 671
  fBoostWeights.push_back(0.00778849);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.51121,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496038,-99) , 
0, -11.0205, 0, 0, 0.507312,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502007,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491968,-99) , 
0, 16.6353, 1, 0, 0.500261,-99) , 
5, 8, 0, 0, 0.502803,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510341,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49815,-99) , 
0, -21.3029, 1, 0, 0.499193,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.485854,-99) , 
1, 60.3046, 1, 0, 0.498612,-99) , 
6, 3, 0, 0, 0.500131,-99)    );
  // itree = 672
  fBoostWeights.push_back(0.00410947);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, -36.8962, 1, 1, 0.501754,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492193,-99) , 
1, 60.3983, 1, 0, 0.50128,-99)    );
  // itree = 673
  fBoostWeights.push_back(0.00706595);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.513704,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498483,-99) , 
8, 1.56055, 1, 0, 0.506183,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501337,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488203,-99) , 
3, 33, 0, 0, 0.500464,-99) , 
0, -9.14944, 1, 0, 0.501926,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505089,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498402,-99) , 
7, 18, 0, 0, 0.501094,-99) , 
NN(
0, 
0, 
-1, -0.781429, 0, -1, 0.495674,-99) , 
5, 5, 0, 0, 0.498674,-99) , 
2, -0.00476195, 0, 0, 0.500368,-99)    );
  // itree = 674
  fBoostWeights.push_back(0.00729482);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512239,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.509327,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498556,-99) , 
7, 4, 1, 0, 0.500339,-99) , 
0, -15.2274, 1, 0, 0.501464,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503945,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498089,-99) , 
6, 2, 1, 0, 0.500248,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489194,-99) , 
0, -21.306, 0, 0, 0.498906,-99) , 
9, 0, 1, 0, 0.500165,-99)    );
  // itree = 675
  fBoostWeights.push_back(0.00944767);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 15.1712, 0, 1, 0.502752,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.48037,-99) , 
1, 60.3509, 1, 0, 0.501664,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510426,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497457,-99) , 
5, 9, 0, 0, 0.501403,-99) , 
NN(
0, 
0, 
-1, 21, 1, -1, 0.489307,-99) , 
0, 9.08426, 1, 0, 0.498639,-99) , 
8, 1.64392, 1, 0, 0.500366,-99)    );
  // itree = 676
  fBoostWeights.push_back(0.00862021);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 6, 0, 1, 0.512542,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504139,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491812,-99) , 
6, 2, 0, 0, 0.499419,-99) , 
8, 1.39366, 1, 0, 0.503106,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506181,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497531,-99) , 
1, 32.6058, 0, 0, 0.498492,-99) , 
NN(
0, 
0, 
-1, 1.61672, 1, -1, 0.492134,-99) , 
6, 1, 0, 0, 0.497804,-99) , 
7, 5, 1, 0, 0.498928,-99)    );
  // itree = 677
  fBoostWeights.push_back(0.00815678);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510809,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502546,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491901,-99) , 
1, 22.0762, 1, 0, 0.501294,-99) , 
0, 27.325, 0, 0, 0.501838,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.483452,-99) , 
1, 69.6359, 1, 0, 0.501205,-99)    );
  // itree = 678
  fBoostWeights.push_back(0.00416952);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50352,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499841,-99) , 
3, 44, 1, 0, 0.501205,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489956,-99) , 
7, 1, 0, 0, 0.500704,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492281,-99) , 
1, 60.4411, 1, 0, 0.500285,-99)    );
  // itree = 679
  fBoostWeights.push_back(0.00912094);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, -3.8163, 0, 1, 0.512661,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502892,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491226,-99) , 
2, -1.48667, 0, 0, 0.501951,-99) , 
2, -0.106667, 0, 0, 0.504004,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.513076,-99) , 
NN(
0, 
0, 
-1, 32.8266, 1, -1, 0.496996,-99) , 
0, 21.2451, 0, 0, 0.498405,-99) , 
2, 0.105238, 1, 0, 0.501393,-99)    );
  // itree = 680
  fBoostWeights.push_back(0.00758335);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.522973,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497522,-99) , 
7, 11, 1, 0, 0.507281,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501846,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494225,-99) , 
1, 15.4863, 1, 0, 0.50067,-99) , 
1, 41.9035, 0, 0, 0.501252,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.509093,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496547,-99) , 
8, 1.49487, 1, 0, 0.501299,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.487743,-99) , 
2, 0.0114286, 0, 0, 0.495271,-99) , 
6, 1, 0, 0, 0.500539,-99)    );
  // itree = 681
  fBoostWeights.push_back(0.0122297);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504907,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492664,-99) , 
0, -9.15029, 0, 0, 0.502093,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.484309,-99) , 
1, -22.7553, 0, 0, 0.500911,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.517676,-99) , 
NN(
0, 
0, 
-1, 1.15577, 0, -1, 0.495212,-99) , 
1, -22.7824, 1, 0, 0.497461,-99) , 
8, 1.54318, 0, 0, 0.499349,-99)    );
  // itree = 682
  fBoostWeights.push_back(0.00446595);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, -9.14791, 1, 1, 0.501551,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489146,-99) , 
1, 69.6359, 1, 0, 0.50113,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489925,-99) , 
7, 1, 0, 0, 0.50063,-99)    );
  // itree = 683
  fBoostWeights.push_back(0.00557939);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.509074,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499525,-99) , 
0, -21.3053, 1, 0, 0.500372,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.485725,-99) , 
1, 69.5453, 1, 0, 0.499874,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506404,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495561,-99) , 
5, 4, 1, 0, 0.499454,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488027,-99) , 
0, 9.10811, 1, 0, 0.496651,-99) , 
7, 25, 1, 0, 0.499179,-99)    );
  // itree = 684
  fBoostWeights.push_back(0.00537501);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 23.689, 0, 1, 0.50414,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.51243,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49877,-99) , 
1, 60.383, 0, 0, 0.499435,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493864,-99) , 
0, -21.3079, 0, 0, 0.49895,-99) , 
2, 0.567143, 0, 0, 0.50034,-99)    );
  // itree = 685
  fBoostWeights.push_back(0.00752127);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.521094,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499683,-99) , 
8, 1.38508, 1, 0, 0.506692,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502136,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494303,-99) , 
0, -18.4385, 0, 0, 0.500558,-99) , 
0, 9.51311, 0, 0, 0.501979,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505877,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498965,-99) , 
9, 0, 1, 0, 0.501104,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500253,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488143,-99) , 
0, 2.16232, 1, 0, 0.49514,-99) , 
7, 12, 0, 0, 0.498612,-99) , 
5, 4, 0, 0, 0.500712,-99)    );
  // itree = 686
  fBoostWeights.push_back(0.00774337);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507926,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492552,-99) , 
5, 10, 1, 0, 0.504269,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512501,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.511569,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498374,-99) , 
0, 32.5344, 0, 0, 0.49908,-99) , 
1, 69.6624, 0, 0, 0.499532,-99) , 
0, -9.14954, 1, 0, 0.500751,-99)    );
  // itree = 687
  fBoostWeights.push_back(0.00530832);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, -4.27346, 1, 1, 0.506747,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501499,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491206,-99) , 
2, 1.47714, 1, 0, 0.500954,-99) , 
6, 4, 0, 0, 0.501615,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492794,-99) , 
7, 1, 0, 0, 0.50122,-99)    );
  // itree = 688
  fBoostWeights.push_back(0.00360922);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506542,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507359,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49996,-99) , 
8, 1.26161, 1, 0, 0.50073,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.478802,-99) , 
8, 1.13414, 0, 0, 0.499856,-99) , 
3, 25, 1, 0, 0.500115,-99)    );
  // itree = 689
  fBoostWeights.push_back(0.00279259);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.508801,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507979,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500005,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495491,-99) , 
8, 1.85465, 1, 0, 0.499207,-99) , 
7, 29, 0, 0, 0.499567,-99) , 
3, 25, 1, 0, 0.499927,-99)    );
  // itree = 690
  fBoostWeights.push_back(0.00453844);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.520843,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499693,-99) , 
1, 6.08894, 0, 0, 0.509299,-99) , 
NN(
0, 
0, 
-1, -17.5241, 0, -1, 0.498673,-99) , 
0, -21.3054, 1, 0, 0.499593,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491418,-99) , 
1, 69.5453, 1, 0, 0.499315,-99)    );
  // itree = 691
  fBoostWeights.push_back(0.00561367);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, -5.27564, 1, 1, 0.505275,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504306,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498369,-99) , 
0, 9.95434, 0, 0, 0.499538,-99) , 
5, 1, 1, 0, 0.500287,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493129,-99) , 
0, 27.3226, 1, 0, 0.499884,-99)    );
  // itree = 692
  fBoostWeights.push_back(0.0123562);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507416,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496363,-99) , 
7, 25, 1, 0, 0.503549,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.5061,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.482774,-99) , 
7, 21, 0, 0, 0.494648,-99) , 
8, 1.38508, 0, 0, 0.501166,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503343,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497343,-99) , 
8, 1.46724, 1, 0, 0.499554,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.47994,-99) , 
2, 1.41571, 1, 0, 0.498283,-99) , 
7, 11, 0, 0, 0.500041,-99)    );
  // itree = 693
  fBoostWeights.push_back(0.00533762);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503023,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499138,-99) , 
1, 6.23919, 1, 0, 0.501452,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493225,-99) , 
1, -25.4721, 0, 0, 0.500867,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49191,-99) , 
1, 69.6624, 1, 0, 0.500562,-99)    );
  // itree = 694
  fBoostWeights.push_back(0.00878073);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.520984,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.517034,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489978,-99) , 
8, 1.50984, 1, 0, 0.50363,-99) , 
1, 72.7455, 0, 0, 0.506935,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501845,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493381,-99) , 
1, -28.1146, 0, 0, 0.501305,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488419,-99) , 
0, 27.3241, 1, 0, 0.500681,-99) , 
1, 23.4166, 0, 0, 0.501582,-99)    );
  // itree = 695
  fBoostWeights.push_back(0.0073273);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.511259,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.511747,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491501,-99) , 
8, 1.52276, 0, 0, 0.502235,-99) , 
1, 37.5613, 1, 0, 0.505686,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500818,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491216,-99) , 
1, -16.5665, 0, 0, 0.499461,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.486755,-99) , 
0, 27.3161, 1, 0, 0.498848,-99) , 
1, 23.4793, 0, 0, 0.499837,-99)    );
  // itree = 696
  fBoostWeights.push_back(0.00480409);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, -4.32385, 1, 1, 0.508663,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49817,-99) , 
5, 8, 1, 0, 0.504821,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.508773,-99) , 
NN(
0, 
0, 
-1, 27.3239, 1, -1, 0.498625,-99) , 
1, -34.0063, 1, 0, 0.499149,-99) , 
1, 23.2776, 0, 0, 0.499979,-99)    );
  // itree = 697
  fBoostWeights.push_back(0.00728912);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.513265,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.513399,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495428,-99) , 
7, 20, 0, 0, 0.501672,-99) , 
1, 33.8397, 1, 0, 0.505338,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501802,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497705,-99) , 
6, 3, 0, 0, 0.49916,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.486748,-99) , 
0, 27.3242, 1, 0, 0.49856,-99) , 
1, 23.2651, 0, 0, 0.49955,-99)    );
  // itree = 698
  fBoostWeights.push_back(0.00600316);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507538,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505919,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499372,-99) , 
1, 17.0909, 0, 0, 0.500806,-99) , 
1, -23.0017, 1, 0, 0.501355,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506191,-99) , 
NN(
0, 
0, 
-1, 9.09329, 1, -1, 0.493217,-99) , 
8, 1.3878, 1, 0, 0.49683,-99) , 
7, 26, 1, 0, 0.500582,-99)    );
  // itree = 699
  fBoostWeights.push_back(0.00855728);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.513854,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499894,-99) , 
0, -4.09835, 0, 0, 0.50828,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507593,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49799,-99) , 
0, -9.77909, 1, 0, 0.500346,-99) , 
5, 10, 0, 0, 0.502075,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505947,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507628,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496465,-99) , 
6, 4, 0, 0, 0.497701,-99) , 
1, -33.8148, 1, 0, 0.498335,-99) , 
1, 4.93609, 0, 0, 0.499932,-99)    );
  // itree = 700
  fBoostWeights.push_back(0.00908763);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510208,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503881,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495198,-99) , 
8, 1.23162, 0, 0, 0.503021,-99) , 
1, -22.8025, 1, 0, 0.50361,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510655,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500749,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.486388,-99) , 
7, 20, 1, 0, 0.497337,-99) , 
7, 27, 0, 0, 0.499194,-99) , 
3, 42, 0, 0, 0.502652,-99)    );
  // itree = 701
  fBoostWeights.push_back(0.00429188);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 23, 0, 1, 0.510107,-99) , 
NN(
NN(
0, 
0, 
-1, 1.56667, 0, 1, 0.501446,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491735,-99) , 
3, 34, 0, 0, 0.501137,-99) , 
3, 29, 1, 0, 0.50165,-99)    );
  // itree = 702
  fBoostWeights.push_back(0.00424112);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.52193,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49923,-99) , 
1, 14.2059, 0, 0, 0.5058,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500246,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488057,-99) , 
1, -25.4719, 0, 0, 0.499462,-99) , 
0, -15.2244, 1, 0, 0.500379,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490259,-99) , 
1, 69.6624, 1, 0, 0.500034,-99)    );
  // itree = 703
  fBoostWeights.push_back(0.00659296);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50737,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501591,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494317,-99) , 
1, -13.3682, 0, 0, 0.500499,-99) , 
0, -15.2232, 1, 0, 0.501452,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504956,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497259,-99) , 
0, -15.2228, 1, 0, 0.498392,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.486171,-99) , 
1, 60.4204, 1, 0, 0.49779,-99) , 
7, 13, 1, 0, 0.499423,-99)    );
  // itree = 704
  fBoostWeights.push_back(0.00643286);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510709,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505592,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498605,-99) , 
1, 17.1696, 0, 0, 0.500118,-99) , 
1, -22.9506, 1, 0, 0.500966,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50113,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488357,-99) , 
1, -16.354, 0, 0, 0.499274,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.487512,-99) , 
1, 32.7876, 1, 0, 0.498036,-99) , 
2, -0.328095, 0, 0, 0.499985,-99)    );
  // itree = 705
  fBoostWeights.push_back(0.00587552);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.509191,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502761,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497858,-99) , 
0, -11.7548, 1, 0, 0.498913,-99) , 
0, 27.3239, 0, 0, 0.499494,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489293,-99) , 
1, 69.6344, 1, 0, 0.499149,-99)    );
  // itree = 706
  fBoostWeights.push_back(0.00759742);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.509211,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.5042,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49853,-99) , 
7, 21, 0, 0, 0.500215,-99) , 
1, -22.7274, 1, 0, 0.500991,-99) , 
NN(
NN(
0, 
0, 
-1, 35, 1, 1, 0.503325,-99) , 
NN(
0, 
0, 
-1, 27, 1, -1, 0.493848,-99) , 
3, 43, 1, 0, 0.496367,-99) , 
6, 3, 1, 0, 0.499306,-99)    );
  // itree = 707
  fBoostWeights.push_back(0.00651369);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.511372,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502658,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497417,-99) , 
8, 1.76978, 1, 0, 0.501185,-99) , 
0, 27.327, 0, 0, 0.501765,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493265,-99) , 
1, 69.6678, 1, 0, 0.501477,-99)    );
  // itree = 708
  fBoostWeights.push_back(0.00501571);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 39, 1, 1, 0.501062,-99) , 
NN(
0, 
0, 
-1, 16, 0, -1, 0.49341,-99) , 
3, 32, 0, 0, 0.500552,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507953,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495486,-99) , 
3, 44, 0, 0, 0.502293,-99) , 
NN(
0, 
0, 
-1, -0.902857, 0, -1, 0.491879,-99) , 
2, -1.0419, 1, 0, 0.497431,-99) , 
2, -0.717143, 0, 0, 0.499969,-99)    );
  // itree = 709
  fBoostWeights.push_back(0.00530846);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 21, 0, 1, 0.503169,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49447,-99) , 
7, 28, 1, 0, 0.50242,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500341,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489596,-99) , 
1, 32.9504, 1, 0, 0.499338,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491221,-99) , 
0, -30.1076, 0, 0, 0.498652,-99) , 
5, 6, 1, 0, 0.500565,-99)    );
  // itree = 710
  fBoostWeights.push_back(0.00441897);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510243,-99) , 
NN(
0, 
0, 
-1, 0.890952, 1, -1, 0.498915,-99) , 
3, 25, 1, 0, 0.499362,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504973,-99) , 
NN(
0, 
0, 
-1, 18, 1, -1, 0.489062,-99) , 
3, 45, 0, 0, 0.495352,-99) , 
2, 1.13857, 1, 0, 0.498932,-99)    );
  // itree = 711
  fBoostWeights.push_back(0.00386613);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.511013,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50048,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488686,-99) , 
1, 37.928, 1, 0, 0.499855,-99) , 
0, -27.3832, 1, 0, 0.500468,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488638,-99) , 
1, 69.6344, 1, 0, 0.500064,-99)    );
  // itree = 712
  fBoostWeights.push_back(0.0055928);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 1.30857, 0, 1, 0.501279,-99) , 
NN(
0, 
0, 
-1, 44, 0, -1, 0.495377,-99) , 
2, -0.74, 0, 0, 0.50028,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.509101,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493862,-99) , 
7, 17, 0, 0, 0.498216,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.487917,-99) , 
7, 25, 1, 0, 0.495956,-99) , 
3, 39, 0, 0, 0.499623,-99)    );
  // itree = 713
  fBoostWeights.push_back(0.00693523);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50889,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500716,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490473,-99) , 
1, -11.4875, 0, 0, 0.499446,-99) , 
1, -22.9506, 1, 0, 0.500248,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501657,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494249,-99) , 
8, 1.7267, 0, 0, 0.496675,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488919,-99) , 
7, 3, 0, 0, 0.495627,-99) , 
6, 3, 1, 0, 0.498563,-99)    );
  // itree = 714
  fBoostWeights.push_back(0.00429849);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0.79, 0, 1, 0.506838,-99) , 
NN(
0, 
0, 
-1, 4, 1, -1, 0.499237,-99) , 
2, 0.626667, 0, 0, 0.499962,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500664,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493382,-99) , 
0, 3.00526, 0, 0, 0.496383,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.483436,-99) , 
1, -13.6187, 0, 0, 0.494329,-99) , 
2, 0.871905, 1, 0, 0.499013,-99)    );
  // itree = 715
  fBoostWeights.push_back(0.0102854);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 1.30931, 1, 1, 0.507676,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.486973,-99) , 
8, 1.71953, 1, 0, 0.501942,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.509818,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496956,-99) , 
1, 44.5525, 0, 0, 0.498222,-99) , 
NN(
0, 
0, 
-1, 3.02698, 0, -1, 0.490623,-99) , 
6, 1, 0, 0, 0.497338,-99) , 
1, -13.4928, 1, 0, 0.498081,-99)    );
  // itree = 716
  fBoostWeights.push_back(0.00571338);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510855,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506943,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489084,-99) , 
1, 62.1497, 1, 0, 0.501376,-99) , 
7, 20, 0, 0, 0.504637,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500804,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489397,-99) , 
1, -28.1254, 0, 0, 0.500077,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490741,-99) , 
0, -27.3862, 0, 0, 0.499641,-99) , 
1, 23.3974, 0, 0, 0.500367,-99)    );
  // itree = 717
  fBoostWeights.push_back(0.0064084);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.508765,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497534,-99) , 
0, -3.06547, 0, 0, 0.503881,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507711,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497904,-99) , 
3, 33, 1, 0, 0.498675,-99) , 
NN(
0, 
0, 
-1, -4.37976, 0, -1, 0.493297,-99) , 
2, 1.18286, 1, 0, 0.498152,-99) , 
7, 28, 0, 0, 0.498638,-99)    );
  // itree = 718
  fBoostWeights.push_back(0.00732381);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 21, 0, 1, 0.506758,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502093,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493306,-99) , 
7, 21, 1, 0, 0.499459,-99) , 
1, 9.33963, 1, 0, 0.50121,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506798,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500406,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495969,-99) , 
7, 22, 0, 0, 0.497167,-99) , 
7, 1, 1, 0, 0.497587,-99) , 
1, 4.93609, 0, 0, 0.499134,-99)    );
  // itree = 719
  fBoostWeights.push_back(0.00956649);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506626,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498436,-99) , 
6, 2, 0, 0, 0.503756,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500171,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491796,-99) , 
2, -0.89, 0, 0, 0.49661,-99) , 
5, 3, 0, 0, 0.501534,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50756,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50413,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495137,-99) , 
1, 17.1983, 0, 0, 0.497074,-99) , 
1, -22.8632, 1, 0, 0.497913,-99) , 
2, -0.368571, 1, 0, 0.499062,-99)    );
  // itree = 720
  fBoostWeights.push_back(0.0108523);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507748,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49259,-99) , 
1, -13.5216, 0, 0, 0.505566,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490662,-99) , 
0, -15.2158, 0, 0, 0.503539,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50782,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497124,-99) , 
2, 0.875714, 1, 0, 0.503574,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501129,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49599,-99) , 
0, 9.08747, 0, 0, 0.497337,-99) , 
2, 0.195715, 0, 0, 0.499964,-99) , 
7, 21, 0, 0, 0.50104,-99)    );
  // itree = 721
  fBoostWeights.push_back(0.00450605);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.517546,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49798,-99) , 
2, 0.201429, 0, 0, 0.506019,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500898,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.48883,-99) , 
1, 37.8788, 1, 0, 0.500273,-99) , 
0, -21.3071, 1, 0, 0.500771,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491485,-99) , 
1, 69.5733, 1, 0, 0.500456,-99)    );
  // itree = 722
  fBoostWeights.push_back(0.00474456);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504146,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499151,-99) , 
2, 0.337143, 0, 0, 0.500528,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.4928,-99) , 
2, 1.07333, 1, 0, 0.500133,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500459,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.48345,-99) , 
3, 44, 0, 0, 0.493885,-99) , 
2, 1.33714, 1, 0, 0.49968,-99)    );
  // itree = 723
  fBoostWeights.push_back(0.00893608);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503635,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495497,-99) , 
0, 9.09681, 1, 0, 0.501714,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.513212,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495793,-99) , 
1, -22.8164, 1, 0, 0.497574,-99) , 
8, 1.48713, 0, 0, 0.500117,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491064,-99) , 
3, 23, 0, 0, 0.499859,-99)    );
  // itree = 724
  fBoostWeights.push_back(0.00915297);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, -9.15024, 1, 1, 0.504085,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494058,-99) , 
1, 51.0938, 1, 0, 0.503447,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510117,-99) , 
NN(
0, 
0, 
-1, 8.8717, 1, -1, 0.49516,-99) , 
1, 41.8153, 0, 0, 0.49638,-99) , 
7, 20, 1, 0, 0.500974,-99)    );
  // itree = 725
  fBoostWeights.push_back(0.00680039);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 40, 1, 1, 0.507752,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503648,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.4894,-99) , 
7, 16, 0, 0, 0.499516,-99) , 
7, 10, 1, 0, 0.502305,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510314,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499298,-99) , 
5, 5, 0, 0, 0.505539,-99) , 
NN(
0, 
0, 
-1, 3, 0, -1, 0.498041,-99) , 
7, 2, 1, 0, 0.498698,-99) , 
3, 43, 1, 0, 0.499656,-99)    );
  // itree = 726
  fBoostWeights.push_back(0.00600116);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 40.9865, 1, 1, 0.507064,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502707,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490076,-99) , 
2, 0.15619, 1, 0, 0.497121,-99) , 
6, 3, 1, 0, 0.502986,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503539,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498922,-99) , 
8, 1.73962, 0, 0, 0.500431,-99) , 
NN(
0, 
0, 
-1, 19.2949, 1, -1, 0.496383,-99) , 
1, 6.2172, 1, 0, 0.499242,-99) , 
1, 23.3817, 0, 0, 0.499785,-99)    );
  // itree = 727
  fBoostWeights.push_back(0.0043691);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 27.3261, 0, 1, 0.500843,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488897,-99) , 
1, 69.6624, 1, 0, 0.50044,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.508111,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493224,-99) , 
0, -4.12768, 1, 0, 0.498769,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.485349,-99) , 
5, 10, 1, 0, 0.495748,-99) , 
7, 3, 0, 0, 0.499836,-99)    );
  // itree = 728
  fBoostWeights.push_back(0.00275914);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510612,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.508669,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499442,-99) , 
3, 30, 1, 0, 0.499778,-99) , 
2, 1.75333, 0, 0, 0.500091,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490193,-99) , 
3, 23, 0, 0, 0.499813,-99)    );
  // itree = 729
  fBoostWeights.push_back(0.00772678);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.515418,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501858,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494315,-99) , 
7, 5, 0, 0, 0.500549,-99) , 
7, 1, 1, 0, 0.501241,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.508998,-99) , 
NN(
0, 
0, 
-1, 2, 1, -1, 0.493858,-99) , 
7, 27, 0, 0, 0.495968,-99) , 
3, 42, 0, 0, 0.500097,-99)    );
  // itree = 730
  fBoostWeights.push_back(0.00614867);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502517,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497425,-99) , 
1, 11.5894, 1, 0, 0.50101,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493149,-99) , 
0, 27.3251, 1, 0, 0.500601,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501377,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489522,-99) , 
2, 0.183333, 0, 0, 0.494568,-99) , 
1, -22.7387, 0, 0, 0.500105,-99)    );
  // itree = 731
  fBoostWeights.push_back(0.00815688);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.519683,-99) , 
NN(
0, 
0, 
-1, -7.69959, 0, -1, 0.498332,-99) , 
0, -15.2257, 1, 0, 0.500331,-99) , 
NN(
NN(
0, 
0, 
-1, -5.15523, 0, 1, 0.505809,-99) , 
NN(
0, 
0, 
-1, -17.9387, 0, -1, 0.495428,-99) , 
5, 9, 0, 0, 0.497154,-99) , 
9, 0, 1, 0, 0.498716,-99)    );
  // itree = 732
  fBoostWeights.push_back(0.00438258);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 0, 1, 0.505005,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50069,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489934,-99) , 
0, -27.3823, 0, 0, 0.500187,-99) , 
1, 23.3419, 0, 0, 0.500888,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501598,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488587,-99) , 
0, -3.12312, 1, 0, 0.493985,-99) , 
3, 34, 0, 0, 0.500278,-99)    );
  // itree = 733
  fBoostWeights.push_back(0.00983023);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 18.6398, 0, 1, 0.504514,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510931,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.479922,-99) , 
8, 1.46615, 1, 0, 0.494739,-99) , 
0, -15.2284, 0, 0, 0.502601,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.511554,-99) , 
NN(
0, 
0, 
-1, 1, 0, -1, 0.497796,-99) , 
0, -15.2221, 1, 0, 0.499086,-99) , 
9, 0, 0, 0, 0.500866,-99)    );
  // itree = 734
  fBoostWeights.push_back(0.00913879);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 3, 1, 1, 0.505493,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501937,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491661,-99) , 
0, -1.08332, 0, 0, 0.500202,-99) , 
0, -4.32745, 1, 0, 0.502236,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503848,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494868,-99) , 
2, 0.326191, 1, 0, 0.500513,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.48486,-99) , 
0, -24.2344, 0, 0, 0.498628,-99) , 
5, 8, 1, 0, 0.500932,-99)    );
  // itree = 735
  fBoostWeights.push_back(0.00996454);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 4, 1, 1, 0.503215,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501379,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488938,-99) , 
8, 1.41973, 0, 0, 0.497785,-99) , 
5, 4, 0, 0, 0.501186,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.517208,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495754,-99) , 
9, 0, 1, 0, 0.5004,-99) , 
NN(
0, 
0, 
-1, 0, 0, -1, 0.493228,-99) , 
5, 7, 1, 0, 0.497403,-99) , 
0, -3.07063, 0, 0, 0.499601,-99)    );
  // itree = 736
  fBoostWeights.push_back(0.00806031);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0.0514287, 0, 1, 0.509737,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494074,-99) , 
8, 1.59378, 1, 0, 0.503215,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503188,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490809,-99) , 
6, 4, 1, 0, 0.501189,-99) , 
NN(
0, 
0, 
-1, 1.3846, 0, -1, 0.497246,-99) , 
7, 10, 1, 0, 0.498622,-99) , 
1, -13.5801, 1, 0, 0.499358,-99)    );
  // itree = 737
  fBoostWeights.push_back(0.00775048);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510924,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499566,-99) , 
7, 20, 0, 0, 0.503614,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500386,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492194,-99) , 
7, 21, 1, 0, 0.497866,-99) , 
9, 0, 1, 0, 0.500739,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.508464,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496066,-99) , 
9, 0, 1, 0, 0.502163,-99) , 
NN(
0, 
0, 
-1, 6, 0, -1, 0.496239,-99) , 
7, 4, 1, 0, 0.497258,-99) , 
3, 45, 0, 0, 0.498639,-99)    );
  // itree = 738
  fBoostWeights.push_back(0.0109847);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.508132,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494318,-99) , 
0, -11.7457, 0, 0, 0.504562,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507489,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.482255,-99) , 
8, 1.54034, 1, 0, 0.495233,-99) , 
0, 9.09106, 1, 0, 0.502232,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.513477,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498557,-99) , 
1, -21.4751, 0, 0, 0.505196,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502472,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496067,-99) , 
2, -0.514286, 1, 0, 0.497713,-99) , 
1, -13.5563, 1, 0, 0.498942,-99) , 
7, 21, 0, 0, 0.499934,-99)    );
  // itree = 739
  fBoostWeights.push_back(0.00345573);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.508352,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.518995,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.5118,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499888,-99) , 
0, 29.0618, 0, 0, 0.500526,-99) , 
1, 69.6833, 0, 0, 0.501136,-99) , 
0, -27.3841, 1, 0, 0.501534,-99)    );
  // itree = 740
  fBoostWeights.push_back(0.00496483);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.508944,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50556,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498918,-99) , 
8, 1.26161, 1, 0, 0.499609,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.48154,-99) , 
8, 1.13414, 0, 0, 0.498888,-99) , 
3, 25, 1, 0, 0.499276,-99)    );
  // itree = 741
  fBoostWeights.push_back(0.00930804);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507049,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495555,-99) , 
8, 1.23482, 0, 0, 0.505718,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502817,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496143,-99) , 
0, -3.07059, 1, 0, 0.499865,-99) , 
9, 0, 1, 0, 0.502723,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507316,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498539,-99) , 
7, 29, 0, 0, 0.49998,-99) , 
NN(
0, 
0, 
-1, 27, 1, -1, 0.491188,-99) , 
2, 0.77, 1, 0, 0.498161,-99) , 
7, 22, 1, 0, 0.501541,-99)    );
  // itree = 742
  fBoostWeights.push_back(0.00508681);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 1.53883, 0, 1, 0.50883,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497262,-99) , 
5, 3, 0, 0, 0.505275,-99) , 
NN(
NN(
0, 
0, 
-1, 1.39215, 1, 1, 0.50299,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505887,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498961,-99) , 
0, 21.2493, 0, 0, 0.499585,-99) , 
7, 20, 0, 0, 0.500766,-99) , 
3, 36, 1, 0, 0.501259,-99)    );
  // itree = 743
  fBoostWeights.push_back(0.00565513);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.509942,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499054,-99) , 
0, -8.246, 0, 0, 0.506025,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504853,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488766,-99) , 
8, 1.54752, 1, 0, 0.497136,-99) , 
0, 9.11292, 1, 0, 0.503829,-99) , 
NN(
NN(
0, 
0, 
-1, -21.3035, 1, 1, 0.50086,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.483884,-99) , 
1, 69.5194, 1, 0, 0.500283,-99) , 
7, 22, 0, 0, 0.501196,-99)    );
  // itree = 744
  fBoostWeights.push_back(0.003745);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506266,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.51208,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500605,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.487027,-99) , 
1, 38.0761, 1, 0, 0.499894,-99) , 
1, 69.6494, 0, 0, 0.500302,-99) , 
0, -27.3861, 1, 0, 0.500631,-99)    );
  // itree = 745
  fBoostWeights.push_back(0.00876497);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506943,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.478821,-99) , 
1, 66.516, 1, 0, 0.504473,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.511504,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495045,-99) , 
1, 31.3604, 0, 0, 0.498859,-99) , 
8, 1.754, 1, 0, 0.502896,-99) , 
NN(
0, 
0, 
-1, 21.2448, 1, -1, 0.498093,-99) , 
1, 4.97611, 0, 0, 0.500142,-99)    );
  // itree = 746
  fBoostWeights.push_back(0.012606);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, -13.7742, 1, 1, 0.505928,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502169,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495348,-99) , 
0, -0.304854, 0, 0, 0.500176,-99) , 
0, -7.05251, 1, 0, 0.501928,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506051,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.482614,-99) , 
8, 1.32312, 0, 0, 0.501425,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512992,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.468434,-99) , 
8, 1.42671, 1, 0, 0.487594,-99) , 
0, 7.42609, 1, 0, 0.497815,-99) , 
5, 9, 1, 0, 0.500721,-99)    );
  // itree = 747
  fBoostWeights.push_back(0.0074139);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510882,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496263,-99) , 
5, 7, 0, 0, 0.502336,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50177,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49358,-99) , 
3, 43, 0, 0, 0.499631,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505678,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496359,-99) , 
3, 33, 1, 0, 0.497099,-99) , 
7, 12, 1, 0, 0.498254,-99) , 
7, 28, 0, 0, 0.4986,-99)    );
  // itree = 748
  fBoostWeights.push_back(0.00604825);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504728,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499698,-99) , 
0, 9.08743, 0, 0, 0.50101,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50055,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490827,-99) , 
5, 8, 1, 0, 0.497029,-99) , 
7, 26, 1, 0, 0.500231,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.511421,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491932,-99) , 
5, 6, 1, 0, 0.50171,-99) , 
NN(
0, 
0, 
-1, 1.58226, 1, -1, 0.487988,-99) , 
0, 3.00837, 1, 0, 0.495832,-99) , 
7, 3, 0, 0, 0.499666,-99)    );
  // itree = 749
  fBoostWeights.push_back(0.00326186);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 3, 1, 1, 0.501069,-99) , 
NN(
0, 
0, 
-1, 3, 0, -1, 0.498164,-99) , 
5, 8, 1, 0, 0.50002,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492209,-99) , 
7, 1, 0, 0, 0.499675,-99)    );
  // itree = 750
  fBoostWeights.push_back(0.00920756);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501327,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493388,-99) , 
0, -16.0929, 0, 0, 0.500331,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.485811,-99) , 
0, 27.3259, 1, 0, 0.499652,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.511445,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504759,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.481516,-99) , 
8, 1.56278, 1, 0, 0.494152,-99) , 
1, 73.5243, 0, 0, 0.496067,-99) , 
1, 14.0326, 1, 0, 0.498791,-99)    );
  // itree = 751
  fBoostWeights.push_back(0.00780353);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 10, 0, 1, 0.504971,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501716,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494108,-99) , 
0, 8.79586, 0, 0, 0.498937,-99) , 
0, 3.00726, 1, 0, 0.50246,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504574,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497222,-99) , 
3, 37, 1, 0, 0.498107,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.486493,-99) , 
7, 15, 1, 0, 0.497437,-99) , 
7, 16, 0, 0, 0.499761,-99)    );
  // itree = 752
  fBoostWeights.push_back(0.00363206);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.511828,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500403,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495714,-99) , 
6, 1, 0, 0, 0.499847,-99) , 
2, 1.54857, 0, 0, 0.500387,-99) , 
NN(
0, 
0, 
-1, 6, 1, -1, 0.490736,-99) , 
3, 29, 0, 0, 0.499827,-99)    );
  // itree = 753
  fBoostWeights.push_back(0.00795976);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 2.9958, 0, 1, 0.505754,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502443,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490485,-99) , 
3, 44, 0, 0, 0.498352,-99) , 
9, 0, 0, 0, 0.502046,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507145,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496128,-99) , 
7, 11, 0, 0, 0.501852,-99) , 
NN(
0, 
0, 
-1, 17, 1, -1, 0.496887,-99) , 
1, -13.4965, 1, 0, 0.497708,-99) , 
7, 22, 0, 0, 0.498824,-99)    );
  // itree = 754
  fBoostWeights.push_back(0.00731715);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504731,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498615,-99) , 
7, 11, 0, 0, 0.501067,-99) , 
NN(
0, 
0, 
-1, 6, 0, -1, 0.49105,-99) , 
1, 41.8748, 1, 0, 0.500269,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506255,-99) , 
NN(
0, 
0, 
-1, -13.4753, 0, -1, 0.49585,-99) , 
8, 1.27151, 1, 0, 0.497453,-99) , 
7, 20, 1, 0, 0.499288,-99)    );
  // itree = 755
  fBoostWeights.push_back(0.00791729);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 12, 1, 1, 0.506257,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501708,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496898,-99) , 
3, 44, 0, 0, 0.499939,-99) , 
1, 32.5311, 0, 0, 0.50059,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50657,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500809,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.473304,-99) , 
0, -7.48397, 0, 0, 0.494207,-99) , 
8, 1.2806, 1, 0, 0.496431,-99) , 
5, 3, 0, 0, 0.499312,-99)    );
  // itree = 756
  fBoostWeights.push_back(0.0105959);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.519635,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494922,-99) , 
0, 1.58843, 1, 0, 0.503193,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493209,-99) , 
0, -12.0703, 0, 0, 0.500863,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.513438,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496134,-99) , 
9, 0, 1, 0, 0.500956,-99) , 
NN(
0, 
0, 
-1, 1.38554, 0, -1, 0.496535,-99) , 
0, -9.7722, 1, 0, 0.497582,-99) , 
5, 10, 0, 0, 0.498305,-99)    );
  // itree = 757
  fBoostWeights.push_back(0.00778963);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510409,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503393,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495578,-99) , 
1, -11.4876, 0, 0, 0.502455,-99) , 
1, -22.9506, 1, 0, 0.503092,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505541,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498212,-99) , 
8, 1.75096, 0, 0, 0.500399,-99) , 
NN(
0, 
0, 
-1, 1.47813, 1, -1, 0.494299,-99) , 
1, 14.2968, 1, 0, 0.49894,-99) , 
2, -0.287619, 0, 0, 0.50163,-99)    );
  // itree = 758
  fBoostWeights.push_back(0.00817789);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.515188,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497927,-99) , 
7, 2, 0, 0, 0.50855,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503554,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492155,-99) , 
7, 11, 0, 0, 0.501151,-99) , 
7, 5, 1, 0, 0.502726,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503542,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498054,-99) , 
5, 5, 0, 0, 0.501121,-99) , 
NN(
0, 
0, 
-1, 19, 0, -1, 0.496405,-99) , 
7, 17, 1, 0, 0.499074,-99) , 
3, 44, 1, 0, 0.50042,-99)    );
  // itree = 759
  fBoostWeights.push_back(0.00755688);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505787,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49805,-99) , 
7, 11, 0, 0, 0.502666,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.483962,-99) , 
1, 32.7225, 1, 0, 0.501151,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512759,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500006,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492816,-99) , 
1, 8.83325, 1, 0, 0.497832,-99) , 
1, 51.0963, 0, 0, 0.498944,-99) , 
6, 2, 1, 0, 0.499749,-99)    );
  // itree = 760
  fBoostWeights.push_back(0.0060565);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.514049,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499505,-99) , 
0, -27.3841, 1, 0, 0.50033,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489132,-99) , 
1, 69.6359, 1, 0, 0.499954,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.508246,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492159,-99) , 
7, 28, 1, 0, 0.501749,-99) , 
NN(
0, 
0, 
-1, 28, 0, -1, 0.491548,-99) , 
8, 1.53681, 1, 0, 0.496127,-99) , 
7, 25, 1, 0, 0.49913,-99)    );
  // itree = 761
  fBoostWeights.push_back(0.00844885);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.508184,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494713,-99) , 
0, 11.711, 1, 0, 0.504743,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507021,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.485521,-99) , 
8, 1.44225, 1, 0, 0.494086,-99) , 
0, -9.12195, 0, 0, 0.502087,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50223,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498765,-99) , 
0, -9.14697, 1, 0, 0.499676,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49127,-99) , 
7, 11, 0, 0, 0.49908,-99) , 
7, 10, 1, 0, 0.500113,-99)    );
  // itree = 762
  fBoostWeights.push_back(0.00286403);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, -1.24857, 1, 1, 0.501218,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493932,-99) , 
7, 1, 0, 0, 0.500896,-99)    );
  // itree = 763
  fBoostWeights.push_back(0.00578697);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 39, 1, 1, 0.503933,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505104,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499077,-99) , 
0, 15.1694, 0, 0, 0.499975,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488187,-99) , 
1, 60.3291, 1, 0, 0.499391,-99) , 
7, 13, 1, 0, 0.501418,-99)    );
  // itree = 764
  fBoostWeights.push_back(0.00743363);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 1.54, 0, 1, 0.502327,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505065,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493095,-99) , 
9, 0, 1, 0, 0.499125,-99) , 
3, 42, 0, 0, 0.501642,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50586,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492726,-99) , 
0, -8.26481, 0, 0, 0.501139,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.487596,-99) , 
0, 9.09168, 1, 0, 0.497802,-99) , 
7, 27, 1, 0, 0.50115,-99)    );
  // itree = 765
  fBoostWeights.push_back(0.00553127);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 9, 1, 1, 0.509473,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50141,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.487528,-99) , 
1, 30.4668, 1, 0, 0.50061,-99) , 
0, -21.3054, 1, 0, 0.501374,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495737,-99) , 
1, 60.3509, 1, 0, 0.501094,-99)    );
  // itree = 766
  fBoostWeights.push_back(0.00886747);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507422,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49841,-99) , 
0, -8.27307, 0, 0, 0.50419,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503821,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.485178,-99) , 
8, 1.54034, 1, 0, 0.494749,-99) , 
0, 9.09234, 1, 0, 0.501827,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504868,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496152,-99) , 
5, 9, 1, 0, 0.502831,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501084,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495354,-99) , 
0, -8.27543, 1, 0, 0.497552,-99) , 
0, 9.09155, 0, 0, 0.498931,-99) , 
7, 21, 0, 0, 0.499803,-99)    );
  // itree = 767
  fBoostWeights.push_back(0.00857676);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512052,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49763,-99) , 
7, 11, 0, 0, 0.503766,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50113,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491493,-99) , 
9, 0, 1, 0, 0.496222,-99) , 
7, 20, 1, 0, 0.501148,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501506,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492584,-99) , 
0, -15.2283, 0, 0, 0.499719,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507202,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494953,-99) , 
0, -15.2274, 1, 0, 0.496087,-99) , 
9, 0, 0, 0, 0.497924,-99) , 
3, 40, 1, 0, 0.498469,-99)    );
  // itree = 768
  fBoostWeights.push_back(0.0055844);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.509537,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498769,-99) , 
0, 3.83732, 1, 0, 0.505629,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501685,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.487701,-99) , 
5, 7, 0, 0, 0.498477,-99) , 
5, 5, 1, 0, 0.501649,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510472,-99) , 
NN(
0, 
0, 
-1, 1.04333, 1, -1, 0.498224,-99) , 
2, 1.57333, 0, 0, 0.498725,-99) , 
3, 42, 1, 0, 0.499357,-99)    );
  // itree = 769
  fBoostWeights.push_back(0.0122386);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510469,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502704,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.487384,-99) , 
0, -7.7014, 0, 0, 0.501031,-99) , 
0, -15.2274, 1, 0, 0.501917,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510983,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488697,-99) , 
8, 1.56278, 0, 0, 0.501303,-99) , 
NN(
0, 
0, 
-1, -14.6115, 0, -1, 0.494582,-99) , 
5, 5, 0, 0, 0.497358,-99) , 
9, 0, 1, 0, 0.499603,-99)    );
  // itree = 770
  fBoostWeights.push_back(0.00437994);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.518631,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498837,-99) , 
7, 5, 1, 0, 0.502523,-99) , 
NN(
0, 
0, 
-1, 4, 0, -1, 0.498927,-99) , 
3, 43, 1, 0, 0.49989,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493087,-99) , 
7, 1, 0, 0, 0.499585,-99)    );
  // itree = 771
  fBoostWeights.push_back(0.00497223);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50328,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.4994,-99) , 
9, 0, 1, 0, 0.501301,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502486,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49287,-99) , 
9, 0, 0, 0, 0.497571,-99) , 
7, 27, 1, 0, 0.5008,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493682,-99) , 
7, 1, 0, 0, 0.500485,-99)    );
  // itree = 772
  fBoostWeights.push_back(0.0081916);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 60.3363, 0, 1, 0.502114,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512856,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49498,-99) , 
7, 22, 0, 0, 0.497694,-99) , 
8, 1.38574, 0, 0, 0.500919,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507756,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491646,-99) , 
5, 6, 1, 0, 0.499649,-99) , 
NN(
0, 
0, 
-1, 4, 0, -1, 0.488629,-99) , 
0, -3.05472, 1, 0, 0.493175,-99) , 
7, 27, 1, 0, 0.49992,-99)    );
  // itree = 773
  fBoostWeights.push_back(0.00918772);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506813,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497182,-99) , 
0, -10.2097, 0, 0, 0.504158,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500796,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.48724,-99) , 
7, 6, 0, 0, 0.497316,-99) , 
0, 6.56248, 1, 0, 0.5019,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.518289,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49776,-99) , 
9, 0, 0, 0, 0.502816,-99) , 
NN(
0, 
0, 
-1, 1.32227, 0, -1, 0.496287,-99) , 
0, 9.50969, 0, 0, 0.497799,-99) , 
5, 4, 1, 0, 0.499341,-99)    );
  // itree = 774
  fBoostWeights.push_back(0.00683759);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 4.06445, 0, 1, 0.508423,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492773,-99) , 
5, 2, 0, 0, 0.504723,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50133,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492278,-99) , 
1, -16.7783, 0, 0, 0.500069,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.48964,-99) , 
0, 27.3242, 1, 0, 0.499562,-99) , 
1, 23.3419, 0, 0, 0.500312,-99)    );
  // itree = 775
  fBoostWeights.push_back(0.0108103);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.514089,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.517003,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491054,-99) , 
1, -17.5447, 0, 0, 0.498337,-99) , 
8, 1.39636, 1, 0, 0.50376,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.513881,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498994,-99) , 
8, 1.73539, 0, 0, 0.503466,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502089,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495291,-99) , 
1, 12.7995, 0, 0, 0.497396,-99) , 
5, 10, 0, 0, 0.498728,-99) , 
1, -13.5867, 1, 0, 0.499533,-99)    );
  // itree = 776
  fBoostWeights.push_back(0.00580626);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.509971,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501479,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492493,-99) , 
1, 22.019, 1, 0, 0.500422,-99) , 
0, 27.3241, 0, 0, 0.50097,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489485,-99) , 
1, 69.6344, 1, 0, 0.500578,-99)    );
  // itree = 777
  fBoostWeights.push_back(0.00989613);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 4, 1, 1, 0.505389,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.51132,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490011,-99) , 
8, 1.42401, 1, 0, 0.498843,-99) , 
5, 2, 0, 0, 0.503785,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.51285,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494356,-99) , 
8, 1.50629, 1, 0, 0.503624,-99) , 
NN(
0, 
0, 
-1, 1.25106, 0, -1, 0.497198,-99) , 
5, 11, 0, 0, 0.498124,-99) , 
0, -3.06903, 1, 0, 0.500483,-99)    );
  // itree = 778
  fBoostWeights.push_back(0.00389446);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505306,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50124,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498156,-99) , 
1, 4.85328, 0, 0, 0.499478,-99) , 
7, 1, 1, 0, 0.499741,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492498,-99) , 
3, 24, 0, 0, 0.499498,-99)    );
  // itree = 779
  fBoostWeights.push_back(0.00641565);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 8, 1, 1, 0.508689,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495961,-99) , 
2, -0.544762, 0, 0, 0.505506,-99) , 
NN(
NN(
0, 
0, 
-1, 23.3616, 0, 1, 0.501583,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500874,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494182,-99) , 
7, 22, 0, 0, 0.497719,-99) , 
7, 15, 1, 0, 0.499673,-99) , 
1, -13.6182, 1, 0, 0.500607,-99)    );
  // itree = 780
  fBoostWeights.push_back(0.00650774);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510265,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503387,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488108,-99) , 
7, 20, 1, 0, 0.500384,-99) , 
7, 26, 0, 0, 0.502185,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512088,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498914,-99) , 
7, 11, 1, 0, 0.504054,-99) , 
NN(
0, 
0, 
-1, 20.1744, 1, -1, 0.497839,-99) , 
1, 32.5109, 0, 0, 0.498481,-99) , 
3, 42, 1, 0, 0.499283,-99)    );
  // itree = 781
  fBoostWeights.push_back(0.00568005);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502122,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493957,-99) , 
2, -1.21429, 0, 0, 0.501581,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492732,-99) , 
8, 1.16289, 0, 0, 0.501052,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491434,-99) , 
3, 23, 0, 0, 0.50078,-99)    );
  // itree = 782
  fBoostWeights.push_back(0.00953327);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502329,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493084,-99) , 
0, -15.2291, 0, 0, 0.501249,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506029,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.478495,-99) , 
8, 1.63065, 1, 0, 0.496274,-99) , 
1, -19.4591, 0, 0, 0.500351,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512103,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496397,-99) , 
1, 48.8462, 0, 0, 0.499154,-99) , 
NN(
0, 
0, 
-1, 26.7489, 1, -1, 0.494565,-99) , 
6, 2, 0, 0, 0.497595,-99) , 
1, 4.77829, 1, 0, 0.499156,-99)    );
  // itree = 783
  fBoostWeights.push_back(0.00609438);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.509143,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503497,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493004,-99) , 
1, 62.1142, 1, 0, 0.500152,-99) , 
2, 0.472857, 0, 0, 0.502832,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50124,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495866,-99) , 
0, 7.35162, 1, 0, 0.499598,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.48889,-99) , 
0, -27.3842, 0, 0, 0.499093,-99) , 
1, 23.3228, 0, 0, 0.499639,-99)    );
  // itree = 784
  fBoostWeights.push_back(0.00535277);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.513546,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499561,-99) , 
2, 1.47333, 0, 0, 0.500268,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500987,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493361,-99) , 
5, 3, 1, 0, 0.495751,-99) , 
3, 42, 0, 0, 0.499302,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502893,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491581,-99) , 
9, 0, 0, 0, 0.497089,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.484543,-99) , 
1, 14.9074, 1, 0, 0.494301,-99) , 
7, 27, 1, 0, 0.498658,-99)    );
  // itree = 785
  fBoostWeights.push_back(0.00309284);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512007,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499683,-99) , 
2, -1.47143, 0, 0, 0.506127,-99) , 
NN(
NN(
0, 
0, 
-1, 1.45857, 0, 1, 0.500632,-99) , 
NN(
0, 
0, 
-1, 6, 1, -1, 0.492451,-99) , 
3, 33, 0, 0, 0.500015,-99) , 
2, -1.17286, 1, 0, 0.50047,-99)    );
  // itree = 786
  fBoostWeights.push_back(0.00509349);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500742,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492045,-99) , 
1, 60.4132, 1, 0, 0.500308,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503916,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491419,-99) , 
8, 1.44418, 1, 0, 0.495495,-99) , 
7, 3, 0, 0, 0.499682,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502129,-99) , 
NN(
0, 
0, 
-1, 7, 1, -1, 0.489967,-99) , 
7, 10, 1, 0, 0.494096,-99) , 
3, 37, 0, 0, 0.498998,-99)    );
  // itree = 787
  fBoostWeights.push_back(0.007448);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501192,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490486,-99) , 
1, -28.3118, 0, 0, 0.500433,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492806,-99) , 
0, 27.325, 1, 0, 0.500075,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.508943,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512602,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491826,-99) , 
0, -15.2154, 1, 0, 0.495876,-99) , 
1, 73.4271, 0, 0, 0.497332,-99) , 
1, 13.9693, 1, 0, 0.499413,-99)    );
  // itree = 788
  fBoostWeights.push_back(0.0112346);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.517327,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.485794,-99) , 
8, 1.6369, 1, 0, 0.506476,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491982,-99) , 
1, 69.2297, 1, 0, 0.503021,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503238,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49141,-99) , 
1, -16.4187, 0, 0, 0.501436,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505049,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495918,-99) , 
1, -22.3565, 1, 0, 0.496811,-99) , 
2, -0.368571, 1, 0, 0.498274,-99) , 
1, 23.4368, 0, 0, 0.498966,-99)    );
  // itree = 789
  fBoostWeights.push_back(0.00657778);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512948,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49683,-99) , 
3, 45, 0, 0, 0.503038,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.513031,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499797,-99) , 
7, 15, 1, 0, 0.506359,-99) , 
NN(
0, 
0, 
-1, 4, 1, -1, 0.497226,-99) , 
3, 30, 1, 0, 0.497809,-99) , 
2, 1.34857, 0, 0, 0.498174,-99)    );
  // itree = 790
  fBoostWeights.push_back(0.00671297);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 1.10286, 0, 1, 0.503712,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500114,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.477896,-99) , 
8, 1.29825, 0, 0, 0.496624,-99) , 
5, 4, 0, 0, 0.501057,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507957,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500036,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490932,-99) , 
0, -17.5449, 0, 0, 0.497592,-99) , 
1, -22.8282, 1, 0, 0.498493,-99) , 
0, -3.07147, 0, 0, 0.499983,-99)    );
  // itree = 791
  fBoostWeights.push_back(0.00562426);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.513555,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.514474,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489595,-99) , 
8, 1.45303, 1, 0, 0.500573,-99) , 
1, 72.6616, 0, 0, 0.503076,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500048,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488779,-99) , 
0, 24.7205, 1, 0, 0.499348,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490088,-99) , 
0, -27.3822, 0, 0, 0.498916,-99) , 
1, 23.3725, 0, 0, 0.499522,-99)    );
  // itree = 792
  fBoostWeights.push_back(0.00757133);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504556,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.5098,-99) , 
NN(
0, 
0, 
-1, 22.0908, 1, -1, 0.496469,-99) , 
1, 69.6412, 0, 0, 0.496915,-99) , 
0, -27.3862, 1, 0, 0.497333,-99)    );
  // itree = 793
  fBoostWeights.push_back(0.00917294);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 7, 1, 1, 0.508509,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496768,-99) , 
2, 0.0761904, 0, 0, 0.502897,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.516575,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498677,-99) , 
7, 18, 0, 0, 0.505956,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512913,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496345,-99) , 
0, -27.3867, 1, 0, 0.497251,-99) , 
1, 51.1405, 0, 0, 0.497865,-99) , 
6, 1, 1, 0, 0.498459,-99)    );
  // itree = 794
  fBoostWeights.push_back(0.00494565);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.511881,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499675,-99) , 
0, -21.3071, 1, 0, 0.500737,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489497,-99) , 
1, 60.3759, 1, 0, 0.500178,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502936,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494167,-99) , 
1, 6.71619, 1, 0, 0.49769,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488579,-99) , 
1, -2.79098, 0, 0, 0.494376,-99) , 
7, 27, 1, 0, 0.499433,-99)    );
  // itree = 795
  fBoostWeights.push_back(0.00922482);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507239,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499918,-99) , 
2, -0.111428, 0, 0, 0.504201,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490163,-99) , 
1, 32.2472, 1, 0, 0.503048,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512978,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.519866,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496945,-99) , 
1, 60.3412, 0, 0, 0.498251,-99) , 
0, 27.329, 0, 0, 0.499128,-99) , 
6, 2, 1, 0, 0.500554,-99)    );
  // itree = 796
  fBoostWeights.push_back(0.00500589);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 41.8589, 0, 1, 0.501172,-99) , 
NN(
0, 
0, 
-1, 21, 1, -1, 0.495753,-99) , 
6, 1, 0, 0, 0.500526,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.509556,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494206,-99) , 
7, 16, 0, 0, 0.499229,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.485457,-99) , 
7, 25, 1, 0, 0.496218,-99) , 
3, 38, 0, 0, 0.499943,-99)    );
  // itree = 797
  fBoostWeights.push_back(0.00883914);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 9.08495, 0, 1, 0.504174,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506254,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496886,-99) , 
3, 33, 1, 0, 0.499024,-99) , 
3, 44, 0, 0, 0.502217,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503576,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49439,-99) , 
5, 8, 1, 0, 0.500233,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504975,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492636,-99) , 
0, -9.142, 1, 0, 0.495674,-99) , 
7, 20, 1, 0, 0.498614,-99) , 
2, 0.417143, 1, 0, 0.501034,-99)    );
  // itree = 798
  fBoostWeights.push_back(0.00626419);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0.857619, 0, 1, 0.501874,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491347,-99) , 
2, 1.37286, 1, 0, 0.501162,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50469,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497581,-99) , 
0, -3.06385, 1, 0, 0.500602,-99) , 
NN(
0, 
0, 
-1, 6, 0, -1, 0.493831,-99) , 
8, 1.73981, 1, 0, 0.498275,-99) , 
3, 45, 1, 0, 0.500013,-99)    );
  // itree = 799
  fBoostWeights.push_back(0.00383867);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506259,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501872,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499105,-99) , 
0, -3.07018, 0, 0, 0.500715,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491764,-99) , 
3, 24, 0, 0, 0.500432,-99) , 
2, -1.32571, 1, 0, 0.50074,-99)    );
  // itree = 800
  fBoostWeights.push_back(0.0065165);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 2, 1, 1, 0.507617,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503335,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496849,-99) , 
2, 0.898095, 1, 0, 0.500674,-99) , 
5, 10, 0, 0, 0.50219,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503282,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498709,-99) , 
7, 12, 1, 0, 0.500572,-99) , 
NN(
0, 
0, 
-1, 5, 1, -1, 0.496405,-99) , 
6, 3, 1, 0, 0.499088,-99) , 
2, 0.250476, 0, 0, 0.500316,-99)    );
  // itree = 801
  fBoostWeights.push_back(0.00684535);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.508517,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500944,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494548,-99) , 
3, 33, 0, 0, 0.500465,-99) , 
2, -1.16286, 1, 0, 0.501079,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506174,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.511496,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491883,-99) , 
0, 15.1619, 0, 0, 0.495766,-99) , 
1, 73.6038, 0, 0, 0.496931,-99) , 
1, 14.1658, 1, 0, 0.500089,-99)    );
  // itree = 802
  fBoostWeights.push_back(0.00548451);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503324,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497766,-99) , 
1, 26.9203, 1, 0, 0.501682,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503439,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498072,-99) , 
3, 40, 1, 0, 0.498994,-99) , 
1, 4.90203, 0, 0, 0.50015,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492901,-99) , 
7, 1, 0, 0, 0.499825,-99)    );
  // itree = 803
  fBoostWeights.push_back(0.00572266);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.518702,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.514324,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499468,-99) , 
0, 32.5348, 0, 0, 0.500252,-99) , 
1, 60.4234, 0, 0, 0.501134,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505803,-99) , 
NN(
0, 
0, 
-1, -19.5704, 0, -1, 0.495103,-99) , 
1, -13.6507, 1, 0, 0.497065,-99) , 
0, -9.14934, 0, 0, 0.500081,-99)    );
  // itree = 804
  fBoostWeights.push_back(0.00578409);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502231,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.480229,-99) , 
1, 60.2935, 1, 0, 0.501151,-99) , 
NN(
0, 
0, 
-1, 15.1734, 1, -1, 0.497836,-99) , 
8, 1.67632, 1, 0, 0.499849,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49271,-99) , 
2, -1.47857, 0, 0, 0.49959,-99)    );
  // itree = 805
  fBoostWeights.push_back(0.0076642);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 0, 1, 0.505095,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502412,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493023,-99) , 
1, 14.1135, 1, 0, 0.499907,-99) , 
5, 7, 0, 0, 0.502155,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.516406,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497697,-99) , 
1, 60.3363, 0, 0, 0.498593,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488983,-99) , 
0, -32.0187, 0, 0, 0.497942,-99) , 
0, 3.00624, 0, 0, 0.499696,-99)    );
  // itree = 806
  fBoostWeights.push_back(0.00386277);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 27.3254, 0, 1, 0.501067,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507448,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.486239,-99) , 
1, 73.1861, 0, 0, 0.495293,-99) , 
1, 51.1641, 1, 0, 0.500695,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493142,-99) , 
7, 29, 1, 0, 0.500373,-99)    );
  // itree = 807
  fBoostWeights.push_back(0.00457277);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501315,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490838,-99) , 
0, 27.3225, 1, 0, 0.500745,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493422,-99) , 
8, 1.16352, 0, 0, 0.500308,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490415,-99) , 
3, 24, 0, 0, 0.499972,-99)    );
  // itree = 808
  fBoostWeights.push_back(0.0076094);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.51497,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502519,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.485912,-99) , 
1, -19.8698, 0, 0, 0.500535,-99) , 
1, -38.5316, 1, 0, 0.50144,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.515045,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498854,-99) , 
1, 70.9886, 0, 0, 0.50006,-99) , 
NN(
0, 
0, 
-1, 4, 0, -1, 0.494362,-99) , 
0, 15.1661, 1, 0, 0.49913,-99) , 
1, 5.0126, 1, 0, 0.500453,-99)    );
  // itree = 809
  fBoostWeights.push_back(0.0099112);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.519566,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495023,-99) , 
1, 51.5737, 1, 0, 0.509168,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.508503,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498325,-99) , 
0, 5.90299, 1, 0, 0.500336,-99) , 
1, 23.4494, 0, 0, 0.501704,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503309,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.4859,-99) , 
6, 1, 0, 0, 0.50112,-99) , 
NN(
0, 
0, 
-1, -12.9127, 1, -1, 0.49449,-99) , 
5, 4, 1, 0, 0.497023,-99) , 
0, 3.00827, 0, 0, 0.498965,-99)    );
  // itree = 810
  fBoostWeights.push_back(0.00331303);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512723,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510593,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499819,-99) , 
0, 29.061, 0, 0, 0.500388,-99) , 
0, -27.3861, 1, 0, 0.501062,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49316,-99) , 
1, 60.4204, 1, 0, 0.50067,-99)    );
  // itree = 811
  fBoostWeights.push_back(0.0108173);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507192,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.481484,-99) , 
1, 66.5482, 1, 0, 0.504969,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503799,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.48669,-99) , 
7, 10, 0, 0, 0.497949,-99) , 
8, 1.76978, 1, 0, 0.503106,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50172,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494236,-99) , 
1, -19.4235, 0, 0, 0.500485,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506342,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.484931,-99) , 
8, 1.49439, 1, 0, 0.495101,-99) , 
0, 15.1662, 1, 0, 0.499757,-99) , 
1, 4.82491, 0, 0, 0.5012,-99)    );
  // itree = 812
  fBoostWeights.push_back(0.0072018);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510513,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496932,-99) , 
3, 44, 0, 0, 0.505242,-99) , 
NN(
NN(
0, 
0, 
-1, 6, 1, 1, 0.508656,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501621,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496785,-99) , 
8, 1.78144, 0, 0, 0.498069,-99) , 
3, 34, 1, 0, 0.498985,-99) , 
2, 1.34857, 0, 0, 0.499422,-99)    );
  // itree = 813
  fBoostWeights.push_back(0.00860777);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 37.3747, 1, 1, 0.508361,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502275,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496714,-99) , 
7, 16, 1, 0, 0.499668,-99) , 
6, 3, 1, 0, 0.504812,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502323,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491185,-99) , 
0, 10.9848, 1, 0, 0.500556,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50457,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495659,-99) , 
1, -22.5495, 1, 0, 0.496524,-99) , 
5, 8, 0, 0, 0.497969,-99) , 
1, 23.2776, 0, 0, 0.49897,-99)    );
  // itree = 814
  fBoostWeights.push_back(0.00596969);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 60.3483, 0, 1, 0.501335,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504356,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.487393,-99) , 
8, 1.44991, 1, 0, 0.495159,-99) , 
0, 22.7131, 1, 0, 0.500767,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512624,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49541,-99) , 
0, 2.45981, 1, 0, 0.500555,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.485029,-99) , 
0, -7.24572, 0, 0, 0.496048,-99) , 
5, 11, 1, 0, 0.500145,-99)    );
  // itree = 815
  fBoostWeights.push_back(0.00942363);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 5, 0, 1, 0.51265,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.508274,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490891,-99) , 
9, 0, 0, 0, 0.497349,-99) , 
8, 1.38588, 1, 0, 0.502134,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.508709,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498754,-99) , 
2, 0.63, 0, 0, 0.501289,-99) , 
NN(
0, 
0, 
-1, 2.14132, 1, -1, 0.497282,-99) , 
6, 3, 0, 0, 0.498736,-99) , 
0, 9.08821, 0, 0, 0.499612,-99)    );
  // itree = 816
  fBoostWeights.push_back(0.00733127);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 10, 0, 1, 0.503092,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500957,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490674,-99) , 
5, 8, 1, 0, 0.49578,-99) , 
0, -15.2257, 0, 0, 0.501923,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503414,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497617,-99) , 
5, 4, 0, 0, 0.49999,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500375,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490314,-99) , 
8, 1.64392, 0, 0, 0.494629,-99) , 
5, 8, 1, 0, 0.498052,-99) , 
1, 4.77829, 0, 0, 0.499724,-99)    );
  // itree = 817
  fBoostWeights.push_back(0.00510953);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 27.3242, 0, 1, 0.501007,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489655,-99) , 
1, 60.3759, 1, 0, 0.500444,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.509117,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49567,-99) , 
7, 27, 1, 0, 0.500777,-99) , 
NN(
0, 
0, 
-1, 27, 0, -1, 0.493137,-99) , 
9, 0, 1, 0, 0.496887,-99) , 
7, 25, 1, 0, 0.499679,-99)    );
  // itree = 818
  fBoostWeights.push_back(0.00790382);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 19.5089, 1, 1, 0.509046,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507267,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491338,-99) , 
9, 0, 0, 0, 0.497477,-99) , 
8, 1.50227, 1, 0, 0.502717,-99) , 
NN(
NN(
0, 
0, 
-1, 6, 1, 1, 0.508111,-99) , 
NN(
0, 
0, 
-1, 26, 0, -1, 0.49826,-99) , 
2, -1.05286, 1, 0, 0.499217,-99) , 
0, 9.08847, 0, 0, 0.500119,-99)    );
  // itree = 819
  fBoostWeights.push_back(0.00935842);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 1, 1, 1, 0.502741,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507758,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49507,-99) , 
3, 42, 1, 0, 0.498058,-99) , 
7, 27, 1, 0, 0.501757,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510319,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.513814,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49459,-99) , 
1, 41.6876, 0, 0, 0.496112,-99) , 
8, 1.28124, 1, 0, 0.498402,-99) , 
7, 11, 0, 0, 0.500443,-99)    );
  // itree = 820
  fBoostWeights.push_back(0.00589832);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512753,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501779,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497903,-99) , 
3, 44, 0, 0, 0.500443,-99) , 
3, 25, 1, 0, 0.500928,-99) , 
NN(
NN(
0, 
0, 
-1, 6, 1, 1, 0.504632,-99) , 
NN(
0, 
0, 
-1, 3, 0, -1, 0.491969,-99) , 
6, 2, 1, 0, 0.496761,-99) , 
2, 0.978571, 1, 0, 0.500333,-99)    );
  // itree = 821
  fBoostWeights.push_back(0.00617412);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.517374,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495292,-99) , 
8, 1.50056, 1, 0, 0.506429,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.514694,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498895,-99) , 
1, 21.0489, 1, 0, 0.501774,-99) , 
NN(
0, 
0, 
-1, 21.2468, 1, -1, 0.49795,-99) , 
1, 17.2324, 0, 0, 0.498776,-99) , 
1, -22.841, 1, 0, 0.499396,-99)    );
  // itree = 822
  fBoostWeights.push_back(0.00478416);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.518585,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496918,-99) , 
1, 6.37179, 0, 0, 0.506642,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505552,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499246,-99) , 
6, 1, 1, 0, 0.50003,-99) , 
0, -21.3086, 1, 0, 0.500603,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489445,-99) , 
1, 69.5861, 1, 0, 0.500221,-99)    );
  // itree = 823
  fBoostWeights.push_back(0.00765837);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507308,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498686,-99) , 
8, 1.51587, 0, 0, 0.503664,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501749,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492855,-99) , 
1, 14.1899, 1, 0, 0.499497,-99) , 
7, 11, 0, 0, 0.501959,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502361,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495335,-99) , 
2, 0.0838095, 1, 0, 0.501263,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50384,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494468,-99) , 
1, 23.4166, 0, 0, 0.495717,-99) , 
2, 0.300476, 1, 0, 0.499213,-99) , 
6, 3, 0, 0, 0.500211,-99)    );
  // itree = 824
  fBoostWeights.push_back(0.00875388);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 1.66952, 0, 1, 0.504723,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.486681,-99) , 
3, 35, 0, 0, 0.503197,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.508148,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496558,-99) , 
2, -0.601905, 0, 0, 0.504235,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502624,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496278,-99) , 
7, 10, 1, 0, 0.498478,-99) , 
1, -13.6246, 1, 0, 0.499401,-99) , 
2, 0.417143, 0, 0, 0.500639,-99)    );
  // itree = 825
  fBoostWeights.push_back(0.00586311);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, -9.14697, 1, 1, 0.501731,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490904,-99) , 
1, 60.3953, 1, 0, 0.501195,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506792,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497947,-99) , 
0, 3.03525, 0, 0, 0.501654,-99) , 
NN(
0, 
0, 
-1, 2, 1, -1, 0.493296,-99) , 
8, 1.59645, 1, 0, 0.497615,-99) , 
7, 6, 0, 0, 0.500269,-99)    );
  // itree = 826
  fBoostWeights.push_back(0.00419471);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505743,-99) , 
NN(
NN(
0, 
0, 
-1, 4, 1, 1, 0.501825,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500256,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492589,-99) , 
2, 0.654286, 1, 0, 0.498397,-99) , 
3, 44, 1, 0, 0.499667,-99) , 
7, 1, 1, 0, 0.499934,-99)    );
  // itree = 827
  fBoostWeights.push_back(0.00533784);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506105,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512841,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498247,-99) , 
2, 1.72381, 0, 0, 0.498712,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.485781,-99) , 
3, 24, 0, 0, 0.498297,-99) , 
2, -1.36143, 1, 0, 0.498669,-99)    );
  // itree = 828
  fBoostWeights.push_back(0.00755047);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 1.75424, 0, 1, 0.506714,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501555,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.485614,-99) , 
1, 14.2706, 1, 0, 0.496963,-99) , 
0, 6.56248, 1, 0, 0.503499,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512254,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499628,-99) , 
0, 4.25775, 0, 0, 0.504459,-99) , 
NN(
0, 
0, 
-1, -21.9282, 0, -1, 0.498532,-99) , 
1, 14.0125, 0, 0, 0.499953,-99) , 
5, 4, 1, 0, 0.501286,-99)    );
  // itree = 829
  fBoostWeights.push_back(0.00441775);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 7, 0, 1, 0.507017,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.509766,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501709,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498746,-99) , 
1, 4.87162, 0, 0, 0.500019,-99) , 
3, 25, 1, 0, 0.50039,-99) , 
7, 28, 0, 0, 0.500949,-99)    );
  // itree = 830
  fBoostWeights.push_back(0.00569628);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512946,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501658,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494475,-99) , 
1, 22.0952, 1, 0, 0.50081,-99) , 
0, -27.3841, 1, 0, 0.501479,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493266,-99) , 
1, 69.6624, 1, 0, 0.501203,-99)    );
  // itree = 831
  fBoostWeights.push_back(0.00476413);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 9.08669, 0, 1, 0.509017,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495972,-99) , 
1, 69.1936, 1, 0, 0.505927,-99) , 
NN(
0, 
0, 
-1, 27.3219, 1, -1, 0.498544,-99) , 
1, 23.3419, 0, 0, 0.499615,-99)    );
  // itree = 832
  fBoostWeights.push_back(0.00408654);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505362,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.509331,-99) , 
NN(
0, 
0, 
-1, 30.5232, 1, -1, 0.49853,-99) , 
1, 60.4324, 0, 0, 0.499051,-99) , 
0, -27.3833, 1, 0, 0.499398,-99)    );
  // itree = 833
  fBoostWeights.push_back(0.00663784);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 51.0382, 0, 1, 0.503894,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494001,-99) , 
0, 25.2231, 1, 0, 0.502806,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.508669,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499294,-99) , 
7, 5, 1, 0, 0.500184,-99) , 
NN(
0, 
0, 
-1, 45, 0, -1, 0.490644,-99) , 
7, 3, 0, 0, 0.49894,-99) , 
5, 6, 1, 0, 0.500899,-99)    );
  // itree = 834
  fBoostWeights.push_back(0.00720728);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504243,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498057,-99) , 
0, -17.7342, 0, 0, 0.503195,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494693,-99) , 
3, 34, 0, 0, 0.502451,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.508488,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510755,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497426,-99) , 
1, 60.4132, 0, 0, 0.49807,-99) , 
0, 33.6125, 0, 0, 0.49874,-99) , 
5, 7, 0, 0, 0.500319,-99)    );
  // itree = 835
  fBoostWeights.push_back(0.00525537);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502997,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499326,-99) , 
8, 1.45722, 0, 0, 0.501715,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49089,-99) , 
3, 24, 0, 0, 0.501365,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491536,-99) , 
2, -1.47143, 0, 0, 0.501012,-99)    );
  // itree = 836
  fBoostWeights.push_back(0.0087344);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 20, 1, 1, 0.506755,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505337,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496196,-99) , 
5, 5, 0, 0, 0.501271,-99) , 
3, 43, 1, 0, 0.502744,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506399,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49314,-99) , 
0, -9.3438, 0, 0, 0.502673,-99) , 
NN(
0, 
0, 
-1, 13, 1, -1, 0.497545,-99) , 
5, 9, 0, 0, 0.499032,-99) , 
7, 16, 0, 0, 0.500746,-99)    );
  // itree = 837
  fBoostWeights.push_back(0.00484889);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 37, 1, 1, 0.503002,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504933,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498831,-99) , 
0, -21.3079, 1, 0, 0.499308,-99) , 
1, 4.92736, 0, 0, 0.500888,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491055,-99) , 
7, 1, 0, 0, 0.500451,-99)    );
  // itree = 838
  fBoostWeights.push_back(0.00953739);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, -9.59576, 1, 1, 0.509715,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504645,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495178,-99) , 
1, -19.2795, 0, 0, 0.503069,-99) , 
0, -15.2136, 1, 0, 0.503957,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505038,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498367,-99) , 
7, 17, 1, 0, 0.502124,-99) , 
NN(
0, 
0, 
-1, 3, 1, -1, 0.494097,-99) , 
3, 41, 0, 0, 0.500599,-99) , 
1, 4.93609, 1, 0, 0.502517,-99)    );
  // itree = 839
  fBoostWeights.push_back(0.0117971);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.516993,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.517496,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488357,-99) , 
9, 0, 1, 0, 0.498528,-99) , 
8, 1.32303, 1, 0, 0.502924,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.513469,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500515,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493477,-99) , 
1, 8.02449, 1, 0, 0.498327,-99) , 
1, 60.4234, 0, 0, 0.499057,-99) , 
0, -9.14574, 1, 0, 0.500054,-99)    );
  // itree = 840
  fBoostWeights.push_back(0.00791881);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 14.2428, 0, 1, 0.502799,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.487796,-99) , 
1, 32.7183, 1, 0, 0.50158,-99) , 
NN(
NN(
0, 
0, 
-1, -3.0788, 0, 1, 0.508762,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505046,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496497,-99) , 
0, -15.2283, 1, 0, 0.497714,-99) , 
1, 41.7847, 0, 0, 0.498733,-99) , 
6, 2, 1, 0, 0.499771,-99)    );
  // itree = 841
  fBoostWeights.push_back(0.00309217);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.511945,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499655,-99) , 
0, 27.3249, 0, 0, 0.500354,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491097,-99) , 
1, 69.6678, 1, 0, 0.500039,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489125,-99) , 
3, 23, 0, 0, 0.49973,-99)    );
  // itree = 842
  fBoostWeights.push_back(0.00840652);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.513303,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.499048,-99) , 
0, -4.10253, 0, 0, 0.507568,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502263,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495662,-99) , 
3, 42, 0, 0, 0.500835,-99) , 
5, 10, 0, 0, 0.502297,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.513476,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49879,-99) , 
1, -37.9225, 1, 0, 0.502402,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503102,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.494318,-99) , 
8, 1.64392, 0, 0, 0.49845,-99) , 
1, -14.4208, 1, 0, 0.499485,-99) , 
1, 4.93343, 0, 0, 0.500687,-99)    );
  // itree = 843
  fBoostWeights.push_back(0.00549856);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 5, 0, 1, 0.506429,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510346,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49946,-99) , 
0, 2.94023, 1, 0, 0.505829,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500591,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495193,-99) , 
2, -0.179524, 0, 0, 0.498774,-99) , 
2, -1.05286, 1, 0, 0.499461,-99) , 
1, -22.8293, 1, 0, 0.500025,-99)    );
  // itree = 844
  fBoostWeights.push_back(0.00358895);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507456,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500561,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489617,-99) , 
1, -25.4596, 0, 0, 0.499836,-99) , 
0, 27.3254, 0, 0, 0.500271,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491675,-99) , 
1, 69.6412, 1, 0, 0.499982,-99)    );
  // itree = 845
  fBoostWeights.push_back(0.00788141);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505368,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.497246,-99) , 
7, 29, 1, 0, 0.504031,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.495833,-99) , 
1, -13.0267, 0, 0, 0.50274,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505314,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491423,-99) , 
1, 65.6666, 1, 0, 0.503011,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.501767,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496136,-99) , 
8, 1.64363, 0, 0, 0.498638,-99) , 
1, 14.0834, 0, 0, 0.499693,-99) , 
7, 22, 0, 0, 0.500477,-99)    );
  // itree = 846
  fBoostWeights.push_back(0.00586683);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.509969,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502916,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488496,-99) , 
1, 62.1497, 1, 0, 0.498367,-99) , 
7, 19, 0, 0, 0.502707,-99) , 
NN(
0, 
0, 
-1, -27.3841, 0, -1, 0.497802,-99) , 
1, 23.3974, 0, 0, 0.498516,-99)    );
  // itree = 847
  fBoostWeights.push_back(0.00563944);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.514909,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498558,-99) , 
5, 3, 0, 0, 0.509744,-99) , 
NN(
0, 
0, 
-1, 2, 1, -1, 0.494362,-99) , 
8, 1.74619, 1, 0, 0.505055,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.5005,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496137,-99) , 
2, -0.785714, 0, 0, 0.499717,-99) , 
NN(
0, 
0, 
-1, 16, 1, -1, 0.492938,-99) , 
2, 1.34857, 1, 0, 0.499239,-99) , 
7, 4, 1, 0, 0.500231,-99)    );
  // itree = 848
  fBoostWeights.push_back(0.00791326);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 1.30252, 1, 1, 0.508154,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489666,-99) , 
8, 1.79135, 1, 0, 0.504417,-99) , 
NN(
NN(
0, 
0, 
-1, 4, 0, 1, 0.502201,-99) , 
NN(
0, 
0, 
-1, 1, 0, -1, 0.496557,-99) , 
1, 12.8923, 0, 0, 0.498289,-99) , 
1, -13.5098, 1, 0, 0.499279,-99)    );
  // itree = 849
  fBoostWeights.push_back(0.0041536);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.51718,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505468,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49692,-99) , 
2, -0.14, 0, 0, 0.501271,-99) , 
2, 0.707143, 0, 0, 0.505221,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.508363,-99) , 
NN(
0, 
0, 
-1, -19.9174, 0, -1, 0.499003,-99) , 
1, -32.2538, 1, 0, 0.499468,-99) , 
6, 4, 0, 0, 0.500137,-99)    );
   return;
};
 
// Clean up
inline void ReadBDT::Clear() 
{
   for (unsigned int itree=0; itree<fForest.size(); itree++) { 
      delete fForest[itree]; 
   }
}
   inline double ReadBDT::GetMvaValue( const std::vector<double>& inputValues ) const
   {
      // classifier response value
      double retval = 0;

      // classifier response, sanity check first
      if (!IsStatusClean()) {
         std::cout << "Problem in class \"" << fClassName << "\": cannot return classifier response"
                   << " because status is dirty" << std::endl;
         retval = 0;
      }
      else {
         if (IsNormalised()) {
            // normalise variables
            std::vector<double> iV;
            iV.reserve(inputValues.size());
            int ivar = 0;
            for (std::vector<double>::const_iterator varIt = inputValues.begin();
                 varIt != inputValues.end(); varIt++, ivar++) {
               iV.push_back(NormVariable( *varIt, fVmin[ivar], fVmax[ivar] ));
            }
            retval = GetMvaValue__( iV );
         }
         else {
            retval = GetMvaValue__( inputValues );
         }
      }

      return retval;
   }
